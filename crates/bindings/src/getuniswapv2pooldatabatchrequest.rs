/**

Generated by the following Solidity interface...
```solidity
interface GetUniswapV2PoolDataBatchRequest {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetUniswapV2PoolDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50604051610cd8380380610cd8833981810160405281019061003291906108ec565b6000815167ffffffffffffffff81111561004f5761004e61074b565b5b60405190808252806020026020018201604052801561008857816020015b610075610699565b81526020019060019003908161006d5790505b50905060005b82518110156106375760008382815181106100ac576100ab610935565b5b602002602001015190506100c58161066660201b60201c565b156100d0575061062c565b6100d8610699565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101479190610964565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190610964565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610237816000015161066660201b60201c565b1561024357505061062c565b610256816040015161066660201b60201c565b1561026257505061062c565b600080826000015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103139190610a02565b60006040518083038160008787f1925050503d8060008114610351576040519150601f19603f3d011682016040523d82523d6000602084013e610356565b606091505b509150915081156103c757600060208251036103b757818060200190518101906103809190610a4f565b90506000811480610391575060ff81115b156103a057505050505061062c565b80846020019060ff16908160ff16815250506103c1565b505050505061062c565b506103d0565b5050505061062c565b600080846040015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104819190610a02565b60006040518083038160008787f1925050503d80600081146104bf576040519150601f19603f3d011682016040523d82523d6000602084013e6104c4565b606091505b50915091508115610539576000602082510361052757818060200190518101906104ee9190610a4f565b905060008114806104ff575060ff81115b15610510575050505050505061062c565b80866060019060ff16908160ff1681525050610533565b5050505050505061062c565b50610544565b50505050505061062c565b8573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190610afe565b50866080018760a001826dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16815250826dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1681525050508488888151811061061a57610619610935565b5b60200260200101819052505050505050505b80600101905061008e565b5060008160405160200161064b9190610cb5565b60405160208183030381529060405290506020810180590381f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b0361068f5760019050610694565b600090505b919050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff16815260200160006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107838261073a565b810181811067ffffffffffffffff821117156107a2576107a161074b565b5b80604052505050565b60006107b5610721565b90506107c1828261077a565b919050565b600067ffffffffffffffff8211156107e1576107e061074b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610822826107f7565b9050919050565b61083281610817565b811461083d57600080fd5b50565b60008151905061084f81610829565b92915050565b6000610868610863846107c6565b6107ab565b9050808382526020820190506020840283018581111561088b5761088a6107f2565b5b835b818110156108b457806108a08882610840565b84526020840193505060208101905061088d565b5050509392505050565b600082601f8301126108d3576108d2610735565b5b81516108e3848260208601610855565b91505092915050565b6000602082840312156109025761090161072b565b5b600082015167ffffffffffffffff8111156109205761091f610730565b5b61092c848285016108be565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561097a5761097961072b565b5b600061098884828501610840565b91505092915050565b600081519050919050565b600081905092915050565b60005b838110156109c55780820151818401526020810190506109aa565b60008484015250505050565b60006109dc82610991565b6109e6818561099c565b93506109f68185602086016109a7565b80840191505092915050565b6000610a0e82846109d1565b915081905092915050565b6000819050919050565b610a2c81610a19565b8114610a3757600080fd5b50565b600081519050610a4981610a23565b92915050565b600060208284031215610a6557610a6461072b565b5b6000610a7384828501610a3a565b91505092915050565b60006dffffffffffffffffffffffffffff82169050919050565b610a9f81610a7c565b8114610aaa57600080fd5b50565b600081519050610abc81610a96565b92915050565b600063ffffffff82169050919050565b610adb81610ac2565b8114610ae657600080fd5b50565b600081519050610af881610ad2565b92915050565b600080600060608486031215610b1757610b1661072b565b5b6000610b2586828701610aad565b9350506020610b3686828701610aad565b9250506040610b4786828701610ae9565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b8681610817565b82525050565b600060ff82169050919050565b610ba281610b8c565b82525050565b610bb181610a7c565b82525050565b60c082016000820151610bcd6000850182610b7d565b506020820151610be06020850182610b99565b506040820151610bf36040850182610b7d565b506060820151610c066060850182610b99565b506080820151610c196080850182610ba8565b5060a0820151610c2c60a0850182610ba8565b50505050565b6000610c3e8383610bb7565b60c08301905092915050565b6000602082019050919050565b6000610c6282610b51565b610c6c8185610b5c565b9350610c7783610b6d565b8060005b83811015610ca8578151610c8f8882610c32565b9750610c9a83610c4a565b925050600181019050610c7b565b5085935050505092915050565b60006020820190508181036000830152610ccf8184610c57565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x0C\xD88\x03\x80a\x0C\xD8\x839\x81\x81\x01`@R\x81\x01\x90a\x002\x91\x90a\x08\xECV[`\0\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0OWa\0Na\x07KV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x88W\x81` \x01[a\0ua\x06\x99V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0mW\x90P[P\x90P`\0[\x82Q\x81\x10\x15a\x067W`\0\x83\x82\x81Q\x81\x10a\0\xACWa\0\xABa\t5V[[` \x02` \x01\x01Q\x90Pa\0\xC5\x81a\x06f` \x1B` \x1CV[\x15a\0\xD0WPa\x06,V[a\0\xD8a\x06\x99V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01#W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01G\x91\x90a\tdV[\x81`\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xED\x91\x90a\tdV[\x81`@\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x027\x81`\0\x01Qa\x06f` \x1B` \x1CV[\x15a\x02CWPPa\x06,V[a\x02V\x81`@\x01Qa\x06f` \x1B` \x1CV[\x15a\x02bWPPa\x06,V[`\0\x80\x82`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x13\x91\x90a\n\x02V[`\0`@Q\x80\x83\x03\x81`\0\x87\x87\xF1\x92PPP=\x80`\0\x81\x14a\x03QW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x03VV[``\x91P[P\x91P\x91P\x81\x15a\x03\xC7W`\0` \x82Q\x03a\x03\xB7W\x81\x80` \x01\x90Q\x81\x01\x90a\x03\x80\x91\x90a\nOV[\x90P`\0\x81\x14\x80a\x03\x91WP`\xFF\x81\x11[\x15a\x03\xA0WPPPPPa\x06,V[\x80\x84` \x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xC1V[PPPPPa\x06,V[Pa\x03\xD0V[PPPPa\x06,V[`\0\x80\x84`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04\x81\x91\x90a\n\x02V[`\0`@Q\x80\x83\x03\x81`\0\x87\x87\xF1\x92PPP=\x80`\0\x81\x14a\x04\xBFW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\xC4V[``\x91P[P\x91P\x91P\x81\x15a\x059W`\0` \x82Q\x03a\x05'W\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xEE\x91\x90a\nOV[\x90P`\0\x81\x14\x80a\x04\xFFWP`\xFF\x81\x11[\x15a\x05\x10WPPPPPPPa\x06,V[\x80\x86``\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x053V[PPPPPPPa\x06,V[Pa\x05DV[PPPPPPa\x06,V[\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x8FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xB3\x91\x90a\n\xFEV[P\x86`\x80\x01\x87`\xA0\x01\x82m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x82m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPP\x84\x88\x88\x81Q\x81\x10a\x06\x1AWa\x06\x19a\t5V[[` \x02` \x01\x01\x81\x90RPPPPPPP[\x80`\x01\x01\x90Pa\0\x8EV[P`\0\x81`@Q` \x01a\x06K\x91\x90a\x0C\xB5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[`\0\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\x06\x8FW`\x01\x90Pa\x06\x94V[`\0\x90P[\x91\x90PV[`@Q\x80`\xC0\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0`\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0`\xFF\x16\x81R` \x01`\0m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x07\x83\x82a\x07:V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\xA2Wa\x07\xA1a\x07KV[[\x80`@RPPPV[`\0a\x07\xB5a\x07!V[\x90Pa\x07\xC1\x82\x82a\x07zV[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x07\xE1Wa\x07\xE0a\x07KV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x08\"\x82a\x07\xF7V[\x90P\x91\x90PV[a\x082\x81a\x08\x17V[\x81\x14a\x08=W`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x08O\x81a\x08)V[\x92\x91PPV[`\0a\x08ha\x08c\x84a\x07\xC6V[a\x07\xABV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x08\x8BWa\x08\x8Aa\x07\xF2V[[\x83[\x81\x81\x10\x15a\x08\xB4W\x80a\x08\xA0\x88\x82a\x08@V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x08\x8DV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x08\xD3Wa\x08\xD2a\x075V[[\x81Qa\x08\xE3\x84\x82` \x86\x01a\x08UV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\t\x02Wa\t\x01a\x07+V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t Wa\t\x1Fa\x070V[[a\t,\x84\x82\x85\x01a\x08\xBEV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\tzWa\tya\x07+V[[`\0a\t\x88\x84\x82\x85\x01a\x08@V[\x91PP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\t\xC5W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\t\xAAV[`\0\x84\x84\x01RPPPPV[`\0a\t\xDC\x82a\t\x91V[a\t\xE6\x81\x85a\t\x9CV[\x93Pa\t\xF6\x81\x85` \x86\x01a\t\xA7V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\n\x0E\x82\x84a\t\xD1V[\x91P\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\n,\x81a\n\x19V[\x81\x14a\n7W`\0\x80\xFD[PV[`\0\x81Q\x90Pa\nI\x81a\n#V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\neWa\nda\x07+V[[`\0a\ns\x84\x82\x85\x01a\n:V[\x91PP\x92\x91PPV[`\0m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\n\x9F\x81a\n|V[\x81\x14a\n\xAAW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\n\xBC\x81a\n\x96V[\x92\x91PPV[`\0c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\n\xDB\x81a\n\xC2V[\x81\x14a\n\xE6W`\0\x80\xFD[PV[`\0\x81Q\x90Pa\n\xF8\x81a\n\xD2V[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x0B\x17Wa\x0B\x16a\x07+V[[`\0a\x0B%\x86\x82\x87\x01a\n\xADV[\x93PP` a\x0B6\x86\x82\x87\x01a\n\xADV[\x92PP`@a\x0BG\x86\x82\x87\x01a\n\xE9V[\x91PP\x92P\x92P\x92V[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0B\x86\x81a\x08\x17V[\x82RPPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x0B\xA2\x81a\x0B\x8CV[\x82RPPV[a\x0B\xB1\x81a\n|V[\x82RPPV[`\xC0\x82\x01`\0\x82\x01Qa\x0B\xCD`\0\x85\x01\x82a\x0B}V[P` \x82\x01Qa\x0B\xE0` \x85\x01\x82a\x0B\x99V[P`@\x82\x01Qa\x0B\xF3`@\x85\x01\x82a\x0B}V[P``\x82\x01Qa\x0C\x06``\x85\x01\x82a\x0B\x99V[P`\x80\x82\x01Qa\x0C\x19`\x80\x85\x01\x82a\x0B\xA8V[P`\xA0\x82\x01Qa\x0C,`\xA0\x85\x01\x82a\x0B\xA8V[PPPPV[`\0a\x0C>\x83\x83a\x0B\xB7V[`\xC0\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0Cb\x82a\x0BQV[a\x0Cl\x81\x85a\x0B\\V[\x93Pa\x0Cw\x83a\x0BmV[\x80`\0[\x83\x81\x10\x15a\x0C\xA8W\x81Qa\x0C\x8F\x88\x82a\x0C2V[\x97Pa\x0C\x9A\x83a\x0CJV[\x92PP`\x01\x81\x01\x90Pa\x0C{V[P\x85\x93PPPP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0C\xCF\x81\x84a\x0CWV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600080fdfea26469706673582212206e3d188c651567b33bd148deb631ddcbb30bbdd8f267a5db1d794fed69d7647a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\0\x80\xFD\xFE\xA2dipfsX\"\x12 n=\x18\x8Ce\x15g\xB3;\xD1H\xDE\xB61\xDD\xCB\xB3\x0B\xBD\xD8\xF2g\xA5\xDB\x1DyO\xEDi\xD7dzdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniswapV2PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV2PoolDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
        GetUniswapV2PoolDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            GetUniswapV2PoolDataBatchRequestInstance<T, P, N>,
        >,
    > {
        GetUniswapV2PoolDataBatchRequestInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniswapV2PoolDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, pools)
    }
    /**A [`GetUniswapV2PoolDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniswapV2PoolDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniswapV2PoolDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniswapV2PoolDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniswapV2PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV2PoolDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetUniswapV2PoolDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetUniswapV2PoolDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
            GetUniswapV2PoolDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV2PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
