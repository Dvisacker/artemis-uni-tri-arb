/**

Generated by the following Solidity interface...
```solidity
interface UniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);

    constructor(address _feeToSetter);

    function allPairs(uint256) external view returns (address);
    function allPairsLength() external view returns (uint256);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address, address) external view returns (address);
    function setFeeTo(address _feeTo) external;
    function setFeeToSetter(address _feeToSetter) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_feeToSetter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allPairs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allPairsLength",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createPair",
    "inputs": [
      {
        "name": "tokenA",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenB",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "pair",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "feeTo",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "feeToSetter",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPair",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setFeeTo",
    "inputs": [
      {
        "name": "_feeTo",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setFeeToSetter",
    "inputs": [
      {
        "name": "_feeToSetter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "PairCreated",
    "inputs": [
      {
        "name": "token0",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "token1",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "pair",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod UniswapV2Factory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50604051612aa9380380612aa98339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612a46806100636000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af6146100f0578063c9c6539614610118578063e6a4390514610146578063f46901ed1461017457610088565b8063017e7e581461008d578063094b7415146100b15780631e3dd18b146100b9578063574f2ba3146100d6575b600080fd5b61009561019a565b604080516001600160a01b039092168252519081900360200190f35b6100956101a9565b610095600480360360208110156100cf57600080fd5b50356101b8565b6100de6101df565b60408051918252519081900360200190f35b6101166004803603602081101561010657600080fd5b50356001600160a01b03166101e5565b005b6100956004803603604081101561012e57600080fd5b506001600160a01b038135811691602001351661025d565b6100956004803603604081101561015c57600080fd5b506001600160a01b038135811691602001351661058e565b6101166004803603602081101561018a57600080fd5b50356001600160a01b03166105b4565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101c557fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6001546001600160a01b0316331461023b576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102c6576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b0316106102e95783856102ec565b84845b90925090506001600160a01b03821661034c576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103bf576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016103d19061062c565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156104a457600080fd5b505af11580156104b8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461060a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6123d88061063a8339019056fe60806040526001600c5534801561001557600080fd5b5060405146908060526123868239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612281806101056000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610534578063d505accf1461053c578063dd62ed3e1461058d578063fff6cae9146105bb576101a9565b8063ba9a7a56146104fe578063bc25cf7714610506578063c45a01551461052c576101a9565b80637ecebe00116100d35780637ecebe001461046557806389afcb441461048b57806395d89b41146104ca578063a9059cbb146104d2576101a9565b80636a6278421461041157806370a08231146104375780637464fc3d1461045d576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb578063485cc955146103d35780635909c0d5146104015780635a3d549314610409576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105c3565b005b610244610afe565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b24565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610b4e565b604080519115158252519081900360200190f35b610339610b65565b604080516001600160a01b039092168252519081900360200190f35b61035d610b74565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610b7a565b61035d610c14565b6103b5610c38565b6040805160ff9092168252519081900360200190f35b61035d610c3d565b61023a600480360360408110156103e957600080fd5b506001600160a01b0381358116916020013516610c43565b61035d610cc7565b61035d610ccd565b61035d6004803603602081101561042757600080fd5b50356001600160a01b0316610cd3565b61035d6004803603602081101561044d57600080fd5b50356001600160a01b0316610fd3565b61035d610fe5565b61035d6004803603602081101561047b57600080fd5b50356001600160a01b0316610feb565b6104b1600480360360208110156104a157600080fd5b50356001600160a01b0316610ffd565b6040805192835260208301919091528051918290030190f35b6102446113a3565b61031d600480360360408110156104e857600080fd5b506001600160a01b0381351690602001356113c5565b61035d6113d2565b61023a6004803603602081101561051c57600080fd5b50356001600160a01b03166113d8565b610339611543565b610339611552565b61023a600480360360e081101561055257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611561565b61035d600480360360408110156105a357600080fd5b506001600160a01b0381358116916020013516611763565b61023a611780565b600c5460011461060e576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55841515806106215750600084115b61065c5760405162461bcd60e51b81526004018080602001828103825260258152602001806121936025913960400191505060405180910390fd5b600080610667610b24565b5091509150816001600160701b03168710801561068c5750806001600160701b031686105b6106c75760405162461bcd60e51b81526004018080602001828103825260218152602001806121dc6021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107055750806001600160a01b0316896001600160a01b031614155b61074e576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561075f5761075f828a8d6118e2565b891561077057610770818a8c6118e2565b861561082b57886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561087157600080fd5b505afa158015610885573d6000803e3d6000fd5b505050506040513d602081101561089b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d602081101561091157600080fd5b5051925060009150506001600160701b0385168a90038311610934576000610943565b89856001600160701b03160383035b9050600089856001600160701b031603831161096057600061096f565b89856001600160701b03160383035b905060008211806109805750600081115b6109bb5760405162461bcd60e51b81526004018080602001828103825260248152602001806121b86024913960400191505060405180910390fd5b60006109ef6109d184600363ffffffff611a7c16565b6109e3876103e863ffffffff611a7c16565b9063ffffffff611adf16565b90506000610a076109d184600363ffffffff611a7c16565b9050610a38620f4240610a2c6001600160701b038b8116908b1663ffffffff611a7c16565b9063ffffffff611a7c16565b610a48838363ffffffff611a7c16565b1015610a8a576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610a9884848888611b2f565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b5b338484611cf4565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610bff576001600160a01b0384166000908152600260209081526040808320338452909152902054610bda908363ffffffff611adf16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c0a848484611d56565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610c99576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d20576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610d30610b24565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d6020811015610e2b57600080fd5b505190506000610e4a836001600160701b03871663ffffffff611adf16565b90506000610e67836001600160701b03871663ffffffff611adf16565b90506000610e758787611e10565b60005490915080610eb257610e9e6103e86109e3610e99878763ffffffff611a7c16565b611f6e565b9850610ead60006103e8611fc0565b610f01565b610efe6001600160701b038916610ecf868463ffffffff611a7c16565b81610ed657fe5b046001600160701b038916610ef1868563ffffffff611a7c16565b81610ef857fe5b04612056565b98505b60008911610f405760405162461bcd60e51b81526004018080602001828103825260288152602001806122256028913960400191505060405180910390fd5b610f4a8a8a611fc0565b610f5686868a8a611b2f565b8115610f8657600854610f82906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461104b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c8190558061105b610b24565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d60208110156110e157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b5051306000908152600160205260408120549192506111788888611e10565b6000549091508061118f848763ffffffff611a7c16565b8161119657fe5b049a50806111aa848663ffffffff611a7c16565b816111b157fe5b04995060008b1180156111c4575060008a115b6111ff5760405162461bcd60e51b81526004018080602001828103825260288152602001806121fd6028913960400191505060405180910390fd5b611209308461206e565b611214878d8d6118e2565b61121f868d8c6118e2565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d602081101561128f57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d602081101561130557600080fd5b5051935061131585858b8b611b2f565b811561134557600854611341906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610b5b338484611d56565b6103e881565b600c54600114611423576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926114d292859287926114cd926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d60208110156114bf57600080fd5b50519063ffffffff611adf16565b6118e2565b600854604080516370a0823160e01b8152306004820152905161153992849287926114cd92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156115ab576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156116c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116fc5750886001600160a01b0316816001600160a01b0316145b61174d576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611758898989611cf4565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146117cb576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516118db926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561181c57600080fd5b505afa158015611830573d6000803e3d6000fd5b505050506040513d602081101561184657600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d60208110156118bd57600080fd5b50516008546001600160701b0380821691600160701b900416611b2f565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061198f5780518252601f199092019160209182019101611970565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119f1576040519150601f19603f3d011682016040523d82523d6000602084013e6119f6565b606091505b5091509150818015611a24575080511580611a245750808060200190516020811015611a2157600080fd5b50515b611a75576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000811580611a9757505080820282828281611a9457fe5b04145b610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5f576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611b4d57506001600160701b038311155b611b94576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611bc457506001600160701b03841615155b8015611bd857506001600160701b03831615155b15611c49578063ffffffff16611c0685611bf18661210c565b6001600160e01b03169063ffffffff61211e16565b600980546001600160e01b03929092169290920201905563ffffffff8116611c3184611bf18761210c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611d7f908263ffffffff611adf16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611db4908263ffffffff61214316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6157600080fd5b505afa158015611e75573d6000803e3d6000fd5b505050506040513d6020811015611e8b57600080fd5b5051600b546001600160a01b038216158015945091925090611f5a578015611f55576000611ece610e996001600160701b0388811690881663ffffffff611a7c16565b90506000611edb83611f6e565b905080821115611f52576000611f09611efa848463ffffffff611adf16565b6000549063ffffffff611a7c16565b90506000611f2e83611f2286600563ffffffff611a7c16565b9063ffffffff61214316565b90506000818381611f3b57fe5b0490508015611f4e57611f4e8782611fc0565b5050505b50505b611f66565b8015611f66576000600b555b505092915050565b60006003821115611fb1575080600160028204015b81811015611fab57809150600281828581611f9a57fe5b040181611fa357fe5b049050611f83565b50611fbb565b8115611fbb575060015b919050565b600054611fd3908263ffffffff61214316565b60009081556001600160a01b038316815260016020526040902054611ffe908263ffffffff61214316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120655781612067565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612097908263ffffffff611adf16565b6001600160a01b038316600090815260016020526040812091909155546120c4908263ffffffff611adf16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161213b57fe5b049392505050565b80820182811015610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820638f5859e2d13a4d6e30f23791999723e12d64db5ce6e50da776c45f9e9dbfa764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820804a0c44925bc736edf54b6ef0ad7874fbd835ced2d45da25bb742789744f21564736f6c63430005100032
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa*\xA98\x03\x80a*\xA9\x839\x81\x81\x01`@R` \x81\x10\x15a\x003W`\0\x80\xFD[PQ`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91\x90\x91\x17\x90Ua*F\x80a\0c`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x88W`\x005`\xE0\x1C\x80c\xA2\xE7J\xF6\x11a\0[W\x80c\xA2\xE7J\xF6\x14a\0\xF0W\x80c\xC9\xC6S\x96\x14a\x01\x18W\x80c\xE6\xA49\x05\x14a\x01FW\x80c\xF4i\x01\xED\x14a\x01tWa\0\x88V[\x80c\x01~~X\x14a\0\x8DW\x80c\tKt\x15\x14a\0\xB1W\x80c\x1E=\xD1\x8B\x14a\0\xB9W\x80cWO+\xA3\x14a\0\xD6W[`\0\x80\xFD[a\0\x95a\x01\x9AV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\0\x95a\x01\xA9V[a\0\x95`\x04\x806\x03` \x81\x10\x15a\0\xCFW`\0\x80\xFD[P5a\x01\xB8V[a\0\xDEa\x01\xDFV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x01\x16`\x04\x806\x03` \x81\x10\x15a\x01\x06W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x01\xE5V[\0[a\0\x95`\x04\x806\x03`@\x81\x10\x15a\x01.W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x02]V[a\0\x95`\x04\x806\x03`@\x81\x10\x15a\x01\\W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x05\x8EV[a\x01\x16`\x04\x806\x03` \x81\x10\x15a\x01\x8AW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x05\xB4V[`\0T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x01T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03\x81\x81T\x81\x10a\x01\xC5W\xFE[`\0\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x81V[`\x03T\x90V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02;W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\0\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\xC6W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FUniswapV2: IDENTICAL_ADDRESSES\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0\x80\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x10a\x02\xE9W\x83\x85a\x02\xECV[\x84\x84[\x90\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x82\x16a\x03LW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FUniswapV2: ZERO_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x85\x85\x16\x84R\x90\x91R\x90 T\x16\x15a\x03\xBFW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuUniswapV2: PAIR_EXISTS`P\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[```@Q\x80` \x01a\x03\xD1\x90a\x06,V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP\x90P`\0\x83\x83`@Q` \x01\x80\x83`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16``\x1B\x81R`\x14\x01\x82`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16``\x1B\x81R`\x14\x01\x92PPP`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x80\x82Q` \x84\x01`\0\xF5`@\x80QcH\\\xC9U`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R\x86\x81\x16`$\x83\x01R\x91Q\x92\x97P\x90\x87\x16\x91cH\\\xC9U\x91`D\x80\x82\x01\x92`\0\x92\x90\x91\x90\x82\x90\x03\x01\x81\x83\x87\x80;\x15\x80\x15a\x04\xA4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB8W=`\0\x80>=`\0\xFD[PPPP`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\0\x81\x81R`\x02` \x81\x81R`@\x80\x84 \x89\x87\x16\x80\x86R\x90\x83R\x81\x85 \x80T\x97\x8D\x16`\x01`\x01`\xA0\x1B\x03\x19\x98\x89\x16\x81\x17\x90\x91U\x93\x83R\x81\x85 \x86\x86R\x83R\x81\x85 \x80T\x88\x16\x85\x17\x90U`\x03\x80T`\x01\x81\x01\x82U\x95\x81\x90R\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x90\x95\x01\x80T\x90\x97\x16\x84\x17\x90\x96U\x92T\x83Q\x92\x83R\x90\x82\x01R\x81Q\x7F\r6H\xBD\x0Fk\xA8\x014\xA3;\xA9'Z\xC5\x85\xD9\xD3\x15\xF0\xAD\x83U\xCD\xDE\xFD\xE3\x1A\xFA(\xD0\xE9\x92\x91\x81\x90\x03\x90\x91\x01\x90\xA3PPPP\x92\x91PPV[`\x02` \x90\x81R`\0\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06\nW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[a#\xD8\x80a\x06:\x839\x01\x90V\xFE`\x80`@R`\x01`\x0CU4\x80\x15a\0\x15W`\0\x80\xFD[P`@QF\x90\x80`Ra#\x86\x829`@\x80Q\x91\x82\x90\x03`R\x01\x82 \x82\x82\x01\x82R`\n\x83Ri*\xB74\xB9\xBB\xB0\xB8\x10+\x19`\xB1\x1B` \x93\x84\x01R\x81Q\x80\x83\x01\x83R`\x01\x81R`1`\xF8\x1B\x90\x84\x01R\x81Q\x80\x84\x01\x91\x90\x91R\x7F\xBF\xCC\x8E\xF9\x8F\xFB\xF7\xB6\xC3\xFE\xC7\xBFQ\x85\xB5f\xB9\x86>5\xA9\xD8:\xCDI\xADh$\xB5\x96\x978\x81\x83\x01R\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6``\x82\x01R`\x80\x81\x01\x94\x90\x94R0`\xA0\x80\x86\x01\x91\x90\x91R\x81Q\x80\x86\x03\x90\x91\x01\x81R`\xC0\x90\x94\x01\x90R\x82Q\x92\x01\x91\x90\x91 `\x03UP`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90Ua\"\x81\x80a\x01\x05`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x01\xA9W`\x005`\xE0\x1C\x80cjbxB\x11a\0\xF9W\x80c\xBA\x9AzV\x11a\0\x97W\x80c\xD2\x12 \xA7\x11a\0qW\x80c\xD2\x12 \xA7\x14a\x054W\x80c\xD5\x05\xAC\xCF\x14a\x05<W\x80c\xDDb\xED>\x14a\x05\x8DW\x80c\xFF\xF6\xCA\xE9\x14a\x05\xBBWa\x01\xA9V[\x80c\xBA\x9AzV\x14a\x04\xFEW\x80c\xBC%\xCFw\x14a\x05\x06W\x80c\xC4Z\x01U\x14a\x05,Wa\x01\xA9V[\x80c~\xCE\xBE\0\x11a\0\xD3W\x80c~\xCE\xBE\0\x14a\x04eW\x80c\x89\xAF\xCBD\x14a\x04\x8BW\x80c\x95\xD8\x9BA\x14a\x04\xCAW\x80c\xA9\x05\x9C\xBB\x14a\x04\xD2Wa\x01\xA9V[\x80cjbxB\x14a\x04\x11W\x80cp\xA0\x821\x14a\x047W\x80ctd\xFC=\x14a\x04]Wa\x01\xA9V[\x80c#\xB8r\xDD\x11a\x01fW\x80c6D\xE5\x15\x11a\x01@W\x80c6D\xE5\x15\x14a\x03\xCBW\x80cH\\\xC9U\x14a\x03\xD3W\x80cY\t\xC0\xD5\x14a\x04\x01W\x80cZ=T\x93\x14a\x04\tWa\x01\xA9V[\x80c#\xB8r\xDD\x14a\x03oW\x80c0\xAD\xF8\x1F\x14a\x03\xA5W\x80c1<\xE5g\x14a\x03\xADWa\x01\xA9V[\x80c\x02,\r\x9F\x14a\x01\xAEW\x80c\x06\xFD\xDE\x03\x14a\x02<W\x80c\t\x02\xF1\xAC\x14a\x02\xB9W\x80c\t^\xA7\xB3\x14a\x02\xF1W\x80c\r\xFE\x16\x81\x14a\x031W\x80c\x18\x16\r\xDD\x14a\x03UW[`\0\x80\xFD[a\x02:`\x04\x806\x03`\x80\x81\x10\x15a\x01\xC4W`\0\x80\xFD[\x815\x91` \x81\x015\x91`\x01`\x01`\xA0\x1B\x03`@\x83\x015\x16\x91\x90\x81\x01\x90`\x80\x81\x01``\x82\x015d\x01\0\0\0\0\x81\x11\x15a\x01\xFBW`\0\x80\xFD[\x82\x01\x83` \x82\x01\x11\x15a\x02\rW`\0\x80\xFD[\x805\x90` \x01\x91\x84`\x01\x83\x02\x84\x01\x11d\x01\0\0\0\0\x83\x11\x17\x15a\x02/W`\0\x80\xFD[P\x90\x92P\x90Pa\x05\xC3V[\0[a\x02Da\n\xFEV[`@\x80Q` \x80\x82R\x83Q\x81\x83\x01R\x83Q\x91\x92\x83\x92\x90\x83\x01\x91\x85\x01\x90\x80\x83\x83`\0[\x83\x81\x10\x15a\x02~W\x81\x81\x01Q\x83\x82\x01R` \x01a\x02fV[PPPP\x90P\x90\x81\x01\x90`\x1F\x16\x80\x15a\x02\xABW\x80\x82\x03\x80Q`\x01\x83` \x03a\x01\0\n\x03\x19\x16\x81R` \x01\x91P[P\x92PPP`@Q\x80\x91\x03\x90\xF3[a\x02\xC1a\x0B$V[`@\x80Q`\x01`\x01`p\x1B\x03\x94\x85\x16\x81R\x92\x90\x93\x16` \x83\x01Rc\xFF\xFF\xFF\xFF\x16\x81\x83\x01R\x90Q\x90\x81\x90\x03``\x01\x90\xF3[a\x03\x1D`\x04\x806\x03`@\x81\x10\x15a\x03\x07W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x16\x90` \x015a\x0BNV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x039a\x0BeV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03]a\x0BtV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03\x1D`\x04\x806\x03``\x81\x10\x15a\x03\x85W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x81\x015\x90\x91\x16\x90`@\x015a\x0BzV[a\x03]a\x0C\x14V[a\x03\xB5a\x0C8V[`@\x80Q`\xFF\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03]a\x0C=V[a\x02:`\x04\x806\x03`@\x81\x10\x15a\x03\xE9W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x0CCV[a\x03]a\x0C\xC7V[a\x03]a\x0C\xCDV[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04'W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0C\xD3V[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04MW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xD3V[a\x03]a\x0F\xE5V[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04{W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xEBV[a\x04\xB1`\x04\x806\x03` \x81\x10\x15a\x04\xA1W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xFDV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x80Q\x91\x82\x90\x03\x01\x90\xF3[a\x02Da\x13\xA3V[a\x03\x1D`\x04\x806\x03`@\x81\x10\x15a\x04\xE8W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x16\x90` \x015a\x13\xC5V[a\x03]a\x13\xD2V[a\x02:`\x04\x806\x03` \x81\x10\x15a\x05\x1CW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x13\xD8V[a\x039a\x15CV[a\x039a\x15RV[a\x02:`\x04\x806\x03`\xE0\x81\x10\x15a\x05RW`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x81\x015\x90\x91\x16\x90`@\x81\x015\x90``\x81\x015\x90`\xFF`\x80\x82\x015\x16\x90`\xA0\x81\x015\x90`\xC0\x015a\x15aV[a\x03]`\x04\x806\x03`@\x81\x10\x15a\x05\xA3W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x17cV[a\x02:a\x17\x80V[`\x0CT`\x01\x14a\x06\x0EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU\x84\x15\x15\x80a\x06!WP`\0\x84\x11[a\x06\\W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`%\x81R` \x01\x80a!\x93`%\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\0\x80a\x06ga\x0B$V[P\x91P\x91P\x81`\x01`\x01`p\x1B\x03\x16\x87\x10\x80\x15a\x06\x8CWP\x80`\x01`\x01`p\x1B\x03\x16\x86\x10[a\x06\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`!\x81R` \x01\x80a!\xDC`!\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x06T`\x07T`\0\x91\x82\x91`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x91\x90\x81\x16\x90\x89\x16\x82\x14\x80\x15\x90a\x07\x05WP\x80`\x01`\x01`\xA0\x1B\x03\x16\x89`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[a\x07NW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtUniswapV2: INVALID_TO`X\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x8A\x15a\x07_Wa\x07_\x82\x8A\x8Da\x18\xE2V[\x89\x15a\x07pWa\x07p\x81\x8A\x8Ca\x18\xE2V[\x86\x15a\x08+W\x88`\x01`\x01`\xA0\x1B\x03\x16c\x10\xD1\xE8\\3\x8D\x8D\x8C\x8C`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01\x80\x86`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x80` \x01\x82\x81\x03\x82R\x84\x84\x82\x81\x81R` \x01\x92P\x80\x82\x847`\0\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPP\x96PPPPPPP`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x08\x12W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x08&W=`\0\x80>=`\0\xFD[PPPP[`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x08qW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x08\x85W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x08\x9BW`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x95P`\x01`\x01`\xA0\x1B\x03\x83\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x08\xE7W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x08\xFBW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\t\x11W`\0\x80\xFD[PQ\x92P`\0\x91PP`\x01`\x01`p\x1B\x03\x85\x16\x8A\x90\x03\x83\x11a\t4W`\0a\tCV[\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x03[\x90P`\0\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x11a\t`W`\0a\toV[\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x03[\x90P`\0\x82\x11\x80a\t\x80WP`\0\x81\x11[a\t\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`$\x81R` \x01\x80a!\xB8`$\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\0a\t\xEFa\t\xD1\x84`\x03c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\t\xE3\x87a\x03\xE8c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\n\x07a\t\xD1\x84`\x03c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90Pa\n8b\x0FB@a\n,`\x01`\x01`p\x1B\x03\x8B\x81\x16\x90\x8B\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\nH\x83\x83c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x10\x15a\n\x8AW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkUniswapV2: K`\xA0\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PPa\n\x98\x84\x84\x88\x88a\x1B/V[`@\x80Q\x83\x81R` \x81\x01\x83\x90R\x80\x82\x01\x8D\x90R``\x81\x01\x8C\x90R\x90Q`\x01`\x01`\xA0\x1B\x03\x8B\x16\x913\x91\x7F\xD7\x8A\xD9_\xA4l\x99KeQ\xD0\xDA\x85\xFC'_\xE6\x13\xCE7e\x7F\xB8\xD5\xE3\xD10\x84\x01Y\xD8\"\x91\x81\x90\x03`\x80\x01\x90\xA3PP`\x01`\x0CUPPPPPPPPPV[`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i*\xB74\xB9\xBB\xB0\xB8\x10+\x19`\xB1\x1B\x81RP\x81V[`\x08T`\x01`\x01`p\x1B\x03\x80\x82\x16\x92`\x01`p\x1B\x83\x04\x90\x91\x16\x91`\x01`\xE0\x1B\x90\x04c\xFF\xFF\xFF\xFF\x16\x90V[`\0a\x0B[3\x84\x84a\x1C\xF4V[P`\x01[\x92\x91PPV[`\x06T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\0T\x81V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x81 T`\0\x19\x14a\x0B\xFFW`\x01`\x01`\xA0\x1B\x03\x84\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 Ta\x0B\xDA\x90\x83c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 U[a\x0C\n\x84\x84\x84a\x1DVV[P`\x01\x93\x92PPPV[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x81V[`\x12\x81V[`\x03T\x81V[`\x05T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0C\x99W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x07\x80T\x92\x90\x93\x16\x91\x16\x17\x90UV[`\tT\x81V[`\nT\x81V[`\0`\x0CT`\x01\x14a\r W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0C\x81\x90U\x80a\r0a\x0B$V[P`\x06T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x93\x95P\x91\x93P`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\r\x84W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\r\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\r\xAEW`\0\x80\xFD[PQ`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x92\x93P`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x0E\x01W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x0E\x15W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x0E+W`\0\x80\xFD[PQ\x90P`\0a\x0EJ\x83`\x01`\x01`p\x1B\x03\x87\x16c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\x0Eg\x83`\x01`\x01`p\x1B\x03\x87\x16c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\x0Eu\x87\x87a\x1E\x10V[`\0T\x90\x91P\x80a\x0E\xB2Wa\x0E\x9Ea\x03\xE8a\t\xE3a\x0E\x99\x87\x87c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\x1FnV[\x98Pa\x0E\xAD`\0a\x03\xE8a\x1F\xC0V[a\x0F\x01V[a\x0E\xFE`\x01`\x01`p\x1B\x03\x89\x16a\x0E\xCF\x86\x84c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x0E\xD6W\xFE[\x04`\x01`\x01`p\x1B\x03\x89\x16a\x0E\xF1\x86\x85c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x0E\xF8W\xFE[\x04a VV[\x98P[`\0\x89\x11a\x0F@W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`(\x81R` \x01\x80a\"%`(\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[a\x0FJ\x8A\x8Aa\x1F\xC0V[a\x0FV\x86\x86\x8A\x8Aa\x1B/V[\x81\x15a\x0F\x86W`\x08Ta\x0F\x82\x90`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[`\x0BU[`@\x80Q\x85\x81R` \x81\x01\x85\x90R\x81Q3\x92\x7FL \x9B_\xC8\xADPu\x8F\x13\xE2\xE1\x08\x8B\xA5jV\r\xFFi\n\x1Co\xEF&9OL\x03\x82\x1CO\x92\x82\x90\x03\x01\x90\xA2PP`\x01`\x0CUP\x94\x96\x95PPPPPPV[`\x01` R`\0\x90\x81R`@\x90 T\x81V[`\x0BT\x81V[`\x04` R`\0\x90\x81R`@\x90 T\x81V[`\0\x80`\x0CT`\x01\x14a\x10KW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0C\x81\x90U\x80a\x10[a\x0B$V[P`\x06T`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x94\x96P\x92\x94P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93\x91\x16\x91`\0\x91\x84\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x10\xB7W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x10\xCBW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x10\xE1W`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x85\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x11/W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x11CW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x11YW`\0\x80\xFD[PQ0`\0\x90\x81R`\x01` R`@\x81 T\x91\x92Pa\x11x\x88\x88a\x1E\x10V[`\0T\x90\x91P\x80a\x11\x8F\x84\x87c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x11\x96W\xFE[\x04\x9AP\x80a\x11\xAA\x84\x86c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x11\xB1W\xFE[\x04\x99P`\0\x8B\x11\x80\x15a\x11\xC4WP`\0\x8A\x11[a\x11\xFFW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`(\x81R` \x01\x80a!\xFD`(\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[a\x12\t0\x84a nV[a\x12\x14\x87\x8D\x8Da\x18\xE2V[a\x12\x1F\x86\x8D\x8Ca\x18\xE2V[`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x89\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x12eW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x12yW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x12\x8FW`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x96P`\x01`\x01`\xA0\x1B\x03\x88\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x12\xDBW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x12\xEFW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x13\x05W`\0\x80\xFD[PQ\x93Pa\x13\x15\x85\x85\x8B\x8Ba\x1B/V[\x81\x15a\x13EW`\x08Ta\x13A\x90`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[`\x0BU[`@\x80Q\x8C\x81R` \x81\x01\x8C\x90R\x81Q`\x01`\x01`\xA0\x1B\x03\x8F\x16\x923\x92\x7F\xDC\xCDA/\x0B\x12R\x81\x9C\xB1\xFD3\x0B\x93\"L\xA4&\x12\x89+\xB3\xF4\xF7\x89\x97nm\x81\x93d\x96\x92\x90\x81\x90\x03\x90\x91\x01\x90\xA3PPPPPPPPP`\x01`\x0C\x81\x90UP\x91P\x91V[`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01e*\xA7$\x96\xAB\x19`\xD1\x1B\x81RP\x81V[`\0a\x0B[3\x84\x84a\x1DVV[a\x03\xE8\x81V[`\x0CT`\x01\x14a\x14#W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU`\x06T`\x07T`\x08T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x94\x90\x93\x16\x92a\x14\xD2\x92\x85\x92\x87\x92a\x14\xCD\x92`\x01`\x01`p\x1B\x03\x16\x91\x85\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x14\x95W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x14\xA9W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x14\xBFW`\0\x80\xFD[PQ\x90c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[a\x18\xE2V[`\x08T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Qa\x159\x92\x84\x92\x87\x92a\x14\xCD\x92`\x01`p\x1B\x90\x04`\x01`\x01`p\x1B\x03\x16\x91`\x01`\x01`\xA0\x1B\x03\x86\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x14\x95W`\0\x80\xFD[PP`\x01`\x0CUPV[`\x05T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x07T`\x01`\x01`\xA0\x1B\x03\x16\x81V[B\x84\x10\x15a\x15\xABW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x11V\x14\x12T\x91Q`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x03T`\x01`\x01`\xA0\x1B\x03\x80\x89\x16`\0\x81\x81R`\x04` \x90\x81R`@\x80\x83 \x80T`\x01\x80\x82\x01\x90\x92U\x82Q\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x81\x86\x01R\x80\x84\x01\x96\x90\x96R\x95\x8D\x16``\x86\x01R`\x80\x85\x01\x8C\x90R`\xA0\x85\x01\x95\x90\x95R`\xC0\x80\x85\x01\x8B\x90R\x81Q\x80\x86\x03\x90\x91\x01\x81R`\xE0\x85\x01\x82R\x80Q\x90\x83\x01 a\x19\x01`\xF0\x1Ba\x01\0\x86\x01Ra\x01\x02\x85\x01\x96\x90\x96Ra\x01\"\x80\x85\x01\x96\x90\x96R\x80Q\x80\x85\x03\x90\x96\x01\x86Ra\x01B\x84\x01\x80\x82R\x86Q\x96\x83\x01\x96\x90\x96 \x95\x83\x90Ra\x01b\x84\x01\x80\x82R\x86\x90R`\xFF\x89\x16a\x01\x82\x85\x01Ra\x01\xA2\x84\x01\x88\x90Ra\x01\xC2\x84\x01\x87\x90RQ\x91\x93\x92a\x01\xE2\x80\x82\x01\x93`\x1F\x19\x81\x01\x92\x81\x90\x03\x90\x91\x01\x90\x85Z\xFA\x15\x80\x15a\x16\xC6W=`\0\x80>=`\0\xFD[PP`@Q`\x1F\x19\x01Q\x91PP`\x01`\x01`\xA0\x1B\x03\x81\x16\x15\x80\x15\x90a\x16\xFCWP\x88`\x01`\x01`\xA0\x1B\x03\x16\x81`\x01`\x01`\xA0\x1B\x03\x16\x14[a\x17MW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FUniswapV2: INVALID_SIGNATURE\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x17X\x89\x89\x89a\x1C\xF4V[PPPPPPPPPV[`\x02` \x90\x81R`\0\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[`\x0CT`\x01\x14a\x17\xCBW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU`\x06T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Qa\x18\xDB\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x18\x1CW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x180W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x18FW`\0\x80\xFD[PQ`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x18\x93W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x18\xA7W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x18\xBDW`\0\x80\xFD[PQ`\x08T`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16a\x1B/V[`\x01`\x0CUV[`@\x80Q\x80\x82\x01\x82R`\x19\x81R\x7Ftransfer(address,uint256)\0\0\0\0\0\0\0` \x91\x82\x01R\x81Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R`D\x80\x83\x01\x86\x90R\x84Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x84R\x91\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x81R\x92Q\x81Q`\0\x94``\x94\x89\x16\x93\x92\x91\x82\x91\x90\x80\x83\x83[` \x83\x10a\x19\x8FW\x80Q\x82R`\x1F\x19\x90\x92\x01\x91` \x91\x82\x01\x91\x01a\x19pV[`\x01\x83` \x03a\x01\0\n\x03\x80\x19\x82Q\x16\x81\x84Q\x16\x80\x82\x17\x85RPPPPPP\x90P\x01\x91PP`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x19\xF1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x19\xF6V[``\x91P[P\x91P\x91P\x81\x80\x15a\x1A$WP\x80Q\x15\x80a\x1A$WP\x80\x80` \x01\x90Q` \x81\x10\x15a\x1A!W`\0\x80\xFD[PQ[a\x1AuW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FUniswapV2: TRANSFER_FAILED\0\0\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PPPPPV[`\0\x81\x15\x80a\x1A\x97WPP\x80\x82\x02\x82\x82\x82\x81a\x1A\x94W\xFE[\x04\x14[a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-mul-overflow``\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x80\x82\x03\x82\x81\x11\x15a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rtds-math-sub-underflow`X\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01`\x01`p\x1B\x03\x84\x11\x80\x15\x90a\x1BMWP`\x01`\x01`p\x1B\x03\x83\x11\x15[a\x1B\x94W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01RrUniswapV2: OVERFLOW`h\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x08Tc\xFF\xFF\xFF\xFFB\x81\x16\x91`\x01`\xE0\x1B\x90\x04\x81\x16\x82\x03\x90\x81\x16\x15\x80\x15\x90a\x1B\xC4WP`\x01`\x01`p\x1B\x03\x84\x16\x15\x15[\x80\x15a\x1B\xD8WP`\x01`\x01`p\x1B\x03\x83\x16\x15\x15[\x15a\x1CIW\x80c\xFF\xFF\xFF\xFF\x16a\x1C\x06\x85a\x1B\xF1\x86a!\x0CV[`\x01`\x01`\xE0\x1B\x03\x16\x90c\xFF\xFF\xFF\xFFa!\x1E\x16V[`\t\x80T`\x01`\x01`\xE0\x1B\x03\x92\x90\x92\x16\x92\x90\x92\x02\x01\x90Uc\xFF\xFF\xFF\xFF\x81\x16a\x1C1\x84a\x1B\xF1\x87a!\x0CV[`\n\x80T`\x01`\x01`\xE0\x1B\x03\x92\x90\x92\x16\x92\x90\x92\x02\x01\x90U[`\x08\x80Tm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`p\x1B\x03\x88\x81\x16\x91\x90\x91\x17m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`p\x1B\x19\x16`\x01`p\x1B\x88\x83\x16\x81\x02\x91\x90\x91\x17`\x01`\x01`\xE0\x1B\x03\x16`\x01`\xE0\x1Bc\xFF\xFF\xFF\xFF\x87\x16\x02\x17\x92\x83\x90U`@\x80Q\x84\x84\x16\x81R\x91\x90\x93\x04\x90\x91\x16` \x82\x01R\x81Q\x7F\x1CA\x1E\x9A\x96\xE0q$\x1C/!\xF7rk\x17\xAE\x89\xE3\xCA\xB4\xC7\x8B\xE5\x0E\x06+\x03\xA9\xFF\xFB\xBA\xD1\x92\x91\x81\x90\x03\x90\x91\x01\x90\xA1PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\0\x81\x81R`\x02` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x81Q\x85\x81R\x91Q\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x92\x81\x90\x03\x90\x91\x01\x90\xA3PPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x01` R`@\x90 Ta\x1D\x7F\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R`\x01` R`@\x80\x82 \x93\x90\x93U\x90\x84\x16\x81R Ta\x1D\xB4\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\0\x81\x81R`\x01` \x90\x81R`@\x91\x82\x90 \x94\x90\x94U\x80Q\x85\x81R\x90Q\x91\x93\x92\x87\x16\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x92\x91\x82\x90\x03\x01\x90\xA3PPPV[`\0\x80`\x05`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x01~~X`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1EaW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x1EuW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x1E\x8BW`\0\x80\xFD[PQ`\x0BT`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x80\x15\x94P\x91\x92P\x90a\x1FZW\x80\x15a\x1FUW`\0a\x1E\xCEa\x0E\x99`\x01`\x01`p\x1B\x03\x88\x81\x16\x90\x88\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90P`\0a\x1E\xDB\x83a\x1FnV[\x90P\x80\x82\x11\x15a\x1FRW`\0a\x1F\ta\x1E\xFA\x84\x84c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\0T\x90c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90P`\0a\x1F.\x83a\x1F\"\x86`\x05c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa!C\x16V[\x90P`\0\x81\x83\x81a\x1F;W\xFE[\x04\x90P\x80\x15a\x1FNWa\x1FN\x87\x82a\x1F\xC0V[PPP[PP[a\x1FfV[\x80\x15a\x1FfW`\0`\x0BU[PP\x92\x91PPV[`\0`\x03\x82\x11\x15a\x1F\xB1WP\x80`\x01`\x02\x82\x04\x01[\x81\x81\x10\x15a\x1F\xABW\x80\x91P`\x02\x81\x82\x85\x81a\x1F\x9AW\xFE[\x04\x01\x81a\x1F\xA3W\xFE[\x04\x90Pa\x1F\x83V[Pa\x1F\xBBV[\x81\x15a\x1F\xBBWP`\x01[\x91\x90PV[`\0Ta\x1F\xD3\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\0\x90\x81U`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`\x01` R`@\x90 Ta\x1F\xFE\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x90\x94U\x83Q\x85\x81R\x93Q\x92\x93\x91\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x92\x81\x90\x03\x90\x91\x01\x90\xA3PPV[`\0\x81\x83\x10a eW\x81a gV[\x82[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R`\x01` R`@\x90 Ta \x97\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x01` R`@\x81 \x91\x90\x91UTa \xC4\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\0\x90\x81U`@\x80Q\x83\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x85\x16\x91\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x90\x81\x90\x03` \x01\x90\xA3PPV[`\x01`\x01`p\x1B\x03\x16`\x01`p\x1B\x02\x90V[`\0`\x01`\x01`p\x1B\x03\x82\x16`\x01`\x01`\xE0\x1B\x03\x84\x16\x81a!;W\xFE[\x04\x93\x92PPPV[\x80\x82\x01\x82\x81\x10\x15a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-add-overflow``\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD\xFEUniswapV2: INSUFFICIENT_OUTPUT_AMOUNTUniswapV2: INSUFFICIENT_INPUT_AMOUNTUniswapV2: INSUFFICIENT_LIQUIDITYUniswapV2: INSUFFICIENT_LIQUIDITY_BURNEDUniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\xA2ebzzr1X c\x8FXY\xE2\xD1:Mn0\xF27\x91\x99\x97#\xE1-d\xDB\\\xE6\xE5\r\xA7v\xC4_\x9E\x9D\xBF\xA7dsolcC\0\x05\x10\x002EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\xA2ebzzr1X \x80J\x0CD\x92[\xC76\xED\xF5Kn\xF0\xADxt\xFB\xD85\xCE\xD2\xD4]\xA2[\xB7Bx\x97D\xF2\x15dsolcC\0\x05\x10\x002",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af6146100f0578063c9c6539614610118578063e6a4390514610146578063f46901ed1461017457610088565b8063017e7e581461008d578063094b7415146100b15780631e3dd18b146100b9578063574f2ba3146100d6575b600080fd5b61009561019a565b604080516001600160a01b039092168252519081900360200190f35b6100956101a9565b610095600480360360208110156100cf57600080fd5b50356101b8565b6100de6101df565b60408051918252519081900360200190f35b6101166004803603602081101561010657600080fd5b50356001600160a01b03166101e5565b005b6100956004803603604081101561012e57600080fd5b506001600160a01b038135811691602001351661025d565b6100956004803603604081101561015c57600080fd5b506001600160a01b038135811691602001351661058e565b6101166004803603602081101561018a57600080fd5b50356001600160a01b03166105b4565b6000546001600160a01b031681565b6001546001600160a01b031681565b600381815481106101c557fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6001546001600160a01b0316331461023b576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102c6576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b0316106102e95783856102ec565b84845b90925090506001600160a01b03821661034c576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103bf576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016103d19061062c565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156104a457600080fd5b505af11580156104b8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461060a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6123d88061063a8339019056fe60806040526001600c5534801561001557600080fd5b5060405146908060526123868239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612281806101056000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610534578063d505accf1461053c578063dd62ed3e1461058d578063fff6cae9146105bb576101a9565b8063ba9a7a56146104fe578063bc25cf7714610506578063c45a01551461052c576101a9565b80637ecebe00116100d35780637ecebe001461046557806389afcb441461048b57806395d89b41146104ca578063a9059cbb146104d2576101a9565b80636a6278421461041157806370a08231146104375780637464fc3d1461045d576101a9565b806323b872dd116101665780633644e515116101405780633644e515146103cb578063485cc955146103d35780635909c0d5146104015780635a3d549314610409576101a9565b806323b872dd1461036f57806330adf81f146103a5578063313ce567146103ad576101a9565b8063022c0d9f146101ae57806306fdde031461023c5780630902f1ac146102b9578063095ea7b3146102f15780630dfe16811461033157806318160ddd14610355575b600080fd5b61023a600480360360808110156101c457600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184600183028401116401000000008311171561022f57600080fd5b5090925090506105c3565b005b610244610afe565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027e578181015183820152602001610266565b50505050905090810190601f1680156102ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c1610b24565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61031d6004803603604081101561030757600080fd5b506001600160a01b038135169060200135610b4e565b604080519115158252519081900360200190f35b610339610b65565b604080516001600160a01b039092168252519081900360200190f35b61035d610b74565b60408051918252519081900360200190f35b61031d6004803603606081101561038557600080fd5b506001600160a01b03813581169160208101359091169060400135610b7a565b61035d610c14565b6103b5610c38565b6040805160ff9092168252519081900360200190f35b61035d610c3d565b61023a600480360360408110156103e957600080fd5b506001600160a01b0381358116916020013516610c43565b61035d610cc7565b61035d610ccd565b61035d6004803603602081101561042757600080fd5b50356001600160a01b0316610cd3565b61035d6004803603602081101561044d57600080fd5b50356001600160a01b0316610fd3565b61035d610fe5565b61035d6004803603602081101561047b57600080fd5b50356001600160a01b0316610feb565b6104b1600480360360208110156104a157600080fd5b50356001600160a01b0316610ffd565b6040805192835260208301919091528051918290030190f35b6102446113a3565b61031d600480360360408110156104e857600080fd5b506001600160a01b0381351690602001356113c5565b61035d6113d2565b61023a6004803603602081101561051c57600080fd5b50356001600160a01b03166113d8565b610339611543565b610339611552565b61023a600480360360e081101561055257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611561565b61035d600480360360408110156105a357600080fd5b506001600160a01b0381358116916020013516611763565b61023a611780565b600c5460011461060e576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55841515806106215750600084115b61065c5760405162461bcd60e51b81526004018080602001828103825260258152602001806121936025913960400191505060405180910390fd5b600080610667610b24565b5091509150816001600160701b03168710801561068c5750806001600160701b031686105b6106c75760405162461bcd60e51b81526004018080602001828103825260218152602001806121dc6021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107055750806001600160a01b0316896001600160a01b031614155b61074e576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561075f5761075f828a8d6118e2565b891561077057610770818a8c6118e2565b861561082b57886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561087157600080fd5b505afa158015610885573d6000803e3d6000fd5b505050506040513d602081101561089b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d602081101561091157600080fd5b5051925060009150506001600160701b0385168a90038311610934576000610943565b89856001600160701b03160383035b9050600089856001600160701b031603831161096057600061096f565b89856001600160701b03160383035b905060008211806109805750600081115b6109bb5760405162461bcd60e51b81526004018080602001828103825260248152602001806121b86024913960400191505060405180910390fd5b60006109ef6109d184600363ffffffff611a7c16565b6109e3876103e863ffffffff611a7c16565b9063ffffffff611adf16565b90506000610a076109d184600363ffffffff611a7c16565b9050610a38620f4240610a2c6001600160701b038b8116908b1663ffffffff611a7c16565b9063ffffffff611a7c16565b610a48838363ffffffff611a7c16565b1015610a8a576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610a9884848888611b2f565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b5b338484611cf4565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610bff576001600160a01b0384166000908152600260209081526040808320338452909152902054610bda908363ffffffff611adf16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c0a848484611d56565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610c99576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d20576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610d30610b24565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d6020811015610e2b57600080fd5b505190506000610e4a836001600160701b03871663ffffffff611adf16565b90506000610e67836001600160701b03871663ffffffff611adf16565b90506000610e758787611e10565b60005490915080610eb257610e9e6103e86109e3610e99878763ffffffff611a7c16565b611f6e565b9850610ead60006103e8611fc0565b610f01565b610efe6001600160701b038916610ecf868463ffffffff611a7c16565b81610ed657fe5b046001600160701b038916610ef1868563ffffffff611a7c16565b81610ef857fe5b04612056565b98505b60008911610f405760405162461bcd60e51b81526004018080602001828103825260288152602001806122256028913960400191505060405180910390fd5b610f4a8a8a611fc0565b610f5686868a8a611b2f565b8115610f8657600854610f82906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461104b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c8190558061105b610b24565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d60208110156110e157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b5051306000908152600160205260408120549192506111788888611e10565b6000549091508061118f848763ffffffff611a7c16565b8161119657fe5b049a50806111aa848663ffffffff611a7c16565b816111b157fe5b04995060008b1180156111c4575060008a115b6111ff5760405162461bcd60e51b81526004018080602001828103825260288152602001806121fd6028913960400191505060405180910390fd5b611209308461206e565b611214878d8d6118e2565b61121f868d8c6118e2565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d602081101561128f57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d602081101561130557600080fd5b5051935061131585858b8b611b2f565b811561134557600854611341906001600160701b0380821691600160701b90041663ffffffff611a7c16565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610b5b338484611d56565b6103e881565b600c54600114611423576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926114d292859287926114cd926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d60208110156114bf57600080fd5b50519063ffffffff611adf16565b6118e2565b600854604080516370a0823160e01b8152306004820152905161153992849287926114cd92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561149557600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156115ab576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156116c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116fc5750886001600160a01b0316816001600160a01b0316145b61174d576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611758898989611cf4565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146117cb576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516118db926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561181c57600080fd5b505afa158015611830573d6000803e3d6000fd5b505050506040513d602081101561184657600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d60208110156118bd57600080fd5b50516008546001600160701b0380821691600160701b900416611b2f565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061198f5780518252601f199092019160209182019101611970565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119f1576040519150601f19603f3d011682016040523d82523d6000602084013e6119f6565b606091505b5091509150818015611a24575080511580611a245750808060200190516020811015611a2157600080fd5b50515b611a75576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000811580611a9757505080820282828281611a9457fe5b04145b610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b5f576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611b4d57506001600160701b038311155b611b94576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611bc457506001600160701b03841615155b8015611bd857506001600160701b03831615155b15611c49578063ffffffff16611c0685611bf18661210c565b6001600160e01b03169063ffffffff61211e16565b600980546001600160e01b03929092169290920201905563ffffffff8116611c3184611bf18761210c565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611d7f908263ffffffff611adf16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611db4908263ffffffff61214316565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6157600080fd5b505afa158015611e75573d6000803e3d6000fd5b505050506040513d6020811015611e8b57600080fd5b5051600b546001600160a01b038216158015945091925090611f5a578015611f55576000611ece610e996001600160701b0388811690881663ffffffff611a7c16565b90506000611edb83611f6e565b905080821115611f52576000611f09611efa848463ffffffff611adf16565b6000549063ffffffff611a7c16565b90506000611f2e83611f2286600563ffffffff611a7c16565b9063ffffffff61214316565b90506000818381611f3b57fe5b0490508015611f4e57611f4e8782611fc0565b5050505b50505b611f66565b8015611f66576000600b555b505092915050565b60006003821115611fb1575080600160028204015b81811015611fab57809150600281828581611f9a57fe5b040181611fa357fe5b049050611f83565b50611fbb565b8115611fbb575060015b919050565b600054611fd3908263ffffffff61214316565b60009081556001600160a01b038316815260016020526040902054611ffe908263ffffffff61214316565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120655781612067565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612097908263ffffffff611adf16565b6001600160a01b038316600090815260016020526040812091909155546120c4908263ffffffff611adf16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161213b57fe5b049392505050565b80820182811015610b5f576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820638f5859e2d13a4d6e30f23791999723e12d64db5ce6e50da776c45f9e9dbfa764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820804a0c44925bc736edf54b6ef0ad7874fbd835ced2d45da25bb742789744f21564736f6c63430005100032
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x88W`\x005`\xE0\x1C\x80c\xA2\xE7J\xF6\x11a\0[W\x80c\xA2\xE7J\xF6\x14a\0\xF0W\x80c\xC9\xC6S\x96\x14a\x01\x18W\x80c\xE6\xA49\x05\x14a\x01FW\x80c\xF4i\x01\xED\x14a\x01tWa\0\x88V[\x80c\x01~~X\x14a\0\x8DW\x80c\tKt\x15\x14a\0\xB1W\x80c\x1E=\xD1\x8B\x14a\0\xB9W\x80cWO+\xA3\x14a\0\xD6W[`\0\x80\xFD[a\0\x95a\x01\x9AV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\0\x95a\x01\xA9V[a\0\x95`\x04\x806\x03` \x81\x10\x15a\0\xCFW`\0\x80\xFD[P5a\x01\xB8V[a\0\xDEa\x01\xDFV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x01\x16`\x04\x806\x03` \x81\x10\x15a\x01\x06W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x01\xE5V[\0[a\0\x95`\x04\x806\x03`@\x81\x10\x15a\x01.W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x02]V[a\0\x95`\x04\x806\x03`@\x81\x10\x15a\x01\\W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x05\x8EV[a\x01\x16`\x04\x806\x03` \x81\x10\x15a\x01\x8AW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x05\xB4V[`\0T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x01T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03\x81\x81T\x81\x10a\x01\xC5W\xFE[`\0\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x81V[`\x03T\x90V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x02;W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\0\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x14\x15a\x02\xC6W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1E`$\x82\x01R\x7FUniswapV2: IDENTICAL_ADDRESSES\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0\x80\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x10a\x02\xE9W\x83\x85a\x02\xECV[\x84\x84[\x90\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x82\x16a\x03LW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FUniswapV2: ZERO_ADDRESS\0\0\0\0\0\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x85\x85\x16\x84R\x90\x91R\x90 T\x16\x15a\x03\xBFW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuUniswapV2: PAIR_EXISTS`P\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[```@Q\x80` \x01a\x03\xD1\x90a\x06,V[` \x82\x01\x81\x03\x82R`\x1F\x19`\x1F\x82\x01\x16`@RP\x90P`\0\x83\x83`@Q` \x01\x80\x83`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16``\x1B\x81R`\x14\x01\x82`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16``\x1B\x81R`\x14\x01\x92PPP`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x80\x82Q` \x84\x01`\0\xF5`@\x80QcH\\\xC9U`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x81\x16`\x04\x83\x01R\x86\x81\x16`$\x83\x01R\x91Q\x92\x97P\x90\x87\x16\x91cH\\\xC9U\x91`D\x80\x82\x01\x92`\0\x92\x90\x91\x90\x82\x90\x03\x01\x81\x83\x87\x80;\x15\x80\x15a\x04\xA4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\xB8W=`\0\x80>=`\0\xFD[PPPP`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\0\x81\x81R`\x02` \x81\x81R`@\x80\x84 \x89\x87\x16\x80\x86R\x90\x83R\x81\x85 \x80T\x97\x8D\x16`\x01`\x01`\xA0\x1B\x03\x19\x98\x89\x16\x81\x17\x90\x91U\x93\x83R\x81\x85 \x86\x86R\x83R\x81\x85 \x80T\x88\x16\x85\x17\x90U`\x03\x80T`\x01\x81\x01\x82U\x95\x81\x90R\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x90\x95\x01\x80T\x90\x97\x16\x84\x17\x90\x96U\x92T\x83Q\x92\x83R\x90\x82\x01R\x81Q\x7F\r6H\xBD\x0Fk\xA8\x014\xA3;\xA9'Z\xC5\x85\xD9\xD3\x15\xF0\xAD\x83U\xCD\xDE\xFD\xE3\x1A\xFA(\xD0\xE9\x92\x91\x81\x90\x03\x90\x91\x01\x90\xA3PPPP\x92\x91PPV[`\x02` \x90\x81R`\0\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x01T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06\nW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[a#\xD8\x80a\x06:\x839\x01\x90V\xFE`\x80`@R`\x01`\x0CU4\x80\x15a\0\x15W`\0\x80\xFD[P`@QF\x90\x80`Ra#\x86\x829`@\x80Q\x91\x82\x90\x03`R\x01\x82 \x82\x82\x01\x82R`\n\x83Ri*\xB74\xB9\xBB\xB0\xB8\x10+\x19`\xB1\x1B` \x93\x84\x01R\x81Q\x80\x83\x01\x83R`\x01\x81R`1`\xF8\x1B\x90\x84\x01R\x81Q\x80\x84\x01\x91\x90\x91R\x7F\xBF\xCC\x8E\xF9\x8F\xFB\xF7\xB6\xC3\xFE\xC7\xBFQ\x85\xB5f\xB9\x86>5\xA9\xD8:\xCDI\xADh$\xB5\x96\x978\x81\x83\x01R\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6``\x82\x01R`\x80\x81\x01\x94\x90\x94R0`\xA0\x80\x86\x01\x91\x90\x91R\x81Q\x80\x86\x03\x90\x91\x01\x81R`\xC0\x90\x94\x01\x90R\x82Q\x92\x01\x91\x90\x91 `\x03UP`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90Ua\"\x81\x80a\x01\x05`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x01\xA9W`\x005`\xE0\x1C\x80cjbxB\x11a\0\xF9W\x80c\xBA\x9AzV\x11a\0\x97W\x80c\xD2\x12 \xA7\x11a\0qW\x80c\xD2\x12 \xA7\x14a\x054W\x80c\xD5\x05\xAC\xCF\x14a\x05<W\x80c\xDDb\xED>\x14a\x05\x8DW\x80c\xFF\xF6\xCA\xE9\x14a\x05\xBBWa\x01\xA9V[\x80c\xBA\x9AzV\x14a\x04\xFEW\x80c\xBC%\xCFw\x14a\x05\x06W\x80c\xC4Z\x01U\x14a\x05,Wa\x01\xA9V[\x80c~\xCE\xBE\0\x11a\0\xD3W\x80c~\xCE\xBE\0\x14a\x04eW\x80c\x89\xAF\xCBD\x14a\x04\x8BW\x80c\x95\xD8\x9BA\x14a\x04\xCAW\x80c\xA9\x05\x9C\xBB\x14a\x04\xD2Wa\x01\xA9V[\x80cjbxB\x14a\x04\x11W\x80cp\xA0\x821\x14a\x047W\x80ctd\xFC=\x14a\x04]Wa\x01\xA9V[\x80c#\xB8r\xDD\x11a\x01fW\x80c6D\xE5\x15\x11a\x01@W\x80c6D\xE5\x15\x14a\x03\xCBW\x80cH\\\xC9U\x14a\x03\xD3W\x80cY\t\xC0\xD5\x14a\x04\x01W\x80cZ=T\x93\x14a\x04\tWa\x01\xA9V[\x80c#\xB8r\xDD\x14a\x03oW\x80c0\xAD\xF8\x1F\x14a\x03\xA5W\x80c1<\xE5g\x14a\x03\xADWa\x01\xA9V[\x80c\x02,\r\x9F\x14a\x01\xAEW\x80c\x06\xFD\xDE\x03\x14a\x02<W\x80c\t\x02\xF1\xAC\x14a\x02\xB9W\x80c\t^\xA7\xB3\x14a\x02\xF1W\x80c\r\xFE\x16\x81\x14a\x031W\x80c\x18\x16\r\xDD\x14a\x03UW[`\0\x80\xFD[a\x02:`\x04\x806\x03`\x80\x81\x10\x15a\x01\xC4W`\0\x80\xFD[\x815\x91` \x81\x015\x91`\x01`\x01`\xA0\x1B\x03`@\x83\x015\x16\x91\x90\x81\x01\x90`\x80\x81\x01``\x82\x015d\x01\0\0\0\0\x81\x11\x15a\x01\xFBW`\0\x80\xFD[\x82\x01\x83` \x82\x01\x11\x15a\x02\rW`\0\x80\xFD[\x805\x90` \x01\x91\x84`\x01\x83\x02\x84\x01\x11d\x01\0\0\0\0\x83\x11\x17\x15a\x02/W`\0\x80\xFD[P\x90\x92P\x90Pa\x05\xC3V[\0[a\x02Da\n\xFEV[`@\x80Q` \x80\x82R\x83Q\x81\x83\x01R\x83Q\x91\x92\x83\x92\x90\x83\x01\x91\x85\x01\x90\x80\x83\x83`\0[\x83\x81\x10\x15a\x02~W\x81\x81\x01Q\x83\x82\x01R` \x01a\x02fV[PPPP\x90P\x90\x81\x01\x90`\x1F\x16\x80\x15a\x02\xABW\x80\x82\x03\x80Q`\x01\x83` \x03a\x01\0\n\x03\x19\x16\x81R` \x01\x91P[P\x92PPP`@Q\x80\x91\x03\x90\xF3[a\x02\xC1a\x0B$V[`@\x80Q`\x01`\x01`p\x1B\x03\x94\x85\x16\x81R\x92\x90\x93\x16` \x83\x01Rc\xFF\xFF\xFF\xFF\x16\x81\x83\x01R\x90Q\x90\x81\x90\x03``\x01\x90\xF3[a\x03\x1D`\x04\x806\x03`@\x81\x10\x15a\x03\x07W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x16\x90` \x015a\x0BNV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x039a\x0BeV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03]a\x0BtV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03\x1D`\x04\x806\x03``\x81\x10\x15a\x03\x85W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x81\x015\x90\x91\x16\x90`@\x015a\x0BzV[a\x03]a\x0C\x14V[a\x03\xB5a\x0C8V[`@\x80Q`\xFF\x90\x92\x16\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[a\x03]a\x0C=V[a\x02:`\x04\x806\x03`@\x81\x10\x15a\x03\xE9W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x0CCV[a\x03]a\x0C\xC7V[a\x03]a\x0C\xCDV[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04'W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0C\xD3V[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04MW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xD3V[a\x03]a\x0F\xE5V[a\x03]`\x04\x806\x03` \x81\x10\x15a\x04{W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xEBV[a\x04\xB1`\x04\x806\x03` \x81\x10\x15a\x04\xA1W`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x0F\xFDV[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x80Q\x91\x82\x90\x03\x01\x90\xF3[a\x02Da\x13\xA3V[a\x03\x1D`\x04\x806\x03`@\x81\x10\x15a\x04\xE8W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x16\x90` \x015a\x13\xC5V[a\x03]a\x13\xD2V[a\x02:`\x04\x806\x03` \x81\x10\x15a\x05\x1CW`\0\x80\xFD[P5`\x01`\x01`\xA0\x1B\x03\x16a\x13\xD8V[a\x039a\x15CV[a\x039a\x15RV[a\x02:`\x04\x806\x03`\xE0\x81\x10\x15a\x05RW`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x81\x015\x90\x91\x16\x90`@\x81\x015\x90``\x81\x015\x90`\xFF`\x80\x82\x015\x16\x90`\xA0\x81\x015\x90`\xC0\x015a\x15aV[a\x03]`\x04\x806\x03`@\x81\x10\x15a\x05\xA3W`\0\x80\xFD[P`\x01`\x01`\xA0\x1B\x03\x815\x81\x16\x91` \x015\x16a\x17cV[a\x02:a\x17\x80V[`\x0CT`\x01\x14a\x06\x0EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU\x84\x15\x15\x80a\x06!WP`\0\x84\x11[a\x06\\W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`%\x81R` \x01\x80a!\x93`%\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\0\x80a\x06ga\x0B$V[P\x91P\x91P\x81`\x01`\x01`p\x1B\x03\x16\x87\x10\x80\x15a\x06\x8CWP\x80`\x01`\x01`p\x1B\x03\x16\x86\x10[a\x06\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`!\x81R` \x01\x80a!\xDC`!\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x06T`\x07T`\0\x91\x82\x91`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x91\x90\x81\x16\x90\x89\x16\x82\x14\x80\x15\x90a\x07\x05WP\x80`\x01`\x01`\xA0\x1B\x03\x16\x89`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[a\x07NW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtUniswapV2: INVALID_TO`X\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x8A\x15a\x07_Wa\x07_\x82\x8A\x8Da\x18\xE2V[\x89\x15a\x07pWa\x07p\x81\x8A\x8Ca\x18\xE2V[\x86\x15a\x08+W\x88`\x01`\x01`\xA0\x1B\x03\x16c\x10\xD1\xE8\\3\x8D\x8D\x8C\x8C`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01\x80\x86`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x80` \x01\x82\x81\x03\x82R\x84\x84\x82\x81\x81R` \x01\x92P\x80\x82\x847`\0\x81\x84\x01R`\x1F\x19`\x1F\x82\x01\x16\x90P\x80\x83\x01\x92PPP\x96PPPPPPP`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x08\x12W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x08&W=`\0\x80>=`\0\xFD[PPPP[`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x08qW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x08\x85W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x08\x9BW`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x95P`\x01`\x01`\xA0\x1B\x03\x83\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x08\xE7W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x08\xFBW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\t\x11W`\0\x80\xFD[PQ\x92P`\0\x91PP`\x01`\x01`p\x1B\x03\x85\x16\x8A\x90\x03\x83\x11a\t4W`\0a\tCV[\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x03[\x90P`\0\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x11a\t`W`\0a\toV[\x89\x85`\x01`\x01`p\x1B\x03\x16\x03\x83\x03[\x90P`\0\x82\x11\x80a\t\x80WP`\0\x81\x11[a\t\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`$\x81R` \x01\x80a!\xB8`$\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\0a\t\xEFa\t\xD1\x84`\x03c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\t\xE3\x87a\x03\xE8c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\n\x07a\t\xD1\x84`\x03c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90Pa\n8b\x0FB@a\n,`\x01`\x01`p\x1B\x03\x8B\x81\x16\x90\x8B\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\nH\x83\x83c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x10\x15a\n\x8AW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkUniswapV2: K`\xA0\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PPa\n\x98\x84\x84\x88\x88a\x1B/V[`@\x80Q\x83\x81R` \x81\x01\x83\x90R\x80\x82\x01\x8D\x90R``\x81\x01\x8C\x90R\x90Q`\x01`\x01`\xA0\x1B\x03\x8B\x16\x913\x91\x7F\xD7\x8A\xD9_\xA4l\x99KeQ\xD0\xDA\x85\xFC'_\xE6\x13\xCE7e\x7F\xB8\xD5\xE3\xD10\x84\x01Y\xD8\"\x91\x81\x90\x03`\x80\x01\x90\xA3PP`\x01`\x0CUPPPPPPPPPV[`@Q\x80`@\x01`@R\x80`\n\x81R` \x01i*\xB74\xB9\xBB\xB0\xB8\x10+\x19`\xB1\x1B\x81RP\x81V[`\x08T`\x01`\x01`p\x1B\x03\x80\x82\x16\x92`\x01`p\x1B\x83\x04\x90\x91\x16\x91`\x01`\xE0\x1B\x90\x04c\xFF\xFF\xFF\xFF\x16\x90V[`\0a\x0B[3\x84\x84a\x1C\xF4V[P`\x01[\x92\x91PPV[`\x06T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\0T\x81V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x81 T`\0\x19\x14a\x0B\xFFW`\x01`\x01`\xA0\x1B\x03\x84\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 Ta\x0B\xDA\x90\x83c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x85\x16`\0\x90\x81R`\x02` \x90\x81R`@\x80\x83 3\x84R\x90\x91R\x90 U[a\x0C\n\x84\x84\x84a\x1DVV[P`\x01\x93\x92PPPV[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x81V[`\x12\x81V[`\x03T\x81V[`\x05T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0C\x99W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs*\xB74\xB9\xBB\xB0\xB8+\x19\x1D\x10#'\xA9!$\xA2\"\"\xA7`a\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x06\x80T`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x07\x80T\x92\x90\x93\x16\x91\x16\x17\x90UV[`\tT\x81V[`\nT\x81V[`\0`\x0CT`\x01\x14a\r W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0C\x81\x90U\x80a\r0a\x0B$V[P`\x06T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x93\x95P\x91\x93P`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\r\x84W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\r\x98W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\r\xAEW`\0\x80\xFD[PQ`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x92\x93P`\0\x92`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x0E\x01W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x0E\x15W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x0E+W`\0\x80\xFD[PQ\x90P`\0a\x0EJ\x83`\x01`\x01`p\x1B\x03\x87\x16c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\x0Eg\x83`\x01`\x01`p\x1B\x03\x87\x16c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[\x90P`\0a\x0Eu\x87\x87a\x1E\x10V[`\0T\x90\x91P\x80a\x0E\xB2Wa\x0E\x9Ea\x03\xE8a\t\xE3a\x0E\x99\x87\x87c\xFF\xFF\xFF\xFFa\x1A|\x16V[a\x1FnV[\x98Pa\x0E\xAD`\0a\x03\xE8a\x1F\xC0V[a\x0F\x01V[a\x0E\xFE`\x01`\x01`p\x1B\x03\x89\x16a\x0E\xCF\x86\x84c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x0E\xD6W\xFE[\x04`\x01`\x01`p\x1B\x03\x89\x16a\x0E\xF1\x86\x85c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x0E\xF8W\xFE[\x04a VV[\x98P[`\0\x89\x11a\x0F@W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`(\x81R` \x01\x80a\"%`(\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[a\x0FJ\x8A\x8Aa\x1F\xC0V[a\x0FV\x86\x86\x8A\x8Aa\x1B/V[\x81\x15a\x0F\x86W`\x08Ta\x0F\x82\x90`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[`\x0BU[`@\x80Q\x85\x81R` \x81\x01\x85\x90R\x81Q3\x92\x7FL \x9B_\xC8\xADPu\x8F\x13\xE2\xE1\x08\x8B\xA5jV\r\xFFi\n\x1Co\xEF&9OL\x03\x82\x1CO\x92\x82\x90\x03\x01\x90\xA2PP`\x01`\x0CUP\x94\x96\x95PPPPPPV[`\x01` R`\0\x90\x81R`@\x90 T\x81V[`\x0BT\x81V[`\x04` R`\0\x90\x81R`@\x90 T\x81V[`\0\x80`\x0CT`\x01\x14a\x10KW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0C\x81\x90U\x80a\x10[a\x0B$V[P`\x06T`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x94\x96P\x92\x94P`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x93\x91\x16\x91`\0\x91\x84\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x10\xB7W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x10\xCBW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x10\xE1W`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x92P`\0\x91`\x01`\x01`\xA0\x1B\x03\x85\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x11/W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x11CW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x11YW`\0\x80\xFD[PQ0`\0\x90\x81R`\x01` R`@\x81 T\x91\x92Pa\x11x\x88\x88a\x1E\x10V[`\0T\x90\x91P\x80a\x11\x8F\x84\x87c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x11\x96W\xFE[\x04\x9AP\x80a\x11\xAA\x84\x86c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x81a\x11\xB1W\xFE[\x04\x99P`\0\x8B\x11\x80\x15a\x11\xC4WP`\0\x8A\x11[a\x11\xFFW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`(\x81R` \x01\x80a!\xFD`(\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[a\x12\t0\x84a nV[a\x12\x14\x87\x8D\x8Da\x18\xE2V[a\x12\x1F\x86\x8D\x8Ca\x18\xE2V[`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x89\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x12eW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x12yW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x12\x8FW`\0\x80\xFD[PQ`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q\x91\x96P`\x01`\x01`\xA0\x1B\x03\x88\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x12\xDBW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x12\xEFW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x13\x05W`\0\x80\xFD[PQ\x93Pa\x13\x15\x85\x85\x8B\x8Ba\x1B/V[\x81\x15a\x13EW`\x08Ta\x13A\x90`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[`\x0BU[`@\x80Q\x8C\x81R` \x81\x01\x8C\x90R\x81Q`\x01`\x01`\xA0\x1B\x03\x8F\x16\x923\x92\x7F\xDC\xCDA/\x0B\x12R\x81\x9C\xB1\xFD3\x0B\x93\"L\xA4&\x12\x89+\xB3\xF4\xF7\x89\x97nm\x81\x93d\x96\x92\x90\x81\x90\x03\x90\x91\x01\x90\xA3PPPPPPPPP`\x01`\x0C\x81\x90UP\x91P\x91V[`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01e*\xA7$\x96\xAB\x19`\xD1\x1B\x81RP\x81V[`\0a\x0B[3\x84\x84a\x1DVV[a\x03\xE8\x81V[`\x0CT`\x01\x14a\x14#W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU`\x06T`\x07T`\x08T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x94\x90\x93\x16\x92a\x14\xD2\x92\x85\x92\x87\x92a\x14\xCD\x92`\x01`\x01`p\x1B\x03\x16\x91\x85\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x14\x95W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x14\xA9W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x14\xBFW`\0\x80\xFD[PQ\x90c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[a\x18\xE2V[`\x08T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Qa\x159\x92\x84\x92\x87\x92a\x14\xCD\x92`\x01`p\x1B\x90\x04`\x01`\x01`p\x1B\x03\x16\x91`\x01`\x01`\xA0\x1B\x03\x86\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x14\x95W`\0\x80\xFD[PP`\x01`\x0CUPV[`\x05T`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x07T`\x01`\x01`\xA0\x1B\x03\x16\x81V[B\x84\x10\x15a\x15\xABW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x11V\x14\x12T\x91Q`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x03T`\x01`\x01`\xA0\x1B\x03\x80\x89\x16`\0\x81\x81R`\x04` \x90\x81R`@\x80\x83 \x80T`\x01\x80\x82\x01\x90\x92U\x82Q\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x81\x86\x01R\x80\x84\x01\x96\x90\x96R\x95\x8D\x16``\x86\x01R`\x80\x85\x01\x8C\x90R`\xA0\x85\x01\x95\x90\x95R`\xC0\x80\x85\x01\x8B\x90R\x81Q\x80\x86\x03\x90\x91\x01\x81R`\xE0\x85\x01\x82R\x80Q\x90\x83\x01 a\x19\x01`\xF0\x1Ba\x01\0\x86\x01Ra\x01\x02\x85\x01\x96\x90\x96Ra\x01\"\x80\x85\x01\x96\x90\x96R\x80Q\x80\x85\x03\x90\x96\x01\x86Ra\x01B\x84\x01\x80\x82R\x86Q\x96\x83\x01\x96\x90\x96 \x95\x83\x90Ra\x01b\x84\x01\x80\x82R\x86\x90R`\xFF\x89\x16a\x01\x82\x85\x01Ra\x01\xA2\x84\x01\x88\x90Ra\x01\xC2\x84\x01\x87\x90RQ\x91\x93\x92a\x01\xE2\x80\x82\x01\x93`\x1F\x19\x81\x01\x92\x81\x90\x03\x90\x91\x01\x90\x85Z\xFA\x15\x80\x15a\x16\xC6W=`\0\x80>=`\0\xFD[PP`@Q`\x1F\x19\x01Q\x91PP`\x01`\x01`\xA0\x1B\x03\x81\x16\x15\x80\x15\x90a\x16\xFCWP\x88`\x01`\x01`\xA0\x1B\x03\x16\x81`\x01`\x01`\xA0\x1B\x03\x16\x14[a\x17MW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FUniswapV2: INVALID_SIGNATURE\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x17X\x89\x89\x89a\x1C\xF4V[PPPPPPPPPV[`\x02` \x90\x81R`\0\x92\x83R`@\x80\x84 \x90\x91R\x90\x82R\x90 T\x81V[`\x0CT`\x01\x14a\x17\xCBW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x11`$\x82\x01Rp\x15[\x9A\\\xDD\xD8\\\x15\x8C\x8E\x88\x13\x13\xD0\xD2\xD1Q`z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\0`\x0CU`\x06T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Qa\x18\xDB\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cp\xA0\x821\x91`$\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x18\x1CW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x180W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x18FW`\0\x80\xFD[PQ`\x07T`@\x80Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x90Q`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x91cp\xA0\x821\x91`$\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86\x80;\x15\x80\x15a\x18\x93W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x18\xA7W=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x18\xBDW`\0\x80\xFD[PQ`\x08T`\x01`\x01`p\x1B\x03\x80\x82\x16\x91`\x01`p\x1B\x90\x04\x16a\x1B/V[`\x01`\x0CUV[`@\x80Q\x80\x82\x01\x82R`\x19\x81R\x7Ftransfer(address,uint256)\0\0\0\0\0\0\0` \x91\x82\x01R\x81Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R`D\x80\x83\x01\x86\x90R\x84Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x84R\x91\x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x81R\x92Q\x81Q`\0\x94``\x94\x89\x16\x93\x92\x91\x82\x91\x90\x80\x83\x83[` \x83\x10a\x19\x8FW\x80Q\x82R`\x1F\x19\x90\x92\x01\x91` \x91\x82\x01\x91\x01a\x19pV[`\x01\x83` \x03a\x01\0\n\x03\x80\x19\x82Q\x16\x81\x84Q\x16\x80\x82\x17\x85RPPPPPP\x90P\x01\x91PP`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x19\xF1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x19\xF6V[``\x91P[P\x91P\x91P\x81\x80\x15a\x1A$WP\x80Q\x15\x80a\x1A$WP\x80\x80` \x01\x90Q` \x81\x10\x15a\x1A!W`\0\x80\xFD[PQ[a\x1AuW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FUniswapV2: TRANSFER_FAILED\0\0\0\0\0\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PPPPPV[`\0\x81\x15\x80a\x1A\x97WPP\x80\x82\x02\x82\x82\x82\x81a\x1A\x94W\xFE[\x04\x14[a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-mul-overflow``\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x80\x82\x03\x82\x81\x11\x15a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rtds-math-sub-underflow`X\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x01`\x01`p\x1B\x03\x84\x11\x80\x15\x90a\x1BMWP`\x01`\x01`p\x1B\x03\x83\x11\x15[a\x1B\x94W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01RrUniswapV2: OVERFLOW`h\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[`\x08Tc\xFF\xFF\xFF\xFFB\x81\x16\x91`\x01`\xE0\x1B\x90\x04\x81\x16\x82\x03\x90\x81\x16\x15\x80\x15\x90a\x1B\xC4WP`\x01`\x01`p\x1B\x03\x84\x16\x15\x15[\x80\x15a\x1B\xD8WP`\x01`\x01`p\x1B\x03\x83\x16\x15\x15[\x15a\x1CIW\x80c\xFF\xFF\xFF\xFF\x16a\x1C\x06\x85a\x1B\xF1\x86a!\x0CV[`\x01`\x01`\xE0\x1B\x03\x16\x90c\xFF\xFF\xFF\xFFa!\x1E\x16V[`\t\x80T`\x01`\x01`\xE0\x1B\x03\x92\x90\x92\x16\x92\x90\x92\x02\x01\x90Uc\xFF\xFF\xFF\xFF\x81\x16a\x1C1\x84a\x1B\xF1\x87a!\x0CV[`\n\x80T`\x01`\x01`\xE0\x1B\x03\x92\x90\x92\x16\x92\x90\x92\x02\x01\x90U[`\x08\x80Tm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`\x01`\x01`p\x1B\x03\x88\x81\x16\x91\x90\x91\x17m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`p\x1B\x19\x16`\x01`p\x1B\x88\x83\x16\x81\x02\x91\x90\x91\x17`\x01`\x01`\xE0\x1B\x03\x16`\x01`\xE0\x1Bc\xFF\xFF\xFF\xFF\x87\x16\x02\x17\x92\x83\x90U`@\x80Q\x84\x84\x16\x81R\x91\x90\x93\x04\x90\x91\x16` \x82\x01R\x81Q\x7F\x1CA\x1E\x9A\x96\xE0q$\x1C/!\xF7rk\x17\xAE\x89\xE3\xCA\xB4\xC7\x8B\xE5\x0E\x06+\x03\xA9\xFF\xFB\xBA\xD1\x92\x91\x81\x90\x03\x90\x91\x01\x90\xA1PPPPPPV[`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\0\x81\x81R`\x02` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x85\x90U\x81Q\x85\x81R\x91Q\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x92\x81\x90\x03\x90\x91\x01\x90\xA3PPPV[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x01` R`@\x90 Ta\x1D\x7F\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x80\x85\x16`\0\x90\x81R`\x01` R`@\x80\x82 \x93\x90\x93U\x90\x84\x16\x81R Ta\x1D\xB4\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\x01`\x01`\xA0\x1B\x03\x80\x84\x16`\0\x81\x81R`\x01` \x90\x81R`@\x91\x82\x90 \x94\x90\x94U\x80Q\x85\x81R\x90Q\x91\x93\x92\x87\x16\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x92\x91\x82\x90\x03\x01\x90\xA3PPPV[`\0\x80`\x05`\0\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c\x01~~X`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1EaW`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x1EuW=`\0\x80>=`\0\xFD[PPPP`@Q=` \x81\x10\x15a\x1E\x8BW`\0\x80\xFD[PQ`\x0BT`\x01`\x01`\xA0\x1B\x03\x82\x16\x15\x80\x15\x94P\x91\x92P\x90a\x1FZW\x80\x15a\x1FUW`\0a\x1E\xCEa\x0E\x99`\x01`\x01`p\x1B\x03\x88\x81\x16\x90\x88\x16c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90P`\0a\x1E\xDB\x83a\x1FnV[\x90P\x80\x82\x11\x15a\x1FRW`\0a\x1F\ta\x1E\xFA\x84\x84c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\0T\x90c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90P`\0a\x1F.\x83a\x1F\"\x86`\x05c\xFF\xFF\xFF\xFFa\x1A|\x16V[\x90c\xFF\xFF\xFF\xFFa!C\x16V[\x90P`\0\x81\x83\x81a\x1F;W\xFE[\x04\x90P\x80\x15a\x1FNWa\x1FN\x87\x82a\x1F\xC0V[PPP[PP[a\x1FfV[\x80\x15a\x1FfW`\0`\x0BU[PP\x92\x91PPV[`\0`\x03\x82\x11\x15a\x1F\xB1WP\x80`\x01`\x02\x82\x04\x01[\x81\x81\x10\x15a\x1F\xABW\x80\x91P`\x02\x81\x82\x85\x81a\x1F\x9AW\xFE[\x04\x01\x81a\x1F\xA3W\xFE[\x04\x90Pa\x1F\x83V[Pa\x1F\xBBV[\x81\x15a\x1F\xBBWP`\x01[\x91\x90PV[`\0Ta\x1F\xD3\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\0\x90\x81U`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`\x01` R`@\x90 Ta\x1F\xFE\x90\x82c\xFF\xFF\xFF\xFFa!C\x16V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x90\x94U\x83Q\x85\x81R\x93Q\x92\x93\x91\x92\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x92\x81\x90\x03\x90\x91\x01\x90\xA3PPV[`\0\x81\x83\x10a eW\x81a gV[\x82[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16`\0\x90\x81R`\x01` R`@\x90 Ta \x97\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\x01`\x01`\xA0\x1B\x03\x83\x16`\0\x90\x81R`\x01` R`@\x81 \x91\x90\x91UTa \xC4\x90\x82c\xFF\xFF\xFF\xFFa\x1A\xDF\x16V[`\0\x90\x81U`@\x80Q\x83\x81R\x90Q`\x01`\x01`\xA0\x1B\x03\x85\x16\x91\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x91\x90\x81\x90\x03` \x01\x90\xA3PPV[`\x01`\x01`p\x1B\x03\x16`\x01`p\x1B\x02\x90V[`\0`\x01`\x01`p\x1B\x03\x82\x16`\x01`\x01`\xE0\x1B\x03\x84\x16\x81a!;W\xFE[\x04\x93\x92PPPV[\x80\x82\x01\x82\x81\x10\x15a\x0B_W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rsds-math-add-overflow``\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD\xFEUniswapV2: INSUFFICIENT_OUTPUT_AMOUNTUniswapV2: INSUFFICIENT_INPUT_AMOUNTUniswapV2: INSUFFICIENT_LIQUIDITYUniswapV2: INSUFFICIENT_LIQUIDITY_BURNEDUniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\xA2ebzzr1X c\x8FXY\xE2\xD1:Mn0\xF27\x91\x99\x97#\xE1-d\xDB\\\xE6\xE5\r\xA7v\xC4_\x9E\x9D\xBF\xA7dsolcC\0\x05\x10\x002EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\xA2ebzzr1X \x80J\x0CD\x92[\xC76\xED\xF5Kn\xF0\xADxt\xFB\xD85\xCE\xD2\xD4]\xA2[\xB7Bx\x97D\xF2\x15dsolcC\0\x05\x10\x002",
    );
    /**Event with signature `PairCreated(address,address,address,uint256)` and selector `0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9`.
```solidity
event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct PairCreated {
        #[allow(missing_docs)]
        pub token0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub token1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub pair: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _3: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PairCreated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PairCreated(address,address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                13u8,
                54u8,
                72u8,
                189u8,
                15u8,
                107u8,
                168u8,
                1u8,
                52u8,
                163u8,
                59u8,
                169u8,
                39u8,
                90u8,
                197u8,
                133u8,
                217u8,
                211u8,
                21u8,
                240u8,
                173u8,
                131u8,
                85u8,
                205u8,
                222u8,
                253u8,
                227u8,
                26u8,
                250u8,
                40u8,
                208u8,
                233u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token0: topics.1,
                    token1: topics.2,
                    pair: data.0,
                    _3: data.1,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pair,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._3),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token0.clone(), self.token1.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token0,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token1,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PairCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PairCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PairCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _feeToSetter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _feeToSetter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._feeToSetter,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _feeToSetter: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._feeToSetter,
                    ),
                )
            }
        }
    };
    /**Function with signature `allPairs(uint256)` and selector `0x1e3dd18b`.
```solidity
function allPairs(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allPairsCall {
        pub _0: alloy::sol_types::private::U256,
    }
    ///Container type for the return parameters of the [`allPairs(uint256)`](allPairsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allPairsReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allPairsCall> for UnderlyingRustTuple<'_> {
                fn from(value: allPairsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allPairsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allPairsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allPairsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allPairsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allPairsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allPairsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allPairs(uint256)";
            const SELECTOR: [u8; 4] = [30u8, 61u8, 209u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allPairsLength()` and selector `0x574f2ba3`.
```solidity
function allPairsLength() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allPairsLengthCall {}
    ///Container type for the return parameters of the [`allPairsLength()`](allPairsLengthCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allPairsLengthReturn {
        pub _0: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allPairsLengthCall> for UnderlyingRustTuple<'_> {
                fn from(value: allPairsLengthCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allPairsLengthCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allPairsLengthReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allPairsLengthReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allPairsLengthReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allPairsLengthCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allPairsLengthReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allPairsLength()";
            const SELECTOR: [u8; 4] = [87u8, 79u8, 43u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createPair(address,address)` and selector `0xc9c65396`.
```solidity
function createPair(address tokenA, address tokenB) external returns (address pair);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct createPairCall {
        pub tokenA: alloy::sol_types::private::Address,
        pub tokenB: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`createPair(address,address)`](createPairCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct createPairReturn {
        pub pair: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPairCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPairCall) -> Self {
                    (value.tokenA, value.tokenB)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPairCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokenA: tuple.0,
                        tokenB: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPairReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPairReturn) -> Self {
                    (value.pair,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPairReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pair: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPairCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createPairReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPair(address,address)";
            const SELECTOR: [u8; 4] = [201u8, 198u8, 83u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenA,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenB,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `feeTo()` and selector `0x017e7e58`.
```solidity
function feeTo() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeToCall {}
    ///Container type for the return parameters of the [`feeTo()`](feeToCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeToReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeToCall> for UnderlyingRustTuple<'_> {
                fn from(value: feeToCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeToCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeToReturn> for UnderlyingRustTuple<'_> {
                fn from(value: feeToReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeToReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeToCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeToReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeTo()";
            const SELECTOR: [u8; 4] = [1u8, 126u8, 126u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `feeToSetter()` and selector `0x094b7415`.
```solidity
function feeToSetter() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeToSetterCall {}
    ///Container type for the return parameters of the [`feeToSetter()`](feeToSetterCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeToSetterReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeToSetterCall> for UnderlyingRustTuple<'_> {
                fn from(value: feeToSetterCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeToSetterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeToSetterReturn> for UnderlyingRustTuple<'_> {
                fn from(value: feeToSetterReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeToSetterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeToSetterCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeToSetterReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeToSetter()";
            const SELECTOR: [u8; 4] = [9u8, 75u8, 116u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPair(address,address)` and selector `0xe6a43905`.
```solidity
function getPair(address, address) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getPairCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getPair(address,address)`](getPairCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getPairReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPairCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPairCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPairCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPairReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPairReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPairReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPairCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPairReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPair(address,address)";
            const SELECTOR: [u8; 4] = [230u8, 164u8, 57u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setFeeTo(address)` and selector `0xf46901ed`.
```solidity
function setFeeTo(address _feeTo) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setFeeToCall {
        pub _feeTo: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setFeeTo(address)`](setFeeToCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setFeeToReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeToCall> for UnderlyingRustTuple<'_> {
                fn from(value: setFeeToCall) -> Self {
                    (value._feeTo,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFeeToCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _feeTo: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeToReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setFeeToReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFeeToReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setFeeToCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setFeeToReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setFeeTo(address)";
            const SELECTOR: [u8; 4] = [244u8, 105u8, 1u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._feeTo,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setFeeToSetter(address)` and selector `0xa2e74af6`.
```solidity
function setFeeToSetter(address _feeToSetter) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setFeeToSetterCall {
        pub _feeToSetter: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setFeeToSetter(address)`](setFeeToSetterCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setFeeToSetterReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeToSetterCall> for UnderlyingRustTuple<'_> {
                fn from(value: setFeeToSetterCall) -> Self {
                    (value._feeToSetter,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFeeToSetterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _feeToSetter: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeToSetterReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setFeeToSetterReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setFeeToSetterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setFeeToSetterCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setFeeToSetterReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setFeeToSetter(address)";
            const SELECTOR: [u8; 4] = [162u8, 231u8, 74u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._feeToSetter,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`UniswapV2Factory`](self) function calls.
    pub enum UniswapV2FactoryCalls {
        allPairs(allPairsCall),
        allPairsLength(allPairsLengthCall),
        createPair(createPairCall),
        feeTo(feeToCall),
        feeToSetter(feeToSetterCall),
        getPair(getPairCall),
        setFeeTo(setFeeToCall),
        setFeeToSetter(setFeeToSetterCall),
    }
    #[automatically_derived]
    impl UniswapV2FactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 126u8, 126u8, 88u8],
            [9u8, 75u8, 116u8, 21u8],
            [30u8, 61u8, 209u8, 139u8],
            [87u8, 79u8, 43u8, 163u8],
            [162u8, 231u8, 74u8, 246u8],
            [201u8, 198u8, 83u8, 150u8],
            [230u8, 164u8, 57u8, 5u8],
            [244u8, 105u8, 1u8, 237u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UniswapV2FactoryCalls {
        const NAME: &'static str = "UniswapV2FactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allPairs(_) => <allPairsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allPairsLength(_) => {
                    <allPairsLengthCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createPair(_) => {
                    <createPairCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::feeTo(_) => <feeToCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::feeToSetter(_) => {
                    <feeToSetterCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPair(_) => <getPairCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setFeeTo(_) => <setFeeToCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setFeeToSetter(_) => {
                    <setFeeToSetterCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<UniswapV2FactoryCalls>] = &[
                {
                    fn feeTo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <feeToCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::feeTo)
                    }
                    feeTo
                },
                {
                    fn feeToSetter(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <feeToSetterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::feeToSetter)
                    }
                    feeToSetter
                },
                {
                    fn allPairs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <allPairsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::allPairs)
                    }
                    allPairs
                },
                {
                    fn allPairsLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <allPairsLengthCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::allPairsLength)
                    }
                    allPairsLength
                },
                {
                    fn setFeeToSetter(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <setFeeToSetterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::setFeeToSetter)
                    }
                    setFeeToSetter
                },
                {
                    fn createPair(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <createPairCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::createPair)
                    }
                    createPair
                },
                {
                    fn getPair(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <getPairCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::getPair)
                    }
                    getPair
                },
                {
                    fn setFeeTo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<UniswapV2FactoryCalls> {
                        <setFeeToCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(UniswapV2FactoryCalls::setFeeTo)
                    }
                    setFeeTo
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allPairs(inner) => {
                    <allPairsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allPairsLength(inner) => {
                    <allPairsLengthCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createPair(inner) => {
                    <createPairCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::feeTo(inner) => {
                    <feeToCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::feeToSetter(inner) => {
                    <feeToSetterCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPair(inner) => {
                    <getPairCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setFeeTo(inner) => {
                    <setFeeToCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setFeeToSetter(inner) => {
                    <setFeeToSetterCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allPairs(inner) => {
                    <allPairsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allPairsLength(inner) => {
                    <allPairsLengthCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createPair(inner) => {
                    <createPairCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::feeTo(inner) => {
                    <feeToCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::feeToSetter(inner) => {
                    <feeToSetterCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPair(inner) => {
                    <getPairCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setFeeTo(inner) => {
                    <setFeeToCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setFeeToSetter(inner) => {
                    <setFeeToSetterCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`UniswapV2Factory`](self) events.
    pub enum UniswapV2FactoryEvents {
        PairCreated(PairCreated),
    }
    #[automatically_derived]
    impl UniswapV2FactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                13u8,
                54u8,
                72u8,
                189u8,
                15u8,
                107u8,
                168u8,
                1u8,
                52u8,
                163u8,
                59u8,
                169u8,
                39u8,
                90u8,
                197u8,
                133u8,
                217u8,
                211u8,
                21u8,
                240u8,
                173u8,
                131u8,
                85u8,
                205u8,
                222u8,
                253u8,
                227u8,
                26u8,
                250u8,
                40u8,
                208u8,
                233u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for UniswapV2FactoryEvents {
        const NAME: &'static str = "UniswapV2FactoryEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<PairCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PairCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PairCreated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for UniswapV2FactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PairCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PairCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`UniswapV2Factory`](self) contract instance.

See the [wrapper's documentation](`UniswapV2FactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> UniswapV2FactoryInstance<T, P, N> {
        UniswapV2FactoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _feeToSetter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<UniswapV2FactoryInstance<T, P, N>>,
    > {
        UniswapV2FactoryInstance::<T, P, N>::deploy(provider, _feeToSetter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _feeToSetter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        UniswapV2FactoryInstance::<T, P, N>::deploy_builder(provider, _feeToSetter)
    }
    /**A [`UniswapV2Factory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`UniswapV2Factory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct UniswapV2FactoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for UniswapV2FactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UniswapV2FactoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > UniswapV2FactoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`UniswapV2Factory`](self) contract instance.

See the [wrapper's documentation](`UniswapV2FactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _feeToSetter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<UniswapV2FactoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _feeToSetter);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _feeToSetter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _feeToSetter },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> UniswapV2FactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> UniswapV2FactoryInstance<T, P, N> {
            UniswapV2FactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > UniswapV2FactoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allPairs`] function.
        pub fn allPairs(
            &self,
            _0: alloy::sol_types::private::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, allPairsCall, N> {
            self.call_builder(&allPairsCall { _0 })
        }
        ///Creates a new call builder for the [`allPairsLength`] function.
        pub fn allPairsLength(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, allPairsLengthCall, N> {
            self.call_builder(&allPairsLengthCall {})
        }
        ///Creates a new call builder for the [`createPair`] function.
        pub fn createPair(
            &self,
            tokenA: alloy::sol_types::private::Address,
            tokenB: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, createPairCall, N> {
            self.call_builder(&createPairCall { tokenA, tokenB })
        }
        ///Creates a new call builder for the [`feeTo`] function.
        pub fn feeTo(&self) -> alloy_contract::SolCallBuilder<T, &P, feeToCall, N> {
            self.call_builder(&feeToCall {})
        }
        ///Creates a new call builder for the [`feeToSetter`] function.
        pub fn feeToSetter(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, feeToSetterCall, N> {
            self.call_builder(&feeToSetterCall {})
        }
        ///Creates a new call builder for the [`getPair`] function.
        pub fn getPair(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPairCall, N> {
            self.call_builder(&getPairCall { _0, _1 })
        }
        ///Creates a new call builder for the [`setFeeTo`] function.
        pub fn setFeeTo(
            &self,
            _feeTo: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setFeeToCall, N> {
            self.call_builder(&setFeeToCall { _feeTo })
        }
        ///Creates a new call builder for the [`setFeeToSetter`] function.
        pub fn setFeeToSetter(
            &self,
            _feeToSetter: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setFeeToSetterCall, N> {
            self.call_builder(&setFeeToSetterCall { _feeToSetter })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > UniswapV2FactoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`PairCreated`] event.
        pub fn PairCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PairCreated, N> {
            self.event_filter::<PairCreated>()
        }
    }
}
