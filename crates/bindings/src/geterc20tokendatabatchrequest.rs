/**

Generated by the following Solidity interface...
```solidity
interface GetERC20TokenDataBatchRequest {
    constructor(address[] tokens);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "tokens",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetERC20TokenDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50604051610ba3380380610ba38339818101604052810190610032919061077a565b6000815167ffffffffffffffff81111561004f5761004e6105d9565b5b60405190808252806020026020018201604052801561008857816020015b61007561056e565b81526020019060019003908161006d5790505b50905060005b825181101561051c5760008382815181106100ac576100ab6107c3565b5b602002602001015190506100c58161054b60201b60201c565b156100d05750610511565b6100d861056e565b81816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808373ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101bd9190610863565b60006040518083038160008787f1925050503d80600081146101fb576040519150601f19603f3d011682016040523d82523d6000602084013e610200565b606091505b5091509150818015610213575060008151115b15610239578080602001905181019061022c9190610920565b8360200181905250610242565b50505050610511565b6000808573ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102ef9190610863565b60006040518083038160008787f1925050503d806000811461032d576040519150601f19603f3d011682016040523d82523d6000602084013e610332565b606091505b509150915081156103a75760006020825103610395578180602001905181019061035c919061099f565b9050600081148061036d575060ff81115b1561037e5750505050505050610511565b80866040019060ff16908160ff16815250506103a1565b50505050505050610511565b506103b2565b505050505050610511565b6000808773ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f18160ddd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161045f9190610863565b60006040518083038160008787f1925050503d806000811461049d576040519150601f19603f3d011682016040523d82523d6000602084013e6104a2565b606091505b50915091508180156104b5575060208151145b156104dc57808060200190518101906104ce919061099f565b8760600181815250506104e9565b5050505050505050610511565b868a8a815181106104fd576104fc6107c3565b5b602002602001018190525050505050505050505b80600101905061008e565b506000816040516020016105309190610b80565b60405160208183030381529060405290506020810180590381f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b149050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610611826105c8565b810181811067ffffffffffffffff821117156106305761062f6105d9565b5b80604052505050565b60006106436105af565b905061064f8282610608565b919050565b600067ffffffffffffffff82111561066f5761066e6105d9565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b082610685565b9050919050565b6106c0816106a5565b81146106cb57600080fd5b50565b6000815190506106dd816106b7565b92915050565b60006106f66106f184610654565b610639565b9050808382526020820190506020840283018581111561071957610718610680565b5b835b81811015610742578061072e88826106ce565b84526020840193505060208101905061071b565b5050509392505050565b600082601f830112610761576107606105c3565b5b81516107718482602086016106e3565b91505092915050565b6000602082840312156107905761078f6105b9565b5b600082015167ffffffffffffffff8111156107ae576107ad6105be565b5b6107ba8482850161074c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60005b8381101561082657808201518184015260208101905061080b565b60008484015250505050565b600061083d826107f2565b61084781856107fd565b9350610857818560208601610808565b80840191505092915050565b600061086f8284610832565b915081905092915050565b600080fd5b600067ffffffffffffffff82111561089a576108996105d9565b5b6108a3826105c8565b9050602081019050919050565b60006108c36108be8461087f565b610639565b9050828152602081018484840111156108df576108de61087a565b5b6108ea848285610808565b509392505050565b600082601f830112610907576109066105c3565b5b81516109178482602086016108b0565b91505092915050565b600060208284031215610936576109356105b9565b5b600082015167ffffffffffffffff811115610954576109536105be565b5b610960848285016108f2565b91505092915050565b6000819050919050565b61097c81610969565b811461098757600080fd5b50565b60008151905061099981610973565b92915050565b6000602082840312156109b5576109b46105b9565b5b60006109c38482850161098a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a01816106a5565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610a2e82610a07565b610a388185610a12565b9350610a48818560208601610808565b610a51816105c8565b840191505092915050565b600060ff82169050919050565b610a7281610a5c565b82525050565b610a8181610969565b82525050565b6000608083016000830151610a9f60008601826109f8565b5060208301518482036020860152610ab78282610a23565b9150506040830151610acc6040860182610a69565b506060830151610adf6060860182610a78565b508091505092915050565b6000610af68383610a87565b905092915050565b6000602082019050919050565b6000610b16826109cc565b610b2081856109d7565b935083602082028501610b32856109e8565b8060005b85811015610b6e5784840389528151610b4f8582610aea565b9450610b5a83610afe565b925060208a01995050600181019050610b36565b50829750879550505050505092915050565b60006020820190508181036000830152610b9a8184610b0b565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\x0B\xA38\x03\x80a\x0B\xA3\x839\x81\x81\x01`@R\x81\x01\x90a\x002\x91\x90a\x07zV[`\0\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0OWa\0Na\x05\xD9V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x88W\x81` \x01[a\0ua\x05nV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0mW\x90P[P\x90P`\0[\x82Q\x81\x10\x15a\x05\x1CW`\0\x83\x82\x81Q\x81\x10a\0\xACWa\0\xABa\x07\xC3V[[` \x02` \x01\x01Q\x90Pa\0\xC5\x81a\x05K` \x1B` \x1CV[\x15a\0\xD0WPa\x05\x11V[a\0\xD8a\x05nV[\x81\x81`\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP`\0\x80\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x01\xBD\x91\x90a\x08cV[`\0`@Q\x80\x83\x03\x81`\0\x87\x87\xF1\x92PPP=\x80`\0\x81\x14a\x01\xFBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x02\0V[``\x91P[P\x91P\x91P\x81\x80\x15a\x02\x13WP`\0\x81Q\x11[\x15a\x029W\x80\x80` \x01\x90Q\x81\x01\x90a\x02,\x91\x90a\t V[\x83` \x01\x81\x90RPa\x02BV[PPPPa\x05\x11V[`\0\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x02\xEF\x91\x90a\x08cV[`\0`@Q\x80\x83\x03\x81`\0\x87\x87\xF1\x92PPP=\x80`\0\x81\x14a\x03-W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x032V[``\x91P[P\x91P\x91P\x81\x15a\x03\xA7W`\0` \x82Q\x03a\x03\x95W\x81\x80` \x01\x90Q\x81\x01\x90a\x03\\\x91\x90a\t\x9FV[\x90P`\0\x81\x14\x80a\x03mWP`\xFF\x81\x11[\x15a\x03~WPPPPPPPa\x05\x11V[\x80\x86`@\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xA1V[PPPPPPPa\x05\x11V[Pa\x03\xB2V[PPPPPPa\x05\x11V[`\0\x80\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x18\x16\r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04_\x91\x90a\x08cV[`\0`@Q\x80\x83\x03\x81`\0\x87\x87\xF1\x92PPP=\x80`\0\x81\x14a\x04\x9DW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\xA2V[``\x91P[P\x91P\x91P\x81\x80\x15a\x04\xB5WP` \x81Q\x14[\x15a\x04\xDCW\x80\x80` \x01\x90Q\x81\x01\x90a\x04\xCE\x91\x90a\t\x9FV[\x87``\x01\x81\x81RPPa\x04\xE9V[PPPPPPPPa\x05\x11V[\x86\x8A\x8A\x81Q\x81\x10a\x04\xFDWa\x04\xFCa\x07\xC3V[[` \x02` \x01\x01\x81\x90RPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8EV[P`\0\x81`@Q` \x01a\x050\x91\x90a\x0B\x80V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[`\0\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81R` \x01`\0`\xFF\x16\x81R` \x01`\0\x81RP\x90V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x06\x11\x82a\x05\xC8V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x060Wa\x06/a\x05\xD9V[[\x80`@RPPPV[`\0a\x06Ca\x05\xAFV[\x90Pa\x06O\x82\x82a\x06\x08V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06oWa\x06na\x05\xD9V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x06\xB0\x82a\x06\x85V[\x90P\x91\x90PV[a\x06\xC0\x81a\x06\xA5V[\x81\x14a\x06\xCBW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x06\xDD\x81a\x06\xB7V[\x92\x91PPV[`\0a\x06\xF6a\x06\xF1\x84a\x06TV[a\x069V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x07\x19Wa\x07\x18a\x06\x80V[[\x83[\x81\x81\x10\x15a\x07BW\x80a\x07.\x88\x82a\x06\xCEV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x07\x1BV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x07aWa\x07`a\x05\xC3V[[\x81Qa\x07q\x84\x82` \x86\x01a\x06\xE3V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x07\x90Wa\x07\x8Fa\x05\xB9V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xAEWa\x07\xADa\x05\xBEV[[a\x07\xBA\x84\x82\x85\x01a\x07LV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x08&W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x08\x0BV[`\0\x84\x84\x01RPPPPV[`\0a\x08=\x82a\x07\xF2V[a\x08G\x81\x85a\x07\xFDV[\x93Pa\x08W\x81\x85` \x86\x01a\x08\x08V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x08o\x82\x84a\x082V[\x91P\x81\x90P\x92\x91PPV[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x08\x9AWa\x08\x99a\x05\xD9V[[a\x08\xA3\x82a\x05\xC8V[\x90P` \x81\x01\x90P\x91\x90PV[`\0a\x08\xC3a\x08\xBE\x84a\x08\x7FV[a\x069V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x08\xDFWa\x08\xDEa\x08zV[[a\x08\xEA\x84\x82\x85a\x08\x08V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\t\x07Wa\t\x06a\x05\xC3V[[\x81Qa\t\x17\x84\x82` \x86\x01a\x08\xB0V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\t6Wa\t5a\x05\xB9V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tTWa\tSa\x05\xBEV[[a\t`\x84\x82\x85\x01a\x08\xF2V[\x91PP\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\t|\x81a\tiV[\x81\x14a\t\x87W`\0\x80\xFD[PV[`\0\x81Q\x90Pa\t\x99\x81a\tsV[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\t\xB5Wa\t\xB4a\x05\xB9V[[`\0a\t\xC3\x84\x82\x85\x01a\t\x8AV[\x91PP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\n\x01\x81a\x06\xA5V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0a\n.\x82a\n\x07V[a\n8\x81\x85a\n\x12V[\x93Pa\nH\x81\x85` \x86\x01a\x08\x08V[a\nQ\x81a\x05\xC8V[\x84\x01\x91PP\x92\x91PPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\nr\x81a\n\\V[\x82RPPV[a\n\x81\x81a\tiV[\x82RPPV[`\0`\x80\x83\x01`\0\x83\x01Qa\n\x9F`\0\x86\x01\x82a\t\xF8V[P` \x83\x01Q\x84\x82\x03` \x86\x01Ra\n\xB7\x82\x82a\n#V[\x91PP`@\x83\x01Qa\n\xCC`@\x86\x01\x82a\niV[P``\x83\x01Qa\n\xDF``\x86\x01\x82a\nxV[P\x80\x91PP\x92\x91PPV[`\0a\n\xF6\x83\x83a\n\x87V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0B\x16\x82a\t\xCCV[a\x0B \x81\x85a\t\xD7V[\x93P\x83` \x82\x02\x85\x01a\x0B2\x85a\t\xE8V[\x80`\0[\x85\x81\x10\x15a\x0BnW\x84\x84\x03\x89R\x81Qa\x0BO\x85\x82a\n\xEAV[\x94Pa\x0BZ\x83a\n\xFEV[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x0B6V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0B\x9A\x81\x84a\x0B\x0BV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600080fdfea2646970667358221220dcbc3640667428ef874f7a5dbb9a91f8836861866aebe8a8778d5ca7b08caaef64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\0\x80\xFD\xFE\xA2dipfsX\"\x12 \xDC\xBC6@ft(\xEF\x87Oz]\xBB\x9A\x91\xF8\x83ha\x86j\xEB\xE8\xA8w\x8D\\\xA7\xB0\x8C\xAA\xEFdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] tokens);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub tokens: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.tokens,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokens: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokens),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetERC20TokenDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetERC20TokenDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetERC20TokenDataBatchRequestInstance<T, P, N> {
        GetERC20TokenDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        tokens: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetERC20TokenDataBatchRequestInstance<T, P, N>>,
    > {
        GetERC20TokenDataBatchRequestInstance::<T, P, N>::deploy(provider, tokens)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        tokens: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetERC20TokenDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, tokens)
    }
    /**A [`GetERC20TokenDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetERC20TokenDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetERC20TokenDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetERC20TokenDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetERC20TokenDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC20TokenDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetERC20TokenDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetERC20TokenDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            tokens: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetERC20TokenDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, tokens);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            tokens: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { tokens },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetERC20TokenDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetERC20TokenDataBatchRequestInstance<T, P, N> {
            GetERC20TokenDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC20TokenDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC20TokenDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
