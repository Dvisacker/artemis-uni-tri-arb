/**

Generated by the following Solidity interface...
```solidity
interface MockERC20 {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address owner) external view returns (uint256);
    function decimals() external view returns (uint8);
    function initialize(string memory name_, string memory symbol_, uint8 decimals_) external;
    function name() external view returns (string memory);
    function nonces(address) external view returns (uint256);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "DOMAIN_SEPARATOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "name_",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "symbol_",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "decimals_",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonces",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod MockERC20 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b611a6261002b8239611a6290f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610879565b61001d5f356100ec565b806306fdde03146100e7578063095ea7b3146100e25780631624f6c6146100dd57806318160ddd146100d857806323b872dd146100d3578063313ce567146100ce5780633644e515146100c957806370a08231146100c45780637ecebe00146100bf57806395d89b41146100ba578063a9059cbb146100b5578063d505accf146100b05763dd62ed3e0361000e57610843565b6107dc565b610713565b6106de565b6106a9565b6105e1565b61058e565b610534565b6104dc565b61046d565b610417565b610267565b61017a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261010a57565b6100fc565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61015061015960209361015e936101478161010f565b93848093610113565b9586910161011c565b610127565b0190565b6101779160208201915f818403910152610131565b90565b346101aa5761018a366004610100565b6101a6610195610999565b61019d6100f2565b91829182610162565b0390f35b6100f8565b5f80fd5b60018060a01b031690565b6101c7906101b3565b90565b6101d3816101be565b036101da57565b5f80fd5b905035906101eb826101ca565b565b90565b6101f9816101ed565b0361020057565b5f80fd5b90503590610211826101f0565b565b919060408382031261023b578061022f610238925f86016101de565b93602001610204565b90565b6100fc565b151590565b61024e90610240565b9052565b9190610265905f60208501940190610245565b565b346102985761029461028361027d366004610213565b90610a22565b61028b6100f2565b91829182610252565b0390f35b6100f8565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b906102c390610127565b810190811067ffffffffffffffff8211176102dd57604052565b6102a5565b906102f56102ee6100f2565b92836102b9565b565b67ffffffffffffffff811161031557610311602091610127565b0190565b6102a5565b90825f939282370152565b9092919261033a610335826102f7565b6102e2565b93818552602085019082840111610356576103549261031a565b565b6102a1565b9080601f830112156103795781602061037693359101610325565b90565b61029d565b60ff1690565b61038d8161037e565b0361039457565b5f80fd5b905035906103a582610384565b565b909160608284031261040d575f82013567ffffffffffffffff811161040857836103d291840161035b565b9260208301359067ffffffffffffffff8211610403576103f78161040093860161035b565b93604001610398565b90565b6101af565b6101af565b6100fc565b5f0190565b346104465761043061042a3660046103a7565b91610dee565b6104386100f2565b8061044281610412565b0390f35b6100f8565b610454906101ed565b9052565b919061046b905f6020850194019061044b565b565b3461049d5761047d366004610100565b610499610488610e7c565b6104906100f2565b91829182610458565b0390f35b6100f8565b90916060828403126104d7576104d46104bd845f85016101de565b936104cb81602086016101de565b93604001610204565b90565b6100fc565b3461050d576105096104f86104f23660046104a2565b91610eb1565b6105006100f2565b91829182610252565b0390f35b6100f8565b61051b9061037e565b9052565b9190610532905f60208501940190610512565b565b3461056457610544366004610100565b61056061054f611017565b6105576100f2565b9182918261051f565b0390f35b6100f8565b90565b61057590610569565b9052565b919061058c905f6020850194019061056c565b565b346105be5761059e366004610100565b6105ba6105a9611055565b6105b16100f2565b91829182610579565b0390f35b6100f8565b906020828203126105dc576105d9915f016101de565b90565b6100fc565b346106115761060d6105fc6105f73660046105c3565b6110a3565b6106046100f2565b91829182610458565b0390f35b6100f8565b90565b61062d610628610632926101b3565b610616565b6101b3565b90565b61063e90610619565b90565b61064a90610635565b90565b9061065790610641565b5f5260205260405f2090565b1c90565b90565b61067a90600861067f9302610663565b610667565b90565b9061068d915461066a565b90565b6106a6906106a16008915f9261064d565b610682565b90565b346106d9576106d56106c46106bf3660046105c3565b610690565b6106cc6100f2565b91829182610458565b0390f35b6100f8565b3461070e576106ee366004610100565b61070a6106f96110c2565b6107016100f2565b91829182610162565b0390f35b6100f8565b346107445761074061072f610729366004610213565b906110d8565b6107376100f2565b91829182610252565b0390f35b6100f8565b61075281610569565b0361075957565b5f80fd5b9050359061076a82610749565b565b60e0818303126107d757610782825f83016101de565b9261079083602084016101de565b9261079e8160408501610204565b926107ac8260608301610204565b926107d46107bd8460808501610398565b936107cb8160a0860161075d565b9360c00161075d565b90565b6100fc565b34610811576107fb6107ef36600461076c565b9594909493919361141f565b6108036100f2565b8061080d81610412565b0390f35b6100f8565b919060408382031261083e578061083261083b925f86016101de565b936020016101de565b90565b6100fc565b346108745761087061085f610859366004610816565b90611602565b6108676100f2565b91829182610458565b0390f35b6100f8565b5f80fd5b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156108b6575b60208310146108b157565b610882565b91607f16916108a6565b60209181520190565b5f5260205f2090565b905f92918054906108ec6108e583610896565b80946108c0565b916001811690815f146109435750600114610907575b505050565b61091491929394506108c9565b915f925b81841061092b57505001905f8080610902565b60018160209295939554848601520191019290610918565b92949550505060ff19168252151560200201905f8080610902565b90610968916108d2565b90565b9061098b6109849261097b6100f2565b9384809261095e565b03836102b9565b565b6109969061096b565b90565b6109a161087d565b506109ab5f61098d565b90565b5f90565b906109bc90610641565b5f5260205260405f2090565b5f1b90565b906109d95f19916109c8565b9181191691161790565b6109f76109f26109fc926101ed565b610616565b6101ed565b90565b90565b90610a17610a12610a1e926109e3565b6109ff565b82546109cd565b9055565b90610a2b6109ae565b50610a4b81610a46610a3f600533906109b2565b859061064d565b610a02565b33919091610a97610a85610a7f7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610641565b93610641565b93610a8e6100f2565b91829182610458565b0390a3600190565b5f1c90565b60ff1690565b610ab6610abb91610a9f565b610aa4565b90565b610ac89054610aaa565b90565b5f7f414c52454144595f494e495449414c495a454400000000000000000000000000910152565b610aff6013602092610113565b610b0881610acb565b0190565b610b219060208101905f818303910152610af2565b90565b15610b2b57565b610b336100f2565b62461bcd60e51b815280610b4960048201610b0c565b0390fd5b601f602091010490565b1b90565b91906008610b76910291610b705f1984610b57565b92610b57565b9181191691161790565b9190610b96610b91610b9e936109e3565b6109ff565b908354610b5b565b9055565b5f90565b610bb891610bb2610ba2565b91610b80565b565b5b818110610bc6575050565b80610bd35f600193610ba6565b01610bbb565b9190601f8111610be9575b505050565b610bf5610c1a936108c9565b906020610c0184610b4d565b83019310610c22575b610c1390610b4d565b0190610bba565b5f8080610be4565b9150610c1381929050610c0a565b90610c40905f1990600802610663565b191690565b81610c4f91610c30565b906002021790565b90610c618161010f565b9067ffffffffffffffff8211610d2157610c8582610c7f8554610896565b85610bd9565b602090601f8311600114610cb957918091610ca8935f92610cad575b5050610c45565b90555b565b90915001515f80610ca1565b601f19831691610cc8856108c9565b925f5b818110610d0957509160029391856001969410610cef575b50505002019055610cab565b610cff910151601f841690610c30565b90555f8080610ce3565b91936020600181928787015181550195019201610ccb565b6102a5565b90610d3091610c57565b565b90610d3e60ff916109c8565b9181191691161790565b610d5c610d57610d619261037e565b610616565b61037e565b90565b90565b90610d7c610d77610d8392610d48565b610d64565b8254610d32565b9055565b610d9090610569565b90565b610d9c90610a9f565b90565b90610db4610daf610dbb92610d87565b610d93565b82546109cd565b9055565b610dc890610240565b90565b90565b90610de3610dde610dea92610dbf565b610dcb565b8254610d32565b9055565b610e299291610e1b610e2292610e15610e10610e0a6009610abe565b15610240565b610b24565b5f610d26565b6001610d26565b6002610d67565b610e3b610e3461162e565b6006610a02565b610e4d610e46611782565b6007610d9f565b610e5960016009610dce565b565b610e67610e6c91610a9f565b610667565b90565b610e799054610e5b565b90565b610e84610ba2565b50610e8f6003610e6f565b90565b90565b610ea9610ea4610eae92610e92565b610616565b6101ed565b90565b919091610ebc6109ae565b50610edb610ed6610ecf600584906109b2565b339061064d565b610e6f565b80610eff610ef9610ef4610eee5f610e95565b196101ed565b6101ed565b916101ed565b03610fbd575b50610f38610f27610f20610f1b6004859061064d565b610e6f565b84906118ea565b610f336004849061064d565b610a02565b610f6a610f59610f52610f4d6004879061064d565b610e6f565b84906119c4565b610f656004869061064d565b610a02565b919091610fb5610fa3610f9d7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610641565b93610641565b93610fac6100f2565b91829182610458565b0390a3600190565b610fcb610fe69184906118ea565b610fe1610fda600585906109b2565b339061064d565b610a02565b5f610f05565b5f90565b60ff1690565b61100261100791610a9f565b610ff0565b90565b6110149054610ff6565b90565b61101f610fec565b5061102a600261100a565b90565b5f90565b90565b61104061104591610a9f565b611031565b90565b6110529054611034565b90565b61105d61102d565b5061106661162e565b61108161107b6110766006610e6f565b6101ed565b916101ed565b145f14611096576110926007611048565b5b90565b61109e611782565b611093565b6110ba6110bf916110b2610ba2565b50600461064d565b610e6f565b90565b6110ca61087d565b506110d5600161098d565b90565b906110e16109ae565b506111146111036110fc6110f76004339061064d565b610e6f565b83906118ea565b61110f6004339061064d565b610a02565b61114661113561112e6111296004869061064d565b610e6f565b83906119c4565b6111416004859061064d565b610a02565b3391909161119261118061117a7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610641565b93610641565b936111896100f2565b91829182610458565b0390a3600190565b5f7f5045524d49545f444541444c494e455f45585049524544000000000000000000910152565b6111ce6017602092610113565b6111d78161119a565b0190565b6111f09060208101905f8183039101526111c1565b90565b156111fa57565b6112026100f2565b62461bcd60e51b815280611218600482016111db565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b611239906101ed565b5f1981146112475760010190565b61121c565b611255906101be565b9052565b91946112a16112ab9298979561129760a09661128d6112b29a61128360c08a019e5f8b019061056c565b602089019061124c565b604087019061124c565b606085019061044b565b608083019061044b565b019061044b565b565b60200190565b5190565b905090565b5f61190160f01b910152565b6112db600280926112be565b6112e4816112c3565b0190565b90565b6112f76112fc91610569565b6112e8565b9052565b602080939261131b611314611323946112cf565b80926112eb565b0180926112eb565b0190565b61135c61136394611352606094989795611348608086019a5f87019061056c565b6020850190610512565b604083019061056c565b019061056c565b565b61136d6100f2565b3d5f823e3d90fd5b61138961138461138e92610e92565b610616565b6101b3565b90565b61139a90611375565b90565b5f7f494e56414c49445f5349474e4552000000000000000000000000000000000000910152565b6113d1600e602092610113565b6113da8161139d565b0190565b6113f39060208101905f8183039101526113c4565b90565b156113fd57565b6114056100f2565b62461bcd60e51b81528061141b600482016113de565b0390fd5b9361152c5f939692976020956114488161144161143b426101ed565b916101ed565b10156111f3565b6115068a6114ce8a6114c08d61145c611055565b967f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99361148d81979391600861064d565b6114a961149982610e6f565b916114a383611230565b90610a02565b91926114b36100f2565b9760209689978801611259565b8b82018103825203826102b9565b6114e06114da826112ba565b916112b4565b20916114f86114ed6100f2565b9384928b8401611300565b8982018103825203826102b9565b611518611512826112ba565b916112b4565b2092936115236100f2565b94859485611327565b838052039060015afa156115fd5761158e6115475f516109c8565b8061156261155c6115575f611391565b6101be565b916101be565b1415806115de575b611573906113f6565b611589611582859260056109b2565b869061064d565b610a02565b9190916115d96115c76115c17f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610641565b93610641565b936115d06100f2565b91829182610458565b0390a3565b50611573816115f56115ef866101be565b916101be565b14905061156a565b611365565b6116279161161d61162292611615610ba2565b5060056109b2565b61064d565b610e6f565b90565b5f90565b611636610ba2565b5061164a600161164461162a565b50611a1a565b90565b90565b60209181520190565b5f5260205f2090565b905f929180549061167c61167583610896565b8094611650565b916001811690815f146116d35750600114611697575b505050565b6116a49192939450611659565b915f925b8184106116bb57505001905f8080611692565b600181602092959395548486015201910192906116a8565b92949550505060ff19168252151560200201905f8080611692565b906116f891611662565b90565b9061171b6117149261170b6100f2565b938480926116ee565b03836102b9565b565b611726906116fb565b90565b61173290610635565b90565b909594926117809461176f6117799261176560809661175b60a088019c5f89019061056c565b602087019061056c565b604085019061056c565b606083019061044b565b019061124c565b565b61178a61102d565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61182d6117c06117bb5f61164d565b61171d565b6117d26117cc826112ba565b916112b4565b209161181e7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661180061162e565b61180930611729565b916118126100f2565b96879560208701611735565b602082018103825203826102b9565b61183f611839826112ba565b916112b4565b2090565b5f7f45524332303a207375627472616374696f6e20756e646572666c6f7700000000910152565b611877601c602092610113565b61188081611843565b0190565b6118999060208101905f81830391015261186a565b90565b156118a357565b6118ab6100f2565b62461bcd60e51b8152806118c160048201611884565b0390fd5b6118d46118da919392936101ed565b926101ed565b82039182116118e557565b61121c565b9061191a916118f7610ba2565b506119158161190e611908856101ed565b916101ed565b101561189c565b6118c5565b90565b61192c611932919392936101ed565b926101ed565b820180921161193d57565b61121c565b5f7f45524332303a206164646974696f6e206f766572666c6f770000000000000000910152565b6119766018602092610113565b61197f81611942565b0190565b6119989060208101905f818303910152611969565b90565b156119a257565b6119aa6100f2565b62461bcd60e51b8152806119c060048201611983565b0390fd5b906119db6119f6916119d4610ba2565b508361191d565b916119ef6119e984926101ed565b916101ed565b101561199b565b90565b611a01610ba2565b504690565b634e487b7160e01b5f52605160045260245ffd5b600103611a0657611a296119f9565b9056fea26469706673582212209d77e0df215cd249c4ce470f6ccec1aa34f4f4ece053fb42838fd32b7a5eb95e64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x1Aba\0+\x829a\x1Ab\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08yV[a\0\x1D_5a\0\xECV[\x80c\x06\xFD\xDE\x03\x14a\0\xE7W\x80c\t^\xA7\xB3\x14a\0\xE2W\x80c\x16$\xF6\xC6\x14a\0\xDDW\x80c\x18\x16\r\xDD\x14a\0\xD8W\x80c#\xB8r\xDD\x14a\0\xD3W\x80c1<\xE5g\x14a\0\xCEW\x80c6D\xE5\x15\x14a\0\xC9W\x80cp\xA0\x821\x14a\0\xC4W\x80c~\xCE\xBE\0\x14a\0\xBFW\x80c\x95\xD8\x9BA\x14a\0\xBAW\x80c\xA9\x05\x9C\xBB\x14a\0\xB5W\x80c\xD5\x05\xAC\xCF\x14a\0\xB0Wc\xDDb\xED>\x03a\0\x0EWa\x08CV[a\x07\xDCV[a\x07\x13V[a\x06\xDEV[a\x06\xA9V[a\x05\xE1V[a\x05\x8EV[a\x054V[a\x04\xDCV[a\x04mV[a\x04\x17V[a\x02gV[a\x01zV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\nWV[a\0\xFCV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01Pa\x01Y` \x93a\x01^\x93a\x01G\x81a\x01\x0FV[\x93\x84\x80\x93a\x01\x13V[\x95\x86\x91\x01a\x01\x1CV[a\x01'V[\x01\x90V[a\x01w\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x011V[\x90V[4a\x01\xAAWa\x01\x8A6`\x04a\x01\0V[a\x01\xA6a\x01\x95a\t\x99V[a\x01\x9Da\0\xF2V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC7\x90a\x01\xB3V[\x90V[a\x01\xD3\x81a\x01\xBEV[\x03a\x01\xDAWV[_\x80\xFD[\x90P5\x90a\x01\xEB\x82a\x01\xCAV[V[\x90V[a\x01\xF9\x81a\x01\xEDV[\x03a\x02\0WV[_\x80\xFD[\x90P5\x90a\x02\x11\x82a\x01\xF0V[V[\x91\x90`@\x83\x82\x03\x12a\x02;W\x80a\x02/a\x028\x92_\x86\x01a\x01\xDEV[\x93` \x01a\x02\x04V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x02N\x90a\x02@V[\x90RV[\x91\x90a\x02e\x90_` \x85\x01\x94\x01\x90a\x02EV[V[4a\x02\x98Wa\x02\x94a\x02\x83a\x02}6`\x04a\x02\x13V[\x90a\n\"V[a\x02\x8Ba\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\xC3\x90a\x01'V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xDDW`@RV[a\x02\xA5V[\x90a\x02\xF5a\x02\xEEa\0\xF2V[\x92\x83a\x02\xB9V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x15Wa\x03\x11` \x91a\x01'V[\x01\x90V[a\x02\xA5V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x03:a\x035\x82a\x02\xF7V[a\x02\xE2V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x03VWa\x03T\x92a\x03\x1AV[V[a\x02\xA1V[\x90\x80`\x1F\x83\x01\x12\x15a\x03yW\x81` a\x03v\x935\x91\x01a\x03%V[\x90V[a\x02\x9DV[`\xFF\x16\x90V[a\x03\x8D\x81a\x03~V[\x03a\x03\x94WV[_\x80\xFD[\x90P5\x90a\x03\xA5\x82a\x03\x84V[V[\x90\x91``\x82\x84\x03\x12a\x04\rW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x08W\x83a\x03\xD2\x91\x84\x01a\x03[V[\x92` \x83\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\x03Wa\x03\xF7\x81a\x04\0\x93\x86\x01a\x03[V[\x93`@\x01a\x03\x98V[\x90V[a\x01\xAFV[a\x01\xAFV[a\0\xFCV[_\x01\x90V[4a\x04FWa\x040a\x04*6`\x04a\x03\xA7V[\x91a\r\xEEV[a\x048a\0\xF2V[\x80a\x04B\x81a\x04\x12V[\x03\x90\xF3[a\0\xF8V[a\x04T\x90a\x01\xEDV[\x90RV[\x91\x90a\x04k\x90_` \x85\x01\x94\x01\x90a\x04KV[V[4a\x04\x9DWa\x04}6`\x04a\x01\0V[a\x04\x99a\x04\x88a\x0E|V[a\x04\x90a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[\x90\x91``\x82\x84\x03\x12a\x04\xD7Wa\x04\xD4a\x04\xBD\x84_\x85\x01a\x01\xDEV[\x93a\x04\xCB\x81` \x86\x01a\x01\xDEV[\x93`@\x01a\x02\x04V[\x90V[a\0\xFCV[4a\x05\rWa\x05\ta\x04\xF8a\x04\xF26`\x04a\x04\xA2V[\x91a\x0E\xB1V[a\x05\0a\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[a\x05\x1B\x90a\x03~V[\x90RV[\x91\x90a\x052\x90_` \x85\x01\x94\x01\x90a\x05\x12V[V[4a\x05dWa\x05D6`\x04a\x01\0V[a\x05`a\x05Oa\x10\x17V[a\x05Wa\0\xF2V[\x91\x82\x91\x82a\x05\x1FV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x05u\x90a\x05iV[\x90RV[\x91\x90a\x05\x8C\x90_` \x85\x01\x94\x01\x90a\x05lV[V[4a\x05\xBEWa\x05\x9E6`\x04a\x01\0V[a\x05\xBAa\x05\xA9a\x10UV[a\x05\xB1a\0\xF2V[\x91\x82\x91\x82a\x05yV[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x05\xDCWa\x05\xD9\x91_\x01a\x01\xDEV[\x90V[a\0\xFCV[4a\x06\x11Wa\x06\ra\x05\xFCa\x05\xF76`\x04a\x05\xC3V[a\x10\xA3V[a\x06\x04a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x06-a\x06(a\x062\x92a\x01\xB3V[a\x06\x16V[a\x01\xB3V[\x90V[a\x06>\x90a\x06\x19V[\x90V[a\x06J\x90a\x065V[\x90V[\x90a\x06W\x90a\x06AV[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x06z\x90`\x08a\x06\x7F\x93\x02a\x06cV[a\x06gV[\x90V[\x90a\x06\x8D\x91Ta\x06jV[\x90V[a\x06\xA6\x90a\x06\xA1`\x08\x91_\x92a\x06MV[a\x06\x82V[\x90V[4a\x06\xD9Wa\x06\xD5a\x06\xC4a\x06\xBF6`\x04a\x05\xC3V[a\x06\x90V[a\x06\xCCa\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[4a\x07\x0EWa\x06\xEE6`\x04a\x01\0V[a\x07\na\x06\xF9a\x10\xC2V[a\x07\x01a\0\xF2V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\0\xF8V[4a\x07DWa\x07@a\x07/a\x07)6`\x04a\x02\x13V[\x90a\x10\xD8V[a\x077a\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[a\x07R\x81a\x05iV[\x03a\x07YWV[_\x80\xFD[\x90P5\x90a\x07j\x82a\x07IV[V[`\xE0\x81\x83\x03\x12a\x07\xD7Wa\x07\x82\x82_\x83\x01a\x01\xDEV[\x92a\x07\x90\x83` \x84\x01a\x01\xDEV[\x92a\x07\x9E\x81`@\x85\x01a\x02\x04V[\x92a\x07\xAC\x82``\x83\x01a\x02\x04V[\x92a\x07\xD4a\x07\xBD\x84`\x80\x85\x01a\x03\x98V[\x93a\x07\xCB\x81`\xA0\x86\x01a\x07]V[\x93`\xC0\x01a\x07]V[\x90V[a\0\xFCV[4a\x08\x11Wa\x07\xFBa\x07\xEF6`\x04a\x07lV[\x95\x94\x90\x94\x93\x91\x93a\x14\x1FV[a\x08\x03a\0\xF2V[\x80a\x08\r\x81a\x04\x12V[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x08>W\x80a\x082a\x08;\x92_\x86\x01a\x01\xDEV[\x93` \x01a\x01\xDEV[\x90V[a\0\xFCV[4a\x08tWa\x08pa\x08_a\x08Y6`\x04a\x08\x16V[\x90a\x16\x02V[a\x08ga\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x08\xB6W[` \x83\x10\x14a\x08\xB1WV[a\x08\x82V[\x91`\x7F\x16\x91a\x08\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x08\xECa\x08\xE5\x83a\x08\x96V[\x80\x94a\x08\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\tCWP`\x01\x14a\t\x07W[PPPV[a\t\x14\x91\x92\x93\x94Pa\x08\xC9V[\x91_\x92[\x81\x84\x10a\t+WPP\x01\x90_\x80\x80a\t\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\t\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\t\x02V[\x90a\th\x91a\x08\xD2V[\x90V[\x90a\t\x8Ba\t\x84\x92a\t{a\0\xF2V[\x93\x84\x80\x92a\t^V[\x03\x83a\x02\xB9V[V[a\t\x96\x90a\tkV[\x90V[a\t\xA1a\x08}V[Pa\t\xAB_a\t\x8DV[\x90V[_\x90V[\x90a\t\xBC\x90a\x06AV[_R` R`@_ \x90V[_\x1B\x90V[\x90a\t\xD9_\x19\x91a\t\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t\xF7a\t\xF2a\t\xFC\x92a\x01\xEDV[a\x06\x16V[a\x01\xEDV[\x90V[\x90V[\x90a\n\x17a\n\x12a\n\x1E\x92a\t\xE3V[a\t\xFFV[\x82Ta\t\xCDV[\x90UV[\x90a\n+a\t\xAEV[Pa\nK\x81a\nFa\n?`\x053\x90a\t\xB2V[\x85\x90a\x06MV[a\n\x02V[3\x91\x90\x91a\n\x97a\n\x85a\n\x7F\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06AV[\x93a\x06AV[\x93a\n\x8Ea\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\n\xB6a\n\xBB\x91a\n\x9FV[a\n\xA4V[\x90V[a\n\xC8\x90Ta\n\xAAV[\x90V[_\x7FALREADY_INITIALIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xFF`\x13` \x92a\x01\x13V[a\x0B\x08\x81a\n\xCBV[\x01\x90V[a\x0B!\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n\xF2V[\x90V[\x15a\x0B+WV[a\x0B3a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0BI`\x04\x82\x01a\x0B\x0CV[\x03\x90\xFD[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0Bv\x91\x02\x91a\x0Bp_\x19\x84a\x0BWV[\x92a\x0BWV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0B\x96a\x0B\x91a\x0B\x9E\x93a\t\xE3V[a\t\xFFV[\x90\x83Ta\x0B[V[\x90UV[_\x90V[a\x0B\xB8\x91a\x0B\xB2a\x0B\xA2V[\x91a\x0B\x80V[V[[\x81\x81\x10a\x0B\xC6WPPV[\x80a\x0B\xD3_`\x01\x93a\x0B\xA6V[\x01a\x0B\xBBV[\x91\x90`\x1F\x81\x11a\x0B\xE9W[PPPV[a\x0B\xF5a\x0C\x1A\x93a\x08\xC9V[\x90` a\x0C\x01\x84a\x0BMV[\x83\x01\x93\x10a\x0C\"W[a\x0C\x13\x90a\x0BMV[\x01\x90a\x0B\xBAV[_\x80\x80a\x0B\xE4V[\x91Pa\x0C\x13\x81\x92\x90Pa\x0C\nV[\x90a\x0C@\x90_\x19\x90`\x08\x02a\x06cV[\x19\x16\x90V[\x81a\x0CO\x91a\x0C0V[\x90`\x02\x02\x17\x90V[\x90a\x0Ca\x81a\x01\x0FV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r!Wa\x0C\x85\x82a\x0C\x7F\x85Ta\x08\x96V[\x85a\x0B\xD9V[` \x90`\x1F\x83\x11`\x01\x14a\x0C\xB9W\x91\x80\x91a\x0C\xA8\x93_\x92a\x0C\xADW[PPa\x0CEV[\x90U[V[\x90\x91P\x01Q_\x80a\x0C\xA1V[`\x1F\x19\x83\x16\x91a\x0C\xC8\x85a\x08\xC9V[\x92_[\x81\x81\x10a\r\tWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0C\xEFW[PPP\x02\x01\x90Ua\x0C\xABV[a\x0C\xFF\x91\x01Q`\x1F\x84\x16\x90a\x0C0V[\x90U_\x80\x80a\x0C\xE3V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x0C\xCBV[a\x02\xA5V[\x90a\r0\x91a\x0CWV[V[\x90a\r>`\xFF\x91a\t\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\\a\rWa\ra\x92a\x03~V[a\x06\x16V[a\x03~V[\x90V[\x90V[\x90a\r|a\rwa\r\x83\x92a\rHV[a\rdV[\x82Ta\r2V[\x90UV[a\r\x90\x90a\x05iV[\x90V[a\r\x9C\x90a\n\x9FV[\x90V[\x90a\r\xB4a\r\xAFa\r\xBB\x92a\r\x87V[a\r\x93V[\x82Ta\t\xCDV[\x90UV[a\r\xC8\x90a\x02@V[\x90V[\x90V[\x90a\r\xE3a\r\xDEa\r\xEA\x92a\r\xBFV[a\r\xCBV[\x82Ta\r2V[\x90UV[a\x0E)\x92\x91a\x0E\x1Ba\x0E\"\x92a\x0E\x15a\x0E\x10a\x0E\n`\ta\n\xBEV[\x15a\x02@V[a\x0B$V[_a\r&V[`\x01a\r&V[`\x02a\rgV[a\x0E;a\x0E4a\x16.V[`\x06a\n\x02V[a\x0EMa\x0EFa\x17\x82V[`\x07a\r\x9FV[a\x0EY`\x01`\ta\r\xCEV[V[a\x0Ega\x0El\x91a\n\x9FV[a\x06gV[\x90V[a\x0Ey\x90Ta\x0E[V[\x90V[a\x0E\x84a\x0B\xA2V[Pa\x0E\x8F`\x03a\x0EoV[\x90V[\x90V[a\x0E\xA9a\x0E\xA4a\x0E\xAE\x92a\x0E\x92V[a\x06\x16V[a\x01\xEDV[\x90V[\x91\x90\x91a\x0E\xBCa\t\xAEV[Pa\x0E\xDBa\x0E\xD6a\x0E\xCF`\x05\x84\x90a\t\xB2V[3\x90a\x06MV[a\x0EoV[\x80a\x0E\xFFa\x0E\xF9a\x0E\xF4a\x0E\xEE_a\x0E\x95V[\x19a\x01\xEDV[a\x01\xEDV[\x91a\x01\xEDV[\x03a\x0F\xBDW[Pa\x0F8a\x0F'a\x0F a\x0F\x1B`\x04\x85\x90a\x06MV[a\x0EoV[\x84\x90a\x18\xEAV[a\x0F3`\x04\x84\x90a\x06MV[a\n\x02V[a\x0Fja\x0FYa\x0FRa\x0FM`\x04\x87\x90a\x06MV[a\x0EoV[\x84\x90a\x19\xC4V[a\x0Fe`\x04\x86\x90a\x06MV[a\n\x02V[\x91\x90\x91a\x0F\xB5a\x0F\xA3a\x0F\x9D\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06AV[\x93a\x06AV[\x93a\x0F\xACa\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[a\x0F\xCBa\x0F\xE6\x91\x84\x90a\x18\xEAV[a\x0F\xE1a\x0F\xDA`\x05\x85\x90a\t\xB2V[3\x90a\x06MV[a\n\x02V[_a\x0F\x05V[_\x90V[`\xFF\x16\x90V[a\x10\x02a\x10\x07\x91a\n\x9FV[a\x0F\xF0V[\x90V[a\x10\x14\x90Ta\x0F\xF6V[\x90V[a\x10\x1Fa\x0F\xECV[Pa\x10*`\x02a\x10\nV[\x90V[_\x90V[\x90V[a\x10@a\x10E\x91a\n\x9FV[a\x101V[\x90V[a\x10R\x90Ta\x104V[\x90V[a\x10]a\x10-V[Pa\x10fa\x16.V[a\x10\x81a\x10{a\x10v`\x06a\x0EoV[a\x01\xEDV[\x91a\x01\xEDV[\x14_\x14a\x10\x96Wa\x10\x92`\x07a\x10HV[[\x90V[a\x10\x9Ea\x17\x82V[a\x10\x93V[a\x10\xBAa\x10\xBF\x91a\x10\xB2a\x0B\xA2V[P`\x04a\x06MV[a\x0EoV[\x90V[a\x10\xCAa\x08}V[Pa\x10\xD5`\x01a\t\x8DV[\x90V[\x90a\x10\xE1a\t\xAEV[Pa\x11\x14a\x11\x03a\x10\xFCa\x10\xF7`\x043\x90a\x06MV[a\x0EoV[\x83\x90a\x18\xEAV[a\x11\x0F`\x043\x90a\x06MV[a\n\x02V[a\x11Fa\x115a\x11.a\x11)`\x04\x86\x90a\x06MV[a\x0EoV[\x83\x90a\x19\xC4V[a\x11A`\x04\x85\x90a\x06MV[a\n\x02V[3\x91\x90\x91a\x11\x92a\x11\x80a\x11z\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06AV[\x93a\x06AV[\x93a\x11\x89a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[_\x7FPERMIT_DEADLINE_EXPIRED\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\xCE`\x17` \x92a\x01\x13V[a\x11\xD7\x81a\x11\x9AV[\x01\x90V[a\x11\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xC1V[\x90V[\x15a\x11\xFAWV[a\x12\x02a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x18`\x04\x82\x01a\x11\xDBV[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x129\x90a\x01\xEDV[_\x19\x81\x14a\x12GW`\x01\x01\x90V[a\x12\x1CV[a\x12U\x90a\x01\xBEV[\x90RV[\x91\x94a\x12\xA1a\x12\xAB\x92\x98\x97\x95a\x12\x97`\xA0\x96a\x12\x8Da\x12\xB2\x9Aa\x12\x83`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x05lV[` \x89\x01\x90a\x12LV[`@\x87\x01\x90a\x12LV[``\x85\x01\x90a\x04KV[`\x80\x83\x01\x90a\x04KV[\x01\x90a\x04KV[V[` \x01\x90V[Q\x90V[\x90P\x90V[_a\x19\x01`\xF0\x1B\x91\x01RV[a\x12\xDB`\x02\x80\x92a\x12\xBEV[a\x12\xE4\x81a\x12\xC3V[\x01\x90V[\x90V[a\x12\xF7a\x12\xFC\x91a\x05iV[a\x12\xE8V[\x90RV[` \x80\x93\x92a\x13\x1Ba\x13\x14a\x13#\x94a\x12\xCFV[\x80\x92a\x12\xEBV[\x01\x80\x92a\x12\xEBV[\x01\x90V[a\x13\\a\x13c\x94a\x13R``\x94\x98\x97\x95a\x13H`\x80\x86\x01\x9A_\x87\x01\x90a\x05lV[` \x85\x01\x90a\x05\x12V[`@\x83\x01\x90a\x05lV[\x01\x90a\x05lV[V[a\x13ma\0\xF2V[=_\x82>=\x90\xFD[a\x13\x89a\x13\x84a\x13\x8E\x92a\x0E\x92V[a\x06\x16V[a\x01\xB3V[\x90V[a\x13\x9A\x90a\x13uV[\x90V[_\x7FINVALID_SIGNER\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\xD1`\x0E` \x92a\x01\x13V[a\x13\xDA\x81a\x13\x9DV[\x01\x90V[a\x13\xF3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xC4V[\x90V[\x15a\x13\xFDWV[a\x14\x05a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x1B`\x04\x82\x01a\x13\xDEV[\x03\x90\xFD[\x93a\x15,_\x93\x96\x92\x97` \x95a\x14H\x81a\x14Aa\x14;Ba\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x11\xF3V[a\x15\x06\x8Aa\x14\xCE\x8Aa\x14\xC0\x8Da\x14\\a\x10UV[\x96\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x93a\x14\x8D\x81\x97\x93\x91`\x08a\x06MV[a\x14\xA9a\x14\x99\x82a\x0EoV[\x91a\x14\xA3\x83a\x120V[\x90a\n\x02V[\x91\x92a\x14\xB3a\0\xF2V[\x97` \x96\x89\x97\x88\x01a\x12YV[\x8B\x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x14\xE0a\x14\xDA\x82a\x12\xBAV[\x91a\x12\xB4V[ \x91a\x14\xF8a\x14\xEDa\0\xF2V[\x93\x84\x92\x8B\x84\x01a\x13\0V[\x89\x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x15\x18a\x15\x12\x82a\x12\xBAV[\x91a\x12\xB4V[ \x92\x93a\x15#a\0\xF2V[\x94\x85\x94\x85a\x13'V[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x15\xFDWa\x15\x8Ea\x15G_Qa\t\xC8V[\x80a\x15ba\x15\\a\x15W_a\x13\x91V[a\x01\xBEV[\x91a\x01\xBEV[\x14\x15\x80a\x15\xDEW[a\x15s\x90a\x13\xF6V[a\x15\x89a\x15\x82\x85\x92`\x05a\t\xB2V[\x86\x90a\x06MV[a\n\x02V[\x91\x90\x91a\x15\xD9a\x15\xC7a\x15\xC1\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06AV[\x93a\x06AV[\x93a\x15\xD0a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3V[Pa\x15s\x81a\x15\xF5a\x15\xEF\x86a\x01\xBEV[\x91a\x01\xBEV[\x14\x90Pa\x15jV[a\x13eV[a\x16'\x91a\x16\x1Da\x16\"\x92a\x16\x15a\x0B\xA2V[P`\x05a\t\xB2V[a\x06MV[a\x0EoV[\x90V[_\x90V[a\x166a\x0B\xA2V[Pa\x16J`\x01a\x16Da\x16*V[Pa\x1A\x1AV[\x90V[\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x16|a\x16u\x83a\x08\x96V[\x80\x94a\x16PV[\x91`\x01\x81\x16\x90\x81_\x14a\x16\xD3WP`\x01\x14a\x16\x97W[PPPV[a\x16\xA4\x91\x92\x93\x94Pa\x16YV[\x91_\x92[\x81\x84\x10a\x16\xBBWPP\x01\x90_\x80\x80a\x16\x92V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x16\xA8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x16\x92V[\x90a\x16\xF8\x91a\x16bV[\x90V[\x90a\x17\x1Ba\x17\x14\x92a\x17\x0Ba\0\xF2V[\x93\x84\x80\x92a\x16\xEEV[\x03\x83a\x02\xB9V[V[a\x17&\x90a\x16\xFBV[\x90V[a\x172\x90a\x065V[\x90V[\x90\x95\x94\x92a\x17\x80\x94a\x17oa\x17y\x92a\x17e`\x80\x96a\x17[`\xA0\x88\x01\x9C_\x89\x01\x90a\x05lV[` \x87\x01\x90a\x05lV[`@\x85\x01\x90a\x05lV[``\x83\x01\x90a\x04KV[\x01\x90a\x12LV[V[a\x17\x8Aa\x10-V[P\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0Fa\x18-a\x17\xC0a\x17\xBB_a\x16MV[a\x17\x1DV[a\x17\xD2a\x17\xCC\x82a\x12\xBAV[\x91a\x12\xB4V[ \x91a\x18\x1E\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6a\x18\0a\x16.V[a\x18\t0a\x17)V[\x91a\x18\x12a\0\xF2V[\x96\x87\x95` \x87\x01a\x175V[` \x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x18?a\x189\x82a\x12\xBAV[\x91a\x12\xB4V[ \x90V[_\x7FERC20: subtraction underflow\0\0\0\0\x91\x01RV[a\x18w`\x1C` \x92a\x01\x13V[a\x18\x80\x81a\x18CV[\x01\x90V[a\x18\x99\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18jV[\x90V[\x15a\x18\xA3WV[a\x18\xABa\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xC1`\x04\x82\x01a\x18\x84V[\x03\x90\xFD[a\x18\xD4a\x18\xDA\x91\x93\x92\x93a\x01\xEDV[\x92a\x01\xEDV[\x82\x03\x91\x82\x11a\x18\xE5WV[a\x12\x1CV[\x90a\x19\x1A\x91a\x18\xF7a\x0B\xA2V[Pa\x19\x15\x81a\x19\x0Ea\x19\x08\x85a\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x18\x9CV[a\x18\xC5V[\x90V[a\x19,a\x192\x91\x93\x92\x93a\x01\xEDV[\x92a\x01\xEDV[\x82\x01\x80\x92\x11a\x19=WV[a\x12\x1CV[_\x7FERC20: addition overflow\0\0\0\0\0\0\0\0\x91\x01RV[a\x19v`\x18` \x92a\x01\x13V[a\x19\x7F\x81a\x19BV[\x01\x90V[a\x19\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19iV[\x90V[\x15a\x19\xA2WV[a\x19\xAAa\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xC0`\x04\x82\x01a\x19\x83V[\x03\x90\xFD[\x90a\x19\xDBa\x19\xF6\x91a\x19\xD4a\x0B\xA2V[P\x83a\x19\x1DV[\x91a\x19\xEFa\x19\xE9\x84\x92a\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x19\x9BV[\x90V[a\x1A\x01a\x0B\xA2V[PF\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x1A\x06Wa\x1A)a\x19\xF9V[\x90V\xFE\xA2dipfsX\"\x12 \x9Dw\xE0\xDF!\\\xD2I\xC4\xCEG\x0Fl\xCE\xC1\xAA4\xF4\xF4\xEC\xE0S\xFBB\x83\x8F\xD3+z^\xB9^dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610879565b61001d5f356100ec565b806306fdde03146100e7578063095ea7b3146100e25780631624f6c6146100dd57806318160ddd146100d857806323b872dd146100d3578063313ce567146100ce5780633644e515146100c957806370a08231146100c45780637ecebe00146100bf57806395d89b41146100ba578063a9059cbb146100b5578063d505accf146100b05763dd62ed3e0361000e57610843565b6107dc565b610713565b6106de565b6106a9565b6105e1565b61058e565b610534565b6104dc565b61046d565b610417565b610267565b61017a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261010a57565b6100fc565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61015061015960209361015e936101478161010f565b93848093610113565b9586910161011c565b610127565b0190565b6101779160208201915f818403910152610131565b90565b346101aa5761018a366004610100565b6101a6610195610999565b61019d6100f2565b91829182610162565b0390f35b6100f8565b5f80fd5b60018060a01b031690565b6101c7906101b3565b90565b6101d3816101be565b036101da57565b5f80fd5b905035906101eb826101ca565b565b90565b6101f9816101ed565b0361020057565b5f80fd5b90503590610211826101f0565b565b919060408382031261023b578061022f610238925f86016101de565b93602001610204565b90565b6100fc565b151590565b61024e90610240565b9052565b9190610265905f60208501940190610245565b565b346102985761029461028361027d366004610213565b90610a22565b61028b6100f2565b91829182610252565b0390f35b6100f8565b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b906102c390610127565b810190811067ffffffffffffffff8211176102dd57604052565b6102a5565b906102f56102ee6100f2565b92836102b9565b565b67ffffffffffffffff811161031557610311602091610127565b0190565b6102a5565b90825f939282370152565b9092919261033a610335826102f7565b6102e2565b93818552602085019082840111610356576103549261031a565b565b6102a1565b9080601f830112156103795781602061037693359101610325565b90565b61029d565b60ff1690565b61038d8161037e565b0361039457565b5f80fd5b905035906103a582610384565b565b909160608284031261040d575f82013567ffffffffffffffff811161040857836103d291840161035b565b9260208301359067ffffffffffffffff8211610403576103f78161040093860161035b565b93604001610398565b90565b6101af565b6101af565b6100fc565b5f0190565b346104465761043061042a3660046103a7565b91610dee565b6104386100f2565b8061044281610412565b0390f35b6100f8565b610454906101ed565b9052565b919061046b905f6020850194019061044b565b565b3461049d5761047d366004610100565b610499610488610e7c565b6104906100f2565b91829182610458565b0390f35b6100f8565b90916060828403126104d7576104d46104bd845f85016101de565b936104cb81602086016101de565b93604001610204565b90565b6100fc565b3461050d576105096104f86104f23660046104a2565b91610eb1565b6105006100f2565b91829182610252565b0390f35b6100f8565b61051b9061037e565b9052565b9190610532905f60208501940190610512565b565b3461056457610544366004610100565b61056061054f611017565b6105576100f2565b9182918261051f565b0390f35b6100f8565b90565b61057590610569565b9052565b919061058c905f6020850194019061056c565b565b346105be5761059e366004610100565b6105ba6105a9611055565b6105b16100f2565b91829182610579565b0390f35b6100f8565b906020828203126105dc576105d9915f016101de565b90565b6100fc565b346106115761060d6105fc6105f73660046105c3565b6110a3565b6106046100f2565b91829182610458565b0390f35b6100f8565b90565b61062d610628610632926101b3565b610616565b6101b3565b90565b61063e90610619565b90565b61064a90610635565b90565b9061065790610641565b5f5260205260405f2090565b1c90565b90565b61067a90600861067f9302610663565b610667565b90565b9061068d915461066a565b90565b6106a6906106a16008915f9261064d565b610682565b90565b346106d9576106d56106c46106bf3660046105c3565b610690565b6106cc6100f2565b91829182610458565b0390f35b6100f8565b3461070e576106ee366004610100565b61070a6106f96110c2565b6107016100f2565b91829182610162565b0390f35b6100f8565b346107445761074061072f610729366004610213565b906110d8565b6107376100f2565b91829182610252565b0390f35b6100f8565b61075281610569565b0361075957565b5f80fd5b9050359061076a82610749565b565b60e0818303126107d757610782825f83016101de565b9261079083602084016101de565b9261079e8160408501610204565b926107ac8260608301610204565b926107d46107bd8460808501610398565b936107cb8160a0860161075d565b9360c00161075d565b90565b6100fc565b34610811576107fb6107ef36600461076c565b9594909493919361141f565b6108036100f2565b8061080d81610412565b0390f35b6100f8565b919060408382031261083e578061083261083b925f86016101de565b936020016101de565b90565b6100fc565b346108745761087061085f610859366004610816565b90611602565b6108676100f2565b91829182610458565b0390f35b6100f8565b5f80fd5b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156108b6575b60208310146108b157565b610882565b91607f16916108a6565b60209181520190565b5f5260205f2090565b905f92918054906108ec6108e583610896565b80946108c0565b916001811690815f146109435750600114610907575b505050565b61091491929394506108c9565b915f925b81841061092b57505001905f8080610902565b60018160209295939554848601520191019290610918565b92949550505060ff19168252151560200201905f8080610902565b90610968916108d2565b90565b9061098b6109849261097b6100f2565b9384809261095e565b03836102b9565b565b6109969061096b565b90565b6109a161087d565b506109ab5f61098d565b90565b5f90565b906109bc90610641565b5f5260205260405f2090565b5f1b90565b906109d95f19916109c8565b9181191691161790565b6109f76109f26109fc926101ed565b610616565b6101ed565b90565b90565b90610a17610a12610a1e926109e3565b6109ff565b82546109cd565b9055565b90610a2b6109ae565b50610a4b81610a46610a3f600533906109b2565b859061064d565b610a02565b33919091610a97610a85610a7f7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610641565b93610641565b93610a8e6100f2565b91829182610458565b0390a3600190565b5f1c90565b60ff1690565b610ab6610abb91610a9f565b610aa4565b90565b610ac89054610aaa565b90565b5f7f414c52454144595f494e495449414c495a454400000000000000000000000000910152565b610aff6013602092610113565b610b0881610acb565b0190565b610b219060208101905f818303910152610af2565b90565b15610b2b57565b610b336100f2565b62461bcd60e51b815280610b4960048201610b0c565b0390fd5b601f602091010490565b1b90565b91906008610b76910291610b705f1984610b57565b92610b57565b9181191691161790565b9190610b96610b91610b9e936109e3565b6109ff565b908354610b5b565b9055565b5f90565b610bb891610bb2610ba2565b91610b80565b565b5b818110610bc6575050565b80610bd35f600193610ba6565b01610bbb565b9190601f8111610be9575b505050565b610bf5610c1a936108c9565b906020610c0184610b4d565b83019310610c22575b610c1390610b4d565b0190610bba565b5f8080610be4565b9150610c1381929050610c0a565b90610c40905f1990600802610663565b191690565b81610c4f91610c30565b906002021790565b90610c618161010f565b9067ffffffffffffffff8211610d2157610c8582610c7f8554610896565b85610bd9565b602090601f8311600114610cb957918091610ca8935f92610cad575b5050610c45565b90555b565b90915001515f80610ca1565b601f19831691610cc8856108c9565b925f5b818110610d0957509160029391856001969410610cef575b50505002019055610cab565b610cff910151601f841690610c30565b90555f8080610ce3565b91936020600181928787015181550195019201610ccb565b6102a5565b90610d3091610c57565b565b90610d3e60ff916109c8565b9181191691161790565b610d5c610d57610d619261037e565b610616565b61037e565b90565b90565b90610d7c610d77610d8392610d48565b610d64565b8254610d32565b9055565b610d9090610569565b90565b610d9c90610a9f565b90565b90610db4610daf610dbb92610d87565b610d93565b82546109cd565b9055565b610dc890610240565b90565b90565b90610de3610dde610dea92610dbf565b610dcb565b8254610d32565b9055565b610e299291610e1b610e2292610e15610e10610e0a6009610abe565b15610240565b610b24565b5f610d26565b6001610d26565b6002610d67565b610e3b610e3461162e565b6006610a02565b610e4d610e46611782565b6007610d9f565b610e5960016009610dce565b565b610e67610e6c91610a9f565b610667565b90565b610e799054610e5b565b90565b610e84610ba2565b50610e8f6003610e6f565b90565b90565b610ea9610ea4610eae92610e92565b610616565b6101ed565b90565b919091610ebc6109ae565b50610edb610ed6610ecf600584906109b2565b339061064d565b610e6f565b80610eff610ef9610ef4610eee5f610e95565b196101ed565b6101ed565b916101ed565b03610fbd575b50610f38610f27610f20610f1b6004859061064d565b610e6f565b84906118ea565b610f336004849061064d565b610a02565b610f6a610f59610f52610f4d6004879061064d565b610e6f565b84906119c4565b610f656004869061064d565b610a02565b919091610fb5610fa3610f9d7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610641565b93610641565b93610fac6100f2565b91829182610458565b0390a3600190565b610fcb610fe69184906118ea565b610fe1610fda600585906109b2565b339061064d565b610a02565b5f610f05565b5f90565b60ff1690565b61100261100791610a9f565b610ff0565b90565b6110149054610ff6565b90565b61101f610fec565b5061102a600261100a565b90565b5f90565b90565b61104061104591610a9f565b611031565b90565b6110529054611034565b90565b61105d61102d565b5061106661162e565b61108161107b6110766006610e6f565b6101ed565b916101ed565b145f14611096576110926007611048565b5b90565b61109e611782565b611093565b6110ba6110bf916110b2610ba2565b50600461064d565b610e6f565b90565b6110ca61087d565b506110d5600161098d565b90565b906110e16109ae565b506111146111036110fc6110f76004339061064d565b610e6f565b83906118ea565b61110f6004339061064d565b610a02565b61114661113561112e6111296004869061064d565b610e6f565b83906119c4565b6111416004859061064d565b610a02565b3391909161119261118061117a7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610641565b93610641565b936111896100f2565b91829182610458565b0390a3600190565b5f7f5045524d49545f444541444c494e455f45585049524544000000000000000000910152565b6111ce6017602092610113565b6111d78161119a565b0190565b6111f09060208101905f8183039101526111c1565b90565b156111fa57565b6112026100f2565b62461bcd60e51b815280611218600482016111db565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b611239906101ed565b5f1981146112475760010190565b61121c565b611255906101be565b9052565b91946112a16112ab9298979561129760a09661128d6112b29a61128360c08a019e5f8b019061056c565b602089019061124c565b604087019061124c565b606085019061044b565b608083019061044b565b019061044b565b565b60200190565b5190565b905090565b5f61190160f01b910152565b6112db600280926112be565b6112e4816112c3565b0190565b90565b6112f76112fc91610569565b6112e8565b9052565b602080939261131b611314611323946112cf565b80926112eb565b0180926112eb565b0190565b61135c61136394611352606094989795611348608086019a5f87019061056c565b6020850190610512565b604083019061056c565b019061056c565b565b61136d6100f2565b3d5f823e3d90fd5b61138961138461138e92610e92565b610616565b6101b3565b90565b61139a90611375565b90565b5f7f494e56414c49445f5349474e4552000000000000000000000000000000000000910152565b6113d1600e602092610113565b6113da8161139d565b0190565b6113f39060208101905f8183039101526113c4565b90565b156113fd57565b6114056100f2565b62461bcd60e51b81528061141b600482016113de565b0390fd5b9361152c5f939692976020956114488161144161143b426101ed565b916101ed565b10156111f3565b6115068a6114ce8a6114c08d61145c611055565b967f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c99361148d81979391600861064d565b6114a961149982610e6f565b916114a383611230565b90610a02565b91926114b36100f2565b9760209689978801611259565b8b82018103825203826102b9565b6114e06114da826112ba565b916112b4565b20916114f86114ed6100f2565b9384928b8401611300565b8982018103825203826102b9565b611518611512826112ba565b916112b4565b2092936115236100f2565b94859485611327565b838052039060015afa156115fd5761158e6115475f516109c8565b8061156261155c6115575f611391565b6101be565b916101be565b1415806115de575b611573906113f6565b611589611582859260056109b2565b869061064d565b610a02565b9190916115d96115c76115c17f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610641565b93610641565b936115d06100f2565b91829182610458565b0390a3565b50611573816115f56115ef866101be565b916101be565b14905061156a565b611365565b6116279161161d61162292611615610ba2565b5060056109b2565b61064d565b610e6f565b90565b5f90565b611636610ba2565b5061164a600161164461162a565b50611a1a565b90565b90565b60209181520190565b5f5260205f2090565b905f929180549061167c61167583610896565b8094611650565b916001811690815f146116d35750600114611697575b505050565b6116a49192939450611659565b915f925b8184106116bb57505001905f8080611692565b600181602092959395548486015201910192906116a8565b92949550505060ff19168252151560200201905f8080611692565b906116f891611662565b90565b9061171b6117149261170b6100f2565b938480926116ee565b03836102b9565b565b611726906116fb565b90565b61173290610635565b90565b909594926117809461176f6117799261176560809661175b60a088019c5f89019061056c565b602087019061056c565b604085019061056c565b606083019061044b565b019061124c565b565b61178a61102d565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61182d6117c06117bb5f61164d565b61171d565b6117d26117cc826112ba565b916112b4565b209161181e7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661180061162e565b61180930611729565b916118126100f2565b96879560208701611735565b602082018103825203826102b9565b61183f611839826112ba565b916112b4565b2090565b5f7f45524332303a207375627472616374696f6e20756e646572666c6f7700000000910152565b611877601c602092610113565b61188081611843565b0190565b6118999060208101905f81830391015261186a565b90565b156118a357565b6118ab6100f2565b62461bcd60e51b8152806118c160048201611884565b0390fd5b6118d46118da919392936101ed565b926101ed565b82039182116118e557565b61121c565b9061191a916118f7610ba2565b506119158161190e611908856101ed565b916101ed565b101561189c565b6118c5565b90565b61192c611932919392936101ed565b926101ed565b820180921161193d57565b61121c565b5f7f45524332303a206164646974696f6e206f766572666c6f770000000000000000910152565b6119766018602092610113565b61197f81611942565b0190565b6119989060208101905f818303910152611969565b90565b156119a257565b6119aa6100f2565b62461bcd60e51b8152806119c060048201611983565b0390fd5b906119db6119f6916119d4610ba2565b508361191d565b916119ef6119e984926101ed565b916101ed565b101561199b565b90565b611a01610ba2565b504690565b634e487b7160e01b5f52605160045260245ffd5b600103611a0657611a296119f9565b9056fea26469706673582212209d77e0df215cd249c4ce470f6ccec1aa34f4f4ece053fb42838fd32b7a5eb95e64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08yV[a\0\x1D_5a\0\xECV[\x80c\x06\xFD\xDE\x03\x14a\0\xE7W\x80c\t^\xA7\xB3\x14a\0\xE2W\x80c\x16$\xF6\xC6\x14a\0\xDDW\x80c\x18\x16\r\xDD\x14a\0\xD8W\x80c#\xB8r\xDD\x14a\0\xD3W\x80c1<\xE5g\x14a\0\xCEW\x80c6D\xE5\x15\x14a\0\xC9W\x80cp\xA0\x821\x14a\0\xC4W\x80c~\xCE\xBE\0\x14a\0\xBFW\x80c\x95\xD8\x9BA\x14a\0\xBAW\x80c\xA9\x05\x9C\xBB\x14a\0\xB5W\x80c\xD5\x05\xAC\xCF\x14a\0\xB0Wc\xDDb\xED>\x03a\0\x0EWa\x08CV[a\x07\xDCV[a\x07\x13V[a\x06\xDEV[a\x06\xA9V[a\x05\xE1V[a\x05\x8EV[a\x054V[a\x04\xDCV[a\x04mV[a\x04\x17V[a\x02gV[a\x01zV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\nWV[a\0\xFCV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01Pa\x01Y` \x93a\x01^\x93a\x01G\x81a\x01\x0FV[\x93\x84\x80\x93a\x01\x13V[\x95\x86\x91\x01a\x01\x1CV[a\x01'V[\x01\x90V[a\x01w\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x011V[\x90V[4a\x01\xAAWa\x01\x8A6`\x04a\x01\0V[a\x01\xA6a\x01\x95a\t\x99V[a\x01\x9Da\0\xF2V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC7\x90a\x01\xB3V[\x90V[a\x01\xD3\x81a\x01\xBEV[\x03a\x01\xDAWV[_\x80\xFD[\x90P5\x90a\x01\xEB\x82a\x01\xCAV[V[\x90V[a\x01\xF9\x81a\x01\xEDV[\x03a\x02\0WV[_\x80\xFD[\x90P5\x90a\x02\x11\x82a\x01\xF0V[V[\x91\x90`@\x83\x82\x03\x12a\x02;W\x80a\x02/a\x028\x92_\x86\x01a\x01\xDEV[\x93` \x01a\x02\x04V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x02N\x90a\x02@V[\x90RV[\x91\x90a\x02e\x90_` \x85\x01\x94\x01\x90a\x02EV[V[4a\x02\x98Wa\x02\x94a\x02\x83a\x02}6`\x04a\x02\x13V[\x90a\n\"V[a\x02\x8Ba\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\xC3\x90a\x01'V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02\xDDW`@RV[a\x02\xA5V[\x90a\x02\xF5a\x02\xEEa\0\xF2V[\x92\x83a\x02\xB9V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x15Wa\x03\x11` \x91a\x01'V[\x01\x90V[a\x02\xA5V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x03:a\x035\x82a\x02\xF7V[a\x02\xE2V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x03VWa\x03T\x92a\x03\x1AV[V[a\x02\xA1V[\x90\x80`\x1F\x83\x01\x12\x15a\x03yW\x81` a\x03v\x935\x91\x01a\x03%V[\x90V[a\x02\x9DV[`\xFF\x16\x90V[a\x03\x8D\x81a\x03~V[\x03a\x03\x94WV[_\x80\xFD[\x90P5\x90a\x03\xA5\x82a\x03\x84V[V[\x90\x91``\x82\x84\x03\x12a\x04\rW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x08W\x83a\x03\xD2\x91\x84\x01a\x03[V[\x92` \x83\x015\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x04\x03Wa\x03\xF7\x81a\x04\0\x93\x86\x01a\x03[V[\x93`@\x01a\x03\x98V[\x90V[a\x01\xAFV[a\x01\xAFV[a\0\xFCV[_\x01\x90V[4a\x04FWa\x040a\x04*6`\x04a\x03\xA7V[\x91a\r\xEEV[a\x048a\0\xF2V[\x80a\x04B\x81a\x04\x12V[\x03\x90\xF3[a\0\xF8V[a\x04T\x90a\x01\xEDV[\x90RV[\x91\x90a\x04k\x90_` \x85\x01\x94\x01\x90a\x04KV[V[4a\x04\x9DWa\x04}6`\x04a\x01\0V[a\x04\x99a\x04\x88a\x0E|V[a\x04\x90a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[\x90\x91``\x82\x84\x03\x12a\x04\xD7Wa\x04\xD4a\x04\xBD\x84_\x85\x01a\x01\xDEV[\x93a\x04\xCB\x81` \x86\x01a\x01\xDEV[\x93`@\x01a\x02\x04V[\x90V[a\0\xFCV[4a\x05\rWa\x05\ta\x04\xF8a\x04\xF26`\x04a\x04\xA2V[\x91a\x0E\xB1V[a\x05\0a\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[a\x05\x1B\x90a\x03~V[\x90RV[\x91\x90a\x052\x90_` \x85\x01\x94\x01\x90a\x05\x12V[V[4a\x05dWa\x05D6`\x04a\x01\0V[a\x05`a\x05Oa\x10\x17V[a\x05Wa\0\xF2V[\x91\x82\x91\x82a\x05\x1FV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x05u\x90a\x05iV[\x90RV[\x91\x90a\x05\x8C\x90_` \x85\x01\x94\x01\x90a\x05lV[V[4a\x05\xBEWa\x05\x9E6`\x04a\x01\0V[a\x05\xBAa\x05\xA9a\x10UV[a\x05\xB1a\0\xF2V[\x91\x82\x91\x82a\x05yV[\x03\x90\xF3[a\0\xF8V[\x90` \x82\x82\x03\x12a\x05\xDCWa\x05\xD9\x91_\x01a\x01\xDEV[\x90V[a\0\xFCV[4a\x06\x11Wa\x06\ra\x05\xFCa\x05\xF76`\x04a\x05\xC3V[a\x10\xA3V[a\x06\x04a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x06-a\x06(a\x062\x92a\x01\xB3V[a\x06\x16V[a\x01\xB3V[\x90V[a\x06>\x90a\x06\x19V[\x90V[a\x06J\x90a\x065V[\x90V[\x90a\x06W\x90a\x06AV[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x06z\x90`\x08a\x06\x7F\x93\x02a\x06cV[a\x06gV[\x90V[\x90a\x06\x8D\x91Ta\x06jV[\x90V[a\x06\xA6\x90a\x06\xA1`\x08\x91_\x92a\x06MV[a\x06\x82V[\x90V[4a\x06\xD9Wa\x06\xD5a\x06\xC4a\x06\xBF6`\x04a\x05\xC3V[a\x06\x90V[a\x06\xCCa\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[4a\x07\x0EWa\x06\xEE6`\x04a\x01\0V[a\x07\na\x06\xF9a\x10\xC2V[a\x07\x01a\0\xF2V[\x91\x82\x91\x82a\x01bV[\x03\x90\xF3[a\0\xF8V[4a\x07DWa\x07@a\x07/a\x07)6`\x04a\x02\x13V[\x90a\x10\xD8V[a\x077a\0\xF2V[\x91\x82\x91\x82a\x02RV[\x03\x90\xF3[a\0\xF8V[a\x07R\x81a\x05iV[\x03a\x07YWV[_\x80\xFD[\x90P5\x90a\x07j\x82a\x07IV[V[`\xE0\x81\x83\x03\x12a\x07\xD7Wa\x07\x82\x82_\x83\x01a\x01\xDEV[\x92a\x07\x90\x83` \x84\x01a\x01\xDEV[\x92a\x07\x9E\x81`@\x85\x01a\x02\x04V[\x92a\x07\xAC\x82``\x83\x01a\x02\x04V[\x92a\x07\xD4a\x07\xBD\x84`\x80\x85\x01a\x03\x98V[\x93a\x07\xCB\x81`\xA0\x86\x01a\x07]V[\x93`\xC0\x01a\x07]V[\x90V[a\0\xFCV[4a\x08\x11Wa\x07\xFBa\x07\xEF6`\x04a\x07lV[\x95\x94\x90\x94\x93\x91\x93a\x14\x1FV[a\x08\x03a\0\xF2V[\x80a\x08\r\x81a\x04\x12V[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x08>W\x80a\x082a\x08;\x92_\x86\x01a\x01\xDEV[\x93` \x01a\x01\xDEV[\x90V[a\0\xFCV[4a\x08tWa\x08pa\x08_a\x08Y6`\x04a\x08\x16V[\x90a\x16\x02V[a\x08ga\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x08\xB6W[` \x83\x10\x14a\x08\xB1WV[a\x08\x82V[\x91`\x7F\x16\x91a\x08\xA6V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x08\xECa\x08\xE5\x83a\x08\x96V[\x80\x94a\x08\xC0V[\x91`\x01\x81\x16\x90\x81_\x14a\tCWP`\x01\x14a\t\x07W[PPPV[a\t\x14\x91\x92\x93\x94Pa\x08\xC9V[\x91_\x92[\x81\x84\x10a\t+WPP\x01\x90_\x80\x80a\t\x02V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\t\x18V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\t\x02V[\x90a\th\x91a\x08\xD2V[\x90V[\x90a\t\x8Ba\t\x84\x92a\t{a\0\xF2V[\x93\x84\x80\x92a\t^V[\x03\x83a\x02\xB9V[V[a\t\x96\x90a\tkV[\x90V[a\t\xA1a\x08}V[Pa\t\xAB_a\t\x8DV[\x90V[_\x90V[\x90a\t\xBC\x90a\x06AV[_R` R`@_ \x90V[_\x1B\x90V[\x90a\t\xD9_\x19\x91a\t\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t\xF7a\t\xF2a\t\xFC\x92a\x01\xEDV[a\x06\x16V[a\x01\xEDV[\x90V[\x90V[\x90a\n\x17a\n\x12a\n\x1E\x92a\t\xE3V[a\t\xFFV[\x82Ta\t\xCDV[\x90UV[\x90a\n+a\t\xAEV[Pa\nK\x81a\nFa\n?`\x053\x90a\t\xB2V[\x85\x90a\x06MV[a\n\x02V[3\x91\x90\x91a\n\x97a\n\x85a\n\x7F\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06AV[\x93a\x06AV[\x93a\n\x8Ea\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\n\xB6a\n\xBB\x91a\n\x9FV[a\n\xA4V[\x90V[a\n\xC8\x90Ta\n\xAAV[\x90V[_\x7FALREADY_INITIALIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\n\xFF`\x13` \x92a\x01\x13V[a\x0B\x08\x81a\n\xCBV[\x01\x90V[a\x0B!\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\n\xF2V[\x90V[\x15a\x0B+WV[a\x0B3a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0BI`\x04\x82\x01a\x0B\x0CV[\x03\x90\xFD[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0Bv\x91\x02\x91a\x0Bp_\x19\x84a\x0BWV[\x92a\x0BWV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0B\x96a\x0B\x91a\x0B\x9E\x93a\t\xE3V[a\t\xFFV[\x90\x83Ta\x0B[V[\x90UV[_\x90V[a\x0B\xB8\x91a\x0B\xB2a\x0B\xA2V[\x91a\x0B\x80V[V[[\x81\x81\x10a\x0B\xC6WPPV[\x80a\x0B\xD3_`\x01\x93a\x0B\xA6V[\x01a\x0B\xBBV[\x91\x90`\x1F\x81\x11a\x0B\xE9W[PPPV[a\x0B\xF5a\x0C\x1A\x93a\x08\xC9V[\x90` a\x0C\x01\x84a\x0BMV[\x83\x01\x93\x10a\x0C\"W[a\x0C\x13\x90a\x0BMV[\x01\x90a\x0B\xBAV[_\x80\x80a\x0B\xE4V[\x91Pa\x0C\x13\x81\x92\x90Pa\x0C\nV[\x90a\x0C@\x90_\x19\x90`\x08\x02a\x06cV[\x19\x16\x90V[\x81a\x0CO\x91a\x0C0V[\x90`\x02\x02\x17\x90V[\x90a\x0Ca\x81a\x01\x0FV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r!Wa\x0C\x85\x82a\x0C\x7F\x85Ta\x08\x96V[\x85a\x0B\xD9V[` \x90`\x1F\x83\x11`\x01\x14a\x0C\xB9W\x91\x80\x91a\x0C\xA8\x93_\x92a\x0C\xADW[PPa\x0CEV[\x90U[V[\x90\x91P\x01Q_\x80a\x0C\xA1V[`\x1F\x19\x83\x16\x91a\x0C\xC8\x85a\x08\xC9V[\x92_[\x81\x81\x10a\r\tWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0C\xEFW[PPP\x02\x01\x90Ua\x0C\xABV[a\x0C\xFF\x91\x01Q`\x1F\x84\x16\x90a\x0C0V[\x90U_\x80\x80a\x0C\xE3V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x0C\xCBV[a\x02\xA5V[\x90a\r0\x91a\x0CWV[V[\x90a\r>`\xFF\x91a\t\xC8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\\a\rWa\ra\x92a\x03~V[a\x06\x16V[a\x03~V[\x90V[\x90V[\x90a\r|a\rwa\r\x83\x92a\rHV[a\rdV[\x82Ta\r2V[\x90UV[a\r\x90\x90a\x05iV[\x90V[a\r\x9C\x90a\n\x9FV[\x90V[\x90a\r\xB4a\r\xAFa\r\xBB\x92a\r\x87V[a\r\x93V[\x82Ta\t\xCDV[\x90UV[a\r\xC8\x90a\x02@V[\x90V[\x90V[\x90a\r\xE3a\r\xDEa\r\xEA\x92a\r\xBFV[a\r\xCBV[\x82Ta\r2V[\x90UV[a\x0E)\x92\x91a\x0E\x1Ba\x0E\"\x92a\x0E\x15a\x0E\x10a\x0E\n`\ta\n\xBEV[\x15a\x02@V[a\x0B$V[_a\r&V[`\x01a\r&V[`\x02a\rgV[a\x0E;a\x0E4a\x16.V[`\x06a\n\x02V[a\x0EMa\x0EFa\x17\x82V[`\x07a\r\x9FV[a\x0EY`\x01`\ta\r\xCEV[V[a\x0Ega\x0El\x91a\n\x9FV[a\x06gV[\x90V[a\x0Ey\x90Ta\x0E[V[\x90V[a\x0E\x84a\x0B\xA2V[Pa\x0E\x8F`\x03a\x0EoV[\x90V[\x90V[a\x0E\xA9a\x0E\xA4a\x0E\xAE\x92a\x0E\x92V[a\x06\x16V[a\x01\xEDV[\x90V[\x91\x90\x91a\x0E\xBCa\t\xAEV[Pa\x0E\xDBa\x0E\xD6a\x0E\xCF`\x05\x84\x90a\t\xB2V[3\x90a\x06MV[a\x0EoV[\x80a\x0E\xFFa\x0E\xF9a\x0E\xF4a\x0E\xEE_a\x0E\x95V[\x19a\x01\xEDV[a\x01\xEDV[\x91a\x01\xEDV[\x03a\x0F\xBDW[Pa\x0F8a\x0F'a\x0F a\x0F\x1B`\x04\x85\x90a\x06MV[a\x0EoV[\x84\x90a\x18\xEAV[a\x0F3`\x04\x84\x90a\x06MV[a\n\x02V[a\x0Fja\x0FYa\x0FRa\x0FM`\x04\x87\x90a\x06MV[a\x0EoV[\x84\x90a\x19\xC4V[a\x0Fe`\x04\x86\x90a\x06MV[a\n\x02V[\x91\x90\x91a\x0F\xB5a\x0F\xA3a\x0F\x9D\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06AV[\x93a\x06AV[\x93a\x0F\xACa\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[a\x0F\xCBa\x0F\xE6\x91\x84\x90a\x18\xEAV[a\x0F\xE1a\x0F\xDA`\x05\x85\x90a\t\xB2V[3\x90a\x06MV[a\n\x02V[_a\x0F\x05V[_\x90V[`\xFF\x16\x90V[a\x10\x02a\x10\x07\x91a\n\x9FV[a\x0F\xF0V[\x90V[a\x10\x14\x90Ta\x0F\xF6V[\x90V[a\x10\x1Fa\x0F\xECV[Pa\x10*`\x02a\x10\nV[\x90V[_\x90V[\x90V[a\x10@a\x10E\x91a\n\x9FV[a\x101V[\x90V[a\x10R\x90Ta\x104V[\x90V[a\x10]a\x10-V[Pa\x10fa\x16.V[a\x10\x81a\x10{a\x10v`\x06a\x0EoV[a\x01\xEDV[\x91a\x01\xEDV[\x14_\x14a\x10\x96Wa\x10\x92`\x07a\x10HV[[\x90V[a\x10\x9Ea\x17\x82V[a\x10\x93V[a\x10\xBAa\x10\xBF\x91a\x10\xB2a\x0B\xA2V[P`\x04a\x06MV[a\x0EoV[\x90V[a\x10\xCAa\x08}V[Pa\x10\xD5`\x01a\t\x8DV[\x90V[\x90a\x10\xE1a\t\xAEV[Pa\x11\x14a\x11\x03a\x10\xFCa\x10\xF7`\x043\x90a\x06MV[a\x0EoV[\x83\x90a\x18\xEAV[a\x11\x0F`\x043\x90a\x06MV[a\n\x02V[a\x11Fa\x115a\x11.a\x11)`\x04\x86\x90a\x06MV[a\x0EoV[\x83\x90a\x19\xC4V[a\x11A`\x04\x85\x90a\x06MV[a\n\x02V[3\x91\x90\x91a\x11\x92a\x11\x80a\x11z\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06AV[\x93a\x06AV[\x93a\x11\x89a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3`\x01\x90V[_\x7FPERMIT_DEADLINE_EXPIRED\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\xCE`\x17` \x92a\x01\x13V[a\x11\xD7\x81a\x11\x9AV[\x01\x90V[a\x11\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xC1V[\x90V[\x15a\x11\xFAWV[a\x12\x02a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x18`\x04\x82\x01a\x11\xDBV[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x129\x90a\x01\xEDV[_\x19\x81\x14a\x12GW`\x01\x01\x90V[a\x12\x1CV[a\x12U\x90a\x01\xBEV[\x90RV[\x91\x94a\x12\xA1a\x12\xAB\x92\x98\x97\x95a\x12\x97`\xA0\x96a\x12\x8Da\x12\xB2\x9Aa\x12\x83`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x05lV[` \x89\x01\x90a\x12LV[`@\x87\x01\x90a\x12LV[``\x85\x01\x90a\x04KV[`\x80\x83\x01\x90a\x04KV[\x01\x90a\x04KV[V[` \x01\x90V[Q\x90V[\x90P\x90V[_a\x19\x01`\xF0\x1B\x91\x01RV[a\x12\xDB`\x02\x80\x92a\x12\xBEV[a\x12\xE4\x81a\x12\xC3V[\x01\x90V[\x90V[a\x12\xF7a\x12\xFC\x91a\x05iV[a\x12\xE8V[\x90RV[` \x80\x93\x92a\x13\x1Ba\x13\x14a\x13#\x94a\x12\xCFV[\x80\x92a\x12\xEBV[\x01\x80\x92a\x12\xEBV[\x01\x90V[a\x13\\a\x13c\x94a\x13R``\x94\x98\x97\x95a\x13H`\x80\x86\x01\x9A_\x87\x01\x90a\x05lV[` \x85\x01\x90a\x05\x12V[`@\x83\x01\x90a\x05lV[\x01\x90a\x05lV[V[a\x13ma\0\xF2V[=_\x82>=\x90\xFD[a\x13\x89a\x13\x84a\x13\x8E\x92a\x0E\x92V[a\x06\x16V[a\x01\xB3V[\x90V[a\x13\x9A\x90a\x13uV[\x90V[_\x7FINVALID_SIGNER\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\xD1`\x0E` \x92a\x01\x13V[a\x13\xDA\x81a\x13\x9DV[\x01\x90V[a\x13\xF3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\xC4V[\x90V[\x15a\x13\xFDWV[a\x14\x05a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14\x1B`\x04\x82\x01a\x13\xDEV[\x03\x90\xFD[\x93a\x15,_\x93\x96\x92\x97` \x95a\x14H\x81a\x14Aa\x14;Ba\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x11\xF3V[a\x15\x06\x8Aa\x14\xCE\x8Aa\x14\xC0\x8Da\x14\\a\x10UV[\x96\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x93a\x14\x8D\x81\x97\x93\x91`\x08a\x06MV[a\x14\xA9a\x14\x99\x82a\x0EoV[\x91a\x14\xA3\x83a\x120V[\x90a\n\x02V[\x91\x92a\x14\xB3a\0\xF2V[\x97` \x96\x89\x97\x88\x01a\x12YV[\x8B\x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x14\xE0a\x14\xDA\x82a\x12\xBAV[\x91a\x12\xB4V[ \x91a\x14\xF8a\x14\xEDa\0\xF2V[\x93\x84\x92\x8B\x84\x01a\x13\0V[\x89\x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x15\x18a\x15\x12\x82a\x12\xBAV[\x91a\x12\xB4V[ \x92\x93a\x15#a\0\xF2V[\x94\x85\x94\x85a\x13'V[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x15\xFDWa\x15\x8Ea\x15G_Qa\t\xC8V[\x80a\x15ba\x15\\a\x15W_a\x13\x91V[a\x01\xBEV[\x91a\x01\xBEV[\x14\x15\x80a\x15\xDEW[a\x15s\x90a\x13\xF6V[a\x15\x89a\x15\x82\x85\x92`\x05a\t\xB2V[\x86\x90a\x06MV[a\n\x02V[\x91\x90\x91a\x15\xD9a\x15\xC7a\x15\xC1\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06AV[\x93a\x06AV[\x93a\x15\xD0a\0\xF2V[\x91\x82\x91\x82a\x04XV[\x03\x90\xA3V[Pa\x15s\x81a\x15\xF5a\x15\xEF\x86a\x01\xBEV[\x91a\x01\xBEV[\x14\x90Pa\x15jV[a\x13eV[a\x16'\x91a\x16\x1Da\x16\"\x92a\x16\x15a\x0B\xA2V[P`\x05a\t\xB2V[a\x06MV[a\x0EoV[\x90V[_\x90V[a\x166a\x0B\xA2V[Pa\x16J`\x01a\x16Da\x16*V[Pa\x1A\x1AV[\x90V[\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x16|a\x16u\x83a\x08\x96V[\x80\x94a\x16PV[\x91`\x01\x81\x16\x90\x81_\x14a\x16\xD3WP`\x01\x14a\x16\x97W[PPPV[a\x16\xA4\x91\x92\x93\x94Pa\x16YV[\x91_\x92[\x81\x84\x10a\x16\xBBWPP\x01\x90_\x80\x80a\x16\x92V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x16\xA8V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x16\x92V[\x90a\x16\xF8\x91a\x16bV[\x90V[\x90a\x17\x1Ba\x17\x14\x92a\x17\x0Ba\0\xF2V[\x93\x84\x80\x92a\x16\xEEV[\x03\x83a\x02\xB9V[V[a\x17&\x90a\x16\xFBV[\x90V[a\x172\x90a\x065V[\x90V[\x90\x95\x94\x92a\x17\x80\x94a\x17oa\x17y\x92a\x17e`\x80\x96a\x17[`\xA0\x88\x01\x9C_\x89\x01\x90a\x05lV[` \x87\x01\x90a\x05lV[`@\x85\x01\x90a\x05lV[``\x83\x01\x90a\x04KV[\x01\x90a\x12LV[V[a\x17\x8Aa\x10-V[P\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0Fa\x18-a\x17\xC0a\x17\xBB_a\x16MV[a\x17\x1DV[a\x17\xD2a\x17\xCC\x82a\x12\xBAV[\x91a\x12\xB4V[ \x91a\x18\x1E\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6a\x18\0a\x16.V[a\x18\t0a\x17)V[\x91a\x18\x12a\0\xF2V[\x96\x87\x95` \x87\x01a\x175V[` \x82\x01\x81\x03\x82R\x03\x82a\x02\xB9V[a\x18?a\x189\x82a\x12\xBAV[\x91a\x12\xB4V[ \x90V[_\x7FERC20: subtraction underflow\0\0\0\0\x91\x01RV[a\x18w`\x1C` \x92a\x01\x13V[a\x18\x80\x81a\x18CV[\x01\x90V[a\x18\x99\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18jV[\x90V[\x15a\x18\xA3WV[a\x18\xABa\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\xC1`\x04\x82\x01a\x18\x84V[\x03\x90\xFD[a\x18\xD4a\x18\xDA\x91\x93\x92\x93a\x01\xEDV[\x92a\x01\xEDV[\x82\x03\x91\x82\x11a\x18\xE5WV[a\x12\x1CV[\x90a\x19\x1A\x91a\x18\xF7a\x0B\xA2V[Pa\x19\x15\x81a\x19\x0Ea\x19\x08\x85a\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x18\x9CV[a\x18\xC5V[\x90V[a\x19,a\x192\x91\x93\x92\x93a\x01\xEDV[\x92a\x01\xEDV[\x82\x01\x80\x92\x11a\x19=WV[a\x12\x1CV[_\x7FERC20: addition overflow\0\0\0\0\0\0\0\0\x91\x01RV[a\x19v`\x18` \x92a\x01\x13V[a\x19\x7F\x81a\x19BV[\x01\x90V[a\x19\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x19iV[\x90V[\x15a\x19\xA2WV[a\x19\xAAa\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x19\xC0`\x04\x82\x01a\x19\x83V[\x03\x90\xFD[\x90a\x19\xDBa\x19\xF6\x91a\x19\xD4a\x0B\xA2V[P\x83a\x19\x1DV[\x91a\x19\xEFa\x19\xE9\x84\x92a\x01\xEDV[\x91a\x01\xEDV[\x10\x15a\x19\x9BV[\x90V[a\x1A\x01a\x0B\xA2V[PF\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x1A\x06Wa\x1A)a\x19\xF9V[\x90V\xFE\xA2dipfsX\"\x12 \x9Dw\xE0\xDF!\\\xD2I\xC4\xCEG\x0Fl\xCE\xC1\xAA4\xF4\xF4\xEC\xE0S\xFBB\x83\x8F\xD3+z^\xB9^dsolcC\0\x08\x1A\x003",
    );
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`.
```solidity
function DOMAIN_SEPARATOR() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORCall {}
    ///Container type for the return parameters of the [`DOMAIN_SEPARATOR()`](DOMAIN_SEPARATORCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DOMAIN_SEPARATORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DOMAIN_SEPARATORReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DOMAIN_SEPARATOR()";
            const SELECTOR: [u8; 4] = [54u8, 68u8, 229u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address owner, address spender) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceCall {
        pub owner: alloy::sol_types::private::Address,
        pub spender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveCall {
        pub spender: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub owner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsCall {}
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        pub _0: u8,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(string,string,uint8)` and selector `0x1624f6c6`.
```solidity
function initialize(string memory name_, string memory symbol_, uint8 decimals_) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeCall {
        pub name_: alloy::sol_types::private::String,
        pub symbol_: alloy::sol_types::private::String,
        pub decimals_: u8,
    }
    ///Container type for the return parameters of the [`initialize(string,string,uint8)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.name_, value.symbol_, value.decimals_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name_: tuple.0,
                        symbol_: tuple.1,
                        decimals_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(string,string,uint8)";
            const SELECTOR: [u8; 4] = [22u8, 36u8, 246u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name_,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.symbol_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.decimals_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nonces(address)` and selector `0x7ecebe00`.
```solidity
function nonces(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct noncesCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`nonces(address)`](noncesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct noncesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesCall> for UnderlyingRustTuple<'_> {
                fn from(value: noncesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noncesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noncesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = noncesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonces(address)";
            const SELECTOR: [u8; 4] = [126u8, 206u8, 190u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permit(address,address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xd505accf`.
```solidity
function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permitCall {
        pub owner: alloy::sol_types::private::Address,
        pub spender: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        pub v: u8,
        pub r: alloy::sol_types::private::FixedBytes<32>,
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`permit(address,address,uint256,uint256,uint8,bytes32,bytes32)`](permitCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permitReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitCall> for UnderlyingRustTuple<'_> {
                fn from(value: permitCall) -> Self {
                    (
                        value.owner,
                        value.spender,
                        value.value,
                        value.deadline,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        value: tuple.2,
                        deadline: tuple.3,
                        v: tuple.4,
                        r: tuple.5,
                        s: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: permitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [213u8, 5u8, 172u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferCall {
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockERC20`](self) function calls.
    pub enum MockERC20Calls {
        DOMAIN_SEPARATOR(DOMAIN_SEPARATORCall),
        allowance(allowanceCall),
        approve(approveCall),
        balanceOf(balanceOfCall),
        decimals(decimalsCall),
        initialize(initializeCall),
        name(nameCall),
        nonces(noncesCall),
        permit(permitCall),
        symbol(symbolCall),
        totalSupply(totalSupplyCall),
        transfer(transferCall),
        transferFrom(transferFromCall),
    }
    #[automatically_derived]
    impl MockERC20Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [22u8, 36u8, 246u8, 198u8],
            [24u8, 22u8, 13u8, 221u8],
            [35u8, 184u8, 114u8, 221u8],
            [49u8, 60u8, 229u8, 103u8],
            [54u8, 68u8, 229u8, 21u8],
            [112u8, 160u8, 130u8, 49u8],
            [126u8, 206u8, 190u8, 0u8],
            [149u8, 216u8, 155u8, 65u8],
            [169u8, 5u8, 156u8, 187u8],
            [213u8, 5u8, 172u8, 207u8],
            [221u8, 98u8, 237u8, 62u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockERC20Calls {
        const NAME: &'static str = "MockERC20Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DOMAIN_SEPARATOR(_) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::nonces(_) => <noncesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permit(_) => <permitCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockERC20Calls>] = &[
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::approve)
                    }
                    approve
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::initialize)
                    }
                    initialize
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn decimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn nonces(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::nonces)
                    }
                    nonces
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::symbol)
                    }
                    symbol
                },
                {
                    fn transfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::transfer)
                    }
                    transfer
                },
                {
                    fn permit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::permit)
                    }
                    permit
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::allowance)
                    }
                    allowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockERC20`](self) events.
    pub enum MockERC20Events {
        Approval(Approval),
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl MockERC20Events {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MockERC20Events {
        const NAME: &'static str = "MockERC20Events";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MockERC20Events {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockERC20`](self) contract instance.

See the [wrapper's documentation](`MockERC20Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockERC20Instance<T, P, N> {
        MockERC20Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockERC20Instance<T, P, N>>,
    > {
        MockERC20Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockERC20Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockERC20`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockERC20`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockERC20Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockERC20Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockERC20Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockERC20`](self) contract instance.

See the [wrapper's documentation](`MockERC20Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockERC20Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockERC20Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockERC20Instance<T, P, N> {
            MockERC20Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DOMAIN_SEPARATOR`] function.
        pub fn DOMAIN_SEPARATOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DOMAIN_SEPARATORCall, N> {
            self.call_builder(&DOMAIN_SEPARATORCall {})
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, amount })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { owner })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, decimalsCall, N> {
            self.call_builder(&decimalsCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            name_: alloy::sol_types::private::String,
            symbol_: alloy::sol_types::private::String,
            decimals_: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    name_,
                    symbol_,
                    decimals_,
                },
            )
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`nonces`] function.
        pub fn nonces(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, noncesCall, N> {
            self.call_builder(&noncesCall { _0 })
        }
        ///Creates a new call builder for the [`permit`] function.
        pub fn permit(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, permitCall, N> {
            self.call_builder(
                &permitCall {
                    owner,
                    spender,
                    value,
                    deadline,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall { to, amount })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    amount,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
