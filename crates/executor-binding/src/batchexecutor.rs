/**

Generated by the following Solidity interface...
```solidity
interface BatchExecutor {
    constructor(address _owner);

    fallback() external payable;

    receive() external payable;

    function batchCall(bytes[] memory data) external payable;
    function singlecall(address target, uint256 value, bytes32 context, bytes memory callData) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "batchCall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "singlecall",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "context",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod BatchExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234801561000f575f80fd5b50604051610a53380380610a53833981810160405281019061003191906100c9565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100f4565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100988261006f565b9050919050565b6100a88161008e565b81146100b2575f80fd5b50565b5f815190506100c38161009f565b92915050565b5f602082840312156100de576100dd61006b565b5b5f6100eb848285016100b5565b91505092915050565b60805161094761010c5f395f6101d501526109475ff3fe60806040526004361061002c575f3560e01c806368be3cf2146100e2578063cec9ee3b146100fe57610033565b3661003357005b5f3660605f6100415f61011a565b9050805f1c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461007c575f80fd5b5f60a082901c5f1c905060608160200260040135600401803560405192508060200182843780602001830160405250506060818060200190518101906100c2919061055e565b80965081925050506100d381610124565b50505050915050805190602001f35b6100fc60048036038101906100f79190610703565b6101d3565b005b6101186004803603810190610113919061080a565b610236565b005b5f815c9050919050565b5f5b81518110156101cf575f803073ffffffffffffffffffffffffffffffffffffffff1684848151811061015b5761015a61088a565b5b602002602001015160405161017091906108fb565b5f604051808303815f865af19150503d805f81146101a9576040519150601f19603f3d011682016040523d82523d5f602084013e6101ae565b606091505b5091509150816101c2576101c181610311565b5b5050806001019050610126565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022a575f80fd5b61023381610124565b50565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026d575f80fd5b5f6102775f61011a565b90506102835f84610328565b5f808673ffffffffffffffffffffffffffffffffffffffff1686856040516102ab91906108fb565b5f6040518083038185875af1925050503d805f81146102e5576040519150601f19603f3d011682016040523d82523d5f602084013e6102ea565b606091505b5091509150816102fe576102fd81610311565b5b6103085f84610328565b50505050505050565b5f815190505f8111610321575f80fd5b8082602001fd5b80825d5050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61038a82610344565b810181811067ffffffffffffffff821117156103a9576103a8610354565b5b80604052505050565b5f6103bb61032f565b90506103c78282610381565b919050565b5f67ffffffffffffffff8211156103e6576103e5610354565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561041957610418610354565b5b61042282610344565b9050602081019050919050565b8281835e5f83830152505050565b5f61044f61044a846103ff565b6103b2565b90508281526020810184848401111561046b5761046a6103fb565b5b61047684828561042f565b509392505050565b5f82601f83011261049257610491610340565b5b81516104a284826020860161043d565b91505092915050565b5f6104bd6104b8846103cc565b6103b2565b905080838252602082019050602084028301858111156104e0576104df6103f7565b5b835b8181101561052757805167ffffffffffffffff81111561050557610504610340565b5b808601610512898261047e565b855260208501945050506020810190506104e2565b5050509392505050565b5f82601f83011261054557610544610340565b5b81516105558482602086016104ab565b91505092915050565b5f806040838503121561057457610573610338565b5b5f83015167ffffffffffffffff8111156105915761059061033c565b5b61059d85828601610531565b925050602083015167ffffffffffffffff8111156105be576105bd61033c565b5b6105ca8582860161047e565b9150509250929050565b828183375f83830152505050565b5f6105f46105ef846103ff565b6103b2565b9050828152602081018484840111156106105761060f6103fb565b5b61061b8482856105d4565b509392505050565b5f82601f83011261063757610636610340565b5b81356106478482602086016105e2565b91505092915050565b5f61066261065d846103cc565b6103b2565b90508083825260208201905060208402830185811115610685576106846103f7565b5b835b818110156106cc57803567ffffffffffffffff8111156106aa576106a9610340565b5b8086016106b78982610623565b85526020850194505050602081019050610687565b5050509392505050565b5f82601f8301126106ea576106e9610340565b5b81356106fa848260208601610650565b91505092915050565b5f6020828403121561071857610717610338565b5b5f82013567ffffffffffffffff8111156107355761073461033c565b5b610741848285016106d6565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107738261074a565b9050919050565b61078381610769565b811461078d575f80fd5b50565b5f8135905061079e8161077a565b92915050565b5f819050919050565b6107b6816107a4565b81146107c0575f80fd5b50565b5f813590506107d1816107ad565b92915050565b5f819050919050565b6107e9816107d7565b81146107f3575f80fd5b50565b5f81359050610804816107e0565b92915050565b5f805f806080858703121561082257610821610338565b5b5f61082f87828801610790565b9450506020610840878288016107c3565b9350506040610851878288016107f6565b925050606085013567ffffffffffffffff8111156108725761087161033c565b5b61087e87828801610623565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f6108d5826108b7565b6108df81856108c1565b93506108ef81856020860161042f565b80840191505092915050565b5f61090682846108cb565b91508190509291505056fea2646970667358221220d67b05be56348ebf16f3cb1dfaddcaf7d849f0778c882423d58f3c2151d4e43264736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\nS8\x03\x80a\nS\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\0\xC9V[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPa\0\xF4V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\x98\x82a\0oV[\x90P\x91\x90PV[a\0\xA8\x81a\0\x8EV[\x81\x14a\0\xB2W_\x80\xFD[PV[_\x81Q\x90Pa\0\xC3\x81a\0\x9FV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\0\xDEWa\0\xDDa\0kV[[_a\0\xEB\x84\x82\x85\x01a\0\xB5V[\x91PP\x92\x91PPV[`\x80Qa\tGa\x01\x0C_9_a\x01\xD5\x01Ra\tG_\xF3\xFE`\x80`@R`\x046\x10a\0,W_5`\xE0\x1C\x80ch\xBE<\xF2\x14a\0\xE2W\x80c\xCE\xC9\xEE;\x14a\0\xFEWa\x003V[6a\x003W\0[_6``_a\0A_a\x01\x1AV[\x90P\x80_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\0|W_\x80\xFD[_`\xA0\x82\x90\x1C_\x1C\x90P``\x81` \x02`\x04\x015`\x04\x01\x805`@Q\x92P\x80` \x01\x82\x847\x80` \x01\x83\x01`@RPP``\x81\x80` \x01\x90Q\x81\x01\x90a\0\xC2\x91\x90a\x05^V[\x80\x96P\x81\x92PPPa\0\xD3\x81a\x01$V[PPPP\x91PP\x80Q\x90` \x01\xF3[a\0\xFC`\x04\x806\x03\x81\x01\x90a\0\xF7\x91\x90a\x07\x03V[a\x01\xD3V[\0[a\x01\x18`\x04\x806\x03\x81\x01\x90a\x01\x13\x91\x90a\x08\nV[a\x026V[\0[_\x81\\\x90P\x91\x90PV[_[\x81Q\x81\x10\x15a\x01\xCFW_\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x01[Wa\x01Za\x08\x8AV[[` \x02` \x01\x01Q`@Qa\x01p\x91\x90a\x08\xFBV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x01\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xAEV[``\x91P[P\x91P\x91P\x81a\x01\xC2Wa\x01\xC1\x81a\x03\x11V[[PP\x80`\x01\x01\x90Pa\x01&V[PPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02*W_\x80\xFD[a\x023\x81a\x01$V[PV[0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02mW_\x80\xFD[_a\x02w_a\x01\x1AV[\x90Pa\x02\x83_\x84a\x03(V[_\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85`@Qa\x02\xAB\x91\x90a\x08\xFBV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x02\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xEAV[``\x91P[P\x91P\x91P\x81a\x02\xFEWa\x02\xFD\x81a\x03\x11V[[a\x03\x08_\x84a\x03(V[PPPPPPPV[_\x81Q\x90P_\x81\x11a\x03!W_\x80\xFD[\x80\x82` \x01\xFD[\x80\x82]PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x03\x8A\x82a\x03DV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x03\xA9Wa\x03\xA8a\x03TV[[\x80`@RPPPV[_a\x03\xBBa\x03/V[\x90Pa\x03\xC7\x82\x82a\x03\x81V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x03\xE6Wa\x03\xE5a\x03TV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x04\x19Wa\x04\x18a\x03TV[[a\x04\"\x82a\x03DV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x04Oa\x04J\x84a\x03\xFFV[a\x03\xB2V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x04kWa\x04ja\x03\xFBV[[a\x04v\x84\x82\x85a\x04/V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x04\x92Wa\x04\x91a\x03@V[[\x81Qa\x04\xA2\x84\x82` \x86\x01a\x04=V[\x91PP\x92\x91PPV[_a\x04\xBDa\x04\xB8\x84a\x03\xCCV[a\x03\xB2V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x04\xE0Wa\x04\xDFa\x03\xF7V[[\x83[\x81\x81\x10\x15a\x05'W\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x05Wa\x05\x04a\x03@V[[\x80\x86\x01a\x05\x12\x89\x82a\x04~V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x04\xE2V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x05EWa\x05Da\x03@V[[\x81Qa\x05U\x84\x82` \x86\x01a\x04\xABV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x05tWa\x05sa\x038V[[_\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x91Wa\x05\x90a\x03<V[[a\x05\x9D\x85\x82\x86\x01a\x051V[\x92PP` \x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xBEWa\x05\xBDa\x03<V[[a\x05\xCA\x85\x82\x86\x01a\x04~V[\x91PP\x92P\x92\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x05\xF4a\x05\xEF\x84a\x03\xFFV[a\x03\xB2V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x06\x10Wa\x06\x0Fa\x03\xFBV[[a\x06\x1B\x84\x82\x85a\x05\xD4V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x067Wa\x066a\x03@V[[\x815a\x06G\x84\x82` \x86\x01a\x05\xE2V[\x91PP\x92\x91PPV[_a\x06ba\x06]\x84a\x03\xCCV[a\x03\xB2V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\x85Wa\x06\x84a\x03\xF7V[[\x83[\x81\x81\x10\x15a\x06\xCCW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xAAWa\x06\xA9a\x03@V[[\x80\x86\x01a\x06\xB7\x89\x82a\x06#V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x06\x87V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xEAWa\x06\xE9a\x03@V[[\x815a\x06\xFA\x84\x82` \x86\x01a\x06PV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x07\x18Wa\x07\x17a\x038V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x075Wa\x074a\x03<V[[a\x07A\x84\x82\x85\x01a\x06\xD6V[\x91PP\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07s\x82a\x07JV[\x90P\x91\x90PV[a\x07\x83\x81a\x07iV[\x81\x14a\x07\x8DW_\x80\xFD[PV[_\x815\x90Pa\x07\x9E\x81a\x07zV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xB6\x81a\x07\xA4V[\x81\x14a\x07\xC0W_\x80\xFD[PV[_\x815\x90Pa\x07\xD1\x81a\x07\xADV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xE9\x81a\x07\xD7V[\x81\x14a\x07\xF3W_\x80\xFD[PV[_\x815\x90Pa\x08\x04\x81a\x07\xE0V[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x08\"Wa\x08!a\x038V[[_a\x08/\x87\x82\x88\x01a\x07\x90V[\x94PP` a\x08@\x87\x82\x88\x01a\x07\xC3V[\x93PP`@a\x08Q\x87\x82\x88\x01a\x07\xF6V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08rWa\x08qa\x03<V[[a\x08~\x87\x82\x88\x01a\x06#V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a\x08\xD5\x82a\x08\xB7V[a\x08\xDF\x81\x85a\x08\xC1V[\x93Pa\x08\xEF\x81\x85` \x86\x01a\x04/V[\x80\x84\x01\x91PP\x92\x91PPV[_a\t\x06\x82\x84a\x08\xCBV[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xD6{\x05\xBEV4\x8E\xBF\x16\xF3\xCB\x1D\xFA\xDD\xCA\xF7\xD8I\xF0w\x8C\x88$#\xD5\x8F<!Q\xD4\xE42dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061002c575f3560e01c806368be3cf2146100e2578063cec9ee3b146100fe57610033565b3661003357005b5f3660605f6100415f61011a565b9050805f1c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461007c575f80fd5b5f60a082901c5f1c905060608160200260040135600401803560405192508060200182843780602001830160405250506060818060200190518101906100c2919061055e565b80965081925050506100d381610124565b50505050915050805190602001f35b6100fc60048036038101906100f79190610703565b6101d3565b005b6101186004803603810190610113919061080a565b610236565b005b5f815c9050919050565b5f5b81518110156101cf575f803073ffffffffffffffffffffffffffffffffffffffff1684848151811061015b5761015a61088a565b5b602002602001015160405161017091906108fb565b5f604051808303815f865af19150503d805f81146101a9576040519150601f19603f3d011682016040523d82523d5f602084013e6101ae565b606091505b5091509150816101c2576101c181610311565b5b5050806001019050610126565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022a575f80fd5b61023381610124565b50565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026d575f80fd5b5f6102775f61011a565b90506102835f84610328565b5f808673ffffffffffffffffffffffffffffffffffffffff1686856040516102ab91906108fb565b5f6040518083038185875af1925050503d805f81146102e5576040519150601f19603f3d011682016040523d82523d5f602084013e6102ea565b606091505b5091509150816102fe576102fd81610311565b5b6103085f84610328565b50505050505050565b5f815190505f8111610321575f80fd5b8082602001fd5b80825d5050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61038a82610344565b810181811067ffffffffffffffff821117156103a9576103a8610354565b5b80604052505050565b5f6103bb61032f565b90506103c78282610381565b919050565b5f67ffffffffffffffff8211156103e6576103e5610354565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f67ffffffffffffffff82111561041957610418610354565b5b61042282610344565b9050602081019050919050565b8281835e5f83830152505050565b5f61044f61044a846103ff565b6103b2565b90508281526020810184848401111561046b5761046a6103fb565b5b61047684828561042f565b509392505050565b5f82601f83011261049257610491610340565b5b81516104a284826020860161043d565b91505092915050565b5f6104bd6104b8846103cc565b6103b2565b905080838252602082019050602084028301858111156104e0576104df6103f7565b5b835b8181101561052757805167ffffffffffffffff81111561050557610504610340565b5b808601610512898261047e565b855260208501945050506020810190506104e2565b5050509392505050565b5f82601f83011261054557610544610340565b5b81516105558482602086016104ab565b91505092915050565b5f806040838503121561057457610573610338565b5b5f83015167ffffffffffffffff8111156105915761059061033c565b5b61059d85828601610531565b925050602083015167ffffffffffffffff8111156105be576105bd61033c565b5b6105ca8582860161047e565b9150509250929050565b828183375f83830152505050565b5f6105f46105ef846103ff565b6103b2565b9050828152602081018484840111156106105761060f6103fb565b5b61061b8482856105d4565b509392505050565b5f82601f83011261063757610636610340565b5b81356106478482602086016105e2565b91505092915050565b5f61066261065d846103cc565b6103b2565b90508083825260208201905060208402830185811115610685576106846103f7565b5b835b818110156106cc57803567ffffffffffffffff8111156106aa576106a9610340565b5b8086016106b78982610623565b85526020850194505050602081019050610687565b5050509392505050565b5f82601f8301126106ea576106e9610340565b5b81356106fa848260208601610650565b91505092915050565b5f6020828403121561071857610717610338565b5b5f82013567ffffffffffffffff8111156107355761073461033c565b5b610741848285016106d6565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107738261074a565b9050919050565b61078381610769565b811461078d575f80fd5b50565b5f8135905061079e8161077a565b92915050565b5f819050919050565b6107b6816107a4565b81146107c0575f80fd5b50565b5f813590506107d1816107ad565b92915050565b5f819050919050565b6107e9816107d7565b81146107f3575f80fd5b50565b5f81359050610804816107e0565b92915050565b5f805f806080858703121561082257610821610338565b5b5f61082f87828801610790565b9450506020610840878288016107c3565b9350506040610851878288016107f6565b925050606085013567ffffffffffffffff8111156108725761087161033c565b5b61087e87828801610623565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f6108d5826108b7565b6108df81856108c1565b93506108ef81856020860161042f565b80840191505092915050565b5f61090682846108cb565b91508190509291505056fea2646970667358221220d67b05be56348ebf16f3cb1dfaddcaf7d849f0778c882423d58f3c2151d4e43264736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0,W_5`\xE0\x1C\x80ch\xBE<\xF2\x14a\0\xE2W\x80c\xCE\xC9\xEE;\x14a\0\xFEWa\x003V[6a\x003W\0[_6``_a\0A_a\x01\x1AV[\x90P\x80_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\0|W_\x80\xFD[_`\xA0\x82\x90\x1C_\x1C\x90P``\x81` \x02`\x04\x015`\x04\x01\x805`@Q\x92P\x80` \x01\x82\x847\x80` \x01\x83\x01`@RPP``\x81\x80` \x01\x90Q\x81\x01\x90a\0\xC2\x91\x90a\x05^V[\x80\x96P\x81\x92PPPa\0\xD3\x81a\x01$V[PPPP\x91PP\x80Q\x90` \x01\xF3[a\0\xFC`\x04\x806\x03\x81\x01\x90a\0\xF7\x91\x90a\x07\x03V[a\x01\xD3V[\0[a\x01\x18`\x04\x806\x03\x81\x01\x90a\x01\x13\x91\x90a\x08\nV[a\x026V[\0[_\x81\\\x90P\x91\x90PV[_[\x81Q\x81\x10\x15a\x01\xCFW_\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x01[Wa\x01Za\x08\x8AV[[` \x02` \x01\x01Q`@Qa\x01p\x91\x90a\x08\xFBV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x01\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xAEV[``\x91P[P\x91P\x91P\x81a\x01\xC2Wa\x01\xC1\x81a\x03\x11V[[PP\x80`\x01\x01\x90Pa\x01&V[PPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02*W_\x80\xFD[a\x023\x81a\x01$V[PV[0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02mW_\x80\xFD[_a\x02w_a\x01\x1AV[\x90Pa\x02\x83_\x84a\x03(V[_\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85`@Qa\x02\xAB\x91\x90a\x08\xFBV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x02\xE5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xEAV[``\x91P[P\x91P\x91P\x81a\x02\xFEWa\x02\xFD\x81a\x03\x11V[[a\x03\x08_\x84a\x03(V[PPPPPPPV[_\x81Q\x90P_\x81\x11a\x03!W_\x80\xFD[\x80\x82` \x01\xFD[\x80\x82]PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x03\x8A\x82a\x03DV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x03\xA9Wa\x03\xA8a\x03TV[[\x80`@RPPPV[_a\x03\xBBa\x03/V[\x90Pa\x03\xC7\x82\x82a\x03\x81V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x03\xE6Wa\x03\xE5a\x03TV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x04\x19Wa\x04\x18a\x03TV[[a\x04\"\x82a\x03DV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x04Oa\x04J\x84a\x03\xFFV[a\x03\xB2V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x04kWa\x04ja\x03\xFBV[[a\x04v\x84\x82\x85a\x04/V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x04\x92Wa\x04\x91a\x03@V[[\x81Qa\x04\xA2\x84\x82` \x86\x01a\x04=V[\x91PP\x92\x91PPV[_a\x04\xBDa\x04\xB8\x84a\x03\xCCV[a\x03\xB2V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x04\xE0Wa\x04\xDFa\x03\xF7V[[\x83[\x81\x81\x10\x15a\x05'W\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x05Wa\x05\x04a\x03@V[[\x80\x86\x01a\x05\x12\x89\x82a\x04~V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x04\xE2V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x05EWa\x05Da\x03@V[[\x81Qa\x05U\x84\x82` \x86\x01a\x04\xABV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x05tWa\x05sa\x038V[[_\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x91Wa\x05\x90a\x03<V[[a\x05\x9D\x85\x82\x86\x01a\x051V[\x92PP` \x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xBEWa\x05\xBDa\x03<V[[a\x05\xCA\x85\x82\x86\x01a\x04~V[\x91PP\x92P\x92\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x05\xF4a\x05\xEF\x84a\x03\xFFV[a\x03\xB2V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x06\x10Wa\x06\x0Fa\x03\xFBV[[a\x06\x1B\x84\x82\x85a\x05\xD4V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x067Wa\x066a\x03@V[[\x815a\x06G\x84\x82` \x86\x01a\x05\xE2V[\x91PP\x92\x91PPV[_a\x06ba\x06]\x84a\x03\xCCV[a\x03\xB2V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\x85Wa\x06\x84a\x03\xF7V[[\x83[\x81\x81\x10\x15a\x06\xCCW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xAAWa\x06\xA9a\x03@V[[\x80\x86\x01a\x06\xB7\x89\x82a\x06#V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x06\x87V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xEAWa\x06\xE9a\x03@V[[\x815a\x06\xFA\x84\x82` \x86\x01a\x06PV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x07\x18Wa\x07\x17a\x038V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x075Wa\x074a\x03<V[[a\x07A\x84\x82\x85\x01a\x06\xD6V[\x91PP\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07s\x82a\x07JV[\x90P\x91\x90PV[a\x07\x83\x81a\x07iV[\x81\x14a\x07\x8DW_\x80\xFD[PV[_\x815\x90Pa\x07\x9E\x81a\x07zV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xB6\x81a\x07\xA4V[\x81\x14a\x07\xC0W_\x80\xFD[PV[_\x815\x90Pa\x07\xD1\x81a\x07\xADV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xE9\x81a\x07\xD7V[\x81\x14a\x07\xF3W_\x80\xFD[PV[_\x815\x90Pa\x08\x04\x81a\x07\xE0V[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x08\"Wa\x08!a\x038V[[_a\x08/\x87\x82\x88\x01a\x07\x90V[\x94PP` a\x08@\x87\x82\x88\x01a\x07\xC3V[\x93PP`@a\x08Q\x87\x82\x88\x01a\x07\xF6V[\x92PP``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08rWa\x08qa\x03<V[[a\x08~\x87\x82\x88\x01a\x06#V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a\x08\xD5\x82a\x08\xB7V[a\x08\xDF\x81\x85a\x08\xC1V[\x93Pa\x08\xEF\x81\x85` \x86\x01a\x04/V[\x80\x84\x01\x91PP\x92\x91PPV[_a\t\x06\x82\x84a\x08\xCBV[\x91P\x81\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xD6{\x05\xBEV4\x8E\xBF\x16\xF3\xCB\x1D\xFA\xDD\xCA\xF7\xD8I\xF0w\x8C\x88$#\xD5\x8F<!Q\xD4\xE42dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address _owner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _owner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                )
            }
        }
    };
    /**Function with signature `batchCall(bytes[])` and selector `0x68be3cf2`.
```solidity
function batchCall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`batchCall(bytes[])`](batchCallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for batchCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = batchCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "batchCall(bytes[])";
            const SELECTOR: [u8; 4] = [104u8, 190u8, 60u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `singlecall(address,uint256,bytes32,bytes)` and selector `0xcec9ee3b`.
```solidity
function singlecall(address target, uint256 value, bytes32 context, bytes memory callData) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallCall {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub context: alloy::sol_types::private::FixedBytes<32>,
        pub callData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`singlecall(address,uint256,bytes32,bytes)`](singlecallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallCall> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallCall) -> Self {
                    (value.target, value.value, value.context, value.callData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        target: tuple.0,
                        value: tuple.1,
                        context: tuple.2,
                        callData: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for singlecallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = singlecallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "singlecall(address,uint256,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [206u8, 201u8, 238u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.context),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`BatchExecutor`](self) function calls.
    pub enum BatchExecutorCalls {
        batchCall(batchCallCall),
        singlecall(singlecallCall),
    }
    #[automatically_derived]
    impl BatchExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [104u8, 190u8, 60u8, 242u8],
            [206u8, 201u8, 238u8, 59u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BatchExecutorCalls {
        const NAME: &'static str = "BatchExecutorCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::batchCall(_) => {
                    <batchCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::singlecall(_) => {
                    <singlecallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BatchExecutorCalls>] = &[
                {
                    fn batchCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <batchCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::batchCall)
                    }
                    batchCall
                },
                {
                    fn singlecall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <singlecallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::singlecall)
                    }
                    singlecall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BatchExecutorInstance<T, P, N> {
        BatchExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BatchExecutorInstance<T, P, N>>,
    > {
        BatchExecutorInstance::<T, P, N>::deploy(provider, _owner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BatchExecutorInstance::<T, P, N>::deploy_builder(provider, _owner)
    }
    /**A [`BatchExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BatchExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BatchExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BatchExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BatchExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BatchExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _owner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _owner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BatchExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BatchExecutorInstance<T, P, N> {
            BatchExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`batchCall`] function.
        pub fn batchCall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, batchCallCall, N> {
            self.call_builder(&batchCallCall { data })
        }
        ///Creates a new call builder for the [`singlecall`] function.
        pub fn singlecall(
            &self,
            target: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            context: alloy::sol_types::private::FixedBytes<32>,
            callData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, singlecallCall, N> {
            self.call_builder(
                &singlecallCall {
                    target,
                    value,
                    context,
                    callData,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
