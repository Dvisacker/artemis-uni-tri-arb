/**

Generated by the following Solidity interface...
```solidity
interface BatchExecutor {
    struct DynamicCall {
        address to;
        bytes data;
        uint64 offset;
        uint64 length;
        uint64 resOffset;
    }

    constructor(address _owner);

    fallback() external payable;

    receive() external payable;

    function OWNER() external view returns (address);
    function batchCall(bytes[] memory data) external payable;
    function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "batchCall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "singlecall",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "context",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callData",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "dynamicCalls",
        "type": "tuple[]",
        "internalType": "struct BatchExecutor.DynamicCall[]",
        "components": [
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "offset",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "length",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "resOffset",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod BatchExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234801561000f575f80fd5b50604051610dfc380380610dfc833981810160405281019061003191906100c9565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100f4565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100988261006f565b9050919050565b6100a88161008e565b81146100b2575f80fd5b50565b5f815190506100c38161009f565b92915050565b5f602082840312156100de576100dd61006b565b5b5f6100eb848285016100b5565b91505092915050565b608051610ce96101135f395f8181610417015261043b0152610ce95ff3fe608060405260043610610037575f3560e01c8063011e445b146100ed578063117803e31461010957806368be3cf2146101335761003e565b3661003e57005b5f3660605f61004c5f61014f565b9050805f1c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610087575f80fd5b5f60a082901c5f1c905060608160200260040135600401803560405192508060200182843780602001830160405250506060818060200190518101906100cd91906106e9565b80965081925050506100de81610159565b50505050915050805190602001f35b610107600480360381019061010291906108f4565b610208565b005b348015610114575f80fd5b5061011d610415565b60405161012a91906109b5565b60405180910390f35b61014d60048036038101906101489190610a81565b610439565b005b5f815c9050919050565b5f5b8151811015610204575f803073ffffffffffffffffffffffffffffffffffffffff168484815181106101905761018f610ac8565b5b60200260200101516040516101a59190610b39565b5f604051808303815f865af19150503d805f81146101de576040519150601f19603f3d011682016040523d82523d5f602084013e6101e3565b606091505b5091509150816101f7576101f68161049c565b5b505080600101905061015b565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023f575f80fd5b5f5b8282905081101561036e57368383838181106102605761025f610ac8565b5b90506020028101906102729190610b5b565b90505f80825f0160208101906102889190610b82565b73ffffffffffffffffffffffffffffffffffffffff168380602001906102ae9190610bad565b6040516102bc929190610c33565b5f60405180830381855afa9150503d805f81146102f4576040519150601f19603f3d011682016040523d82523d5f602084013e6102f9565b606091505b50915091508161030d5761030c8161049c565b5b5f8360400160208101906103219190610c88565b90505f8460600160208101906103379190610c88565b90505f85608001602081019061034d9190610c88565b905081816020018501846020018c015e505050505050806001019050610241565b505f6103795f61014f565b90506103855f866104b3565b5f808873ffffffffffffffffffffffffffffffffffffffff1688876040516103ad9190610b39565b5f6040518083038185875af1925050503d805f81146103e7576040519150601f19603f3d011682016040523d82523d5f602084013e6103ec565b606091505b509150915081610400576103ff8161049c565b5b61040a5f846104b3565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610490575f80fd5b61049981610159565b50565b5f815190505f81116104ac575f80fd5b8082602001fd5b80825d5050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610515826104cf565b810181811067ffffffffffffffff82111715610534576105336104df565b5b80604052505050565b5f6105466104ba565b9050610552828261050c565b919050565b5f67ffffffffffffffff821115610571576105706104df565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156105a4576105a36104df565b5b6105ad826104cf565b9050602081019050919050565b8281835e5f83830152505050565b5f6105da6105d58461058a565b61053d565b9050828152602081018484840111156105f6576105f5610586565b5b6106018482856105ba565b509392505050565b5f82601f83011261061d5761061c6104cb565b5b815161062d8482602086016105c8565b91505092915050565b5f61064861064384610557565b61053d565b9050808382526020820190506020840283018581111561066b5761066a610582565b5b835b818110156106b257805167ffffffffffffffff8111156106905761068f6104cb565b5b80860161069d8982610609565b8552602085019450505060208101905061066d565b5050509392505050565b5f82601f8301126106d0576106cf6104cb565b5b81516106e0848260208601610636565b91505092915050565b5f80604083850312156106ff576106fe6104c3565b5b5f83015167ffffffffffffffff81111561071c5761071b6104c7565b5b610728858286016106bc565b925050602083015167ffffffffffffffff811115610749576107486104c7565b5b61075585828601610609565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107888261075f565b9050919050565b6107988161077e565b81146107a2575f80fd5b50565b5f813590506107b38161078f565b92915050565b5f819050919050565b6107cb816107b9565b81146107d5575f80fd5b50565b5f813590506107e6816107c2565b92915050565b5f819050919050565b6107fe816107ec565b8114610808575f80fd5b50565b5f81359050610819816107f5565b92915050565b828183375f83830152505050565b5f61083f61083a8461058a565b61053d565b90508281526020810184848401111561085b5761085a610586565b5b61086684828561081f565b509392505050565b5f82601f830112610882576108816104cb565b5b813561089284826020860161082d565b91505092915050565b5f80fd5b5f8083601f8401126108b4576108b36104cb565b5b8235905067ffffffffffffffff8111156108d1576108d061089b565b5b6020830191508360208202830111156108ed576108ec610582565b5b9250929050565b5f805f805f8060a0878903121561090e5761090d6104c3565b5b5f61091b89828a016107a5565b965050602061092c89828a016107d8565b955050604061093d89828a0161080b565b945050606087013567ffffffffffffffff81111561095e5761095d6104c7565b5b61096a89828a0161086e565b935050608087013567ffffffffffffffff81111561098b5761098a6104c7565b5b61099789828a0161089f565b92509250509295509295509295565b6109af8161077e565b82525050565b5f6020820190506109c85f8301846109a6565b92915050565b5f6109e06109db84610557565b61053d565b90508083825260208201905060208402830185811115610a0357610a02610582565b5b835b81811015610a4a57803567ffffffffffffffff811115610a2857610a276104cb565b5b808601610a35898261086e565b85526020850194505050602081019050610a05565b5050509392505050565b5f82601f830112610a6857610a676104cb565b5b8135610a788482602086016109ce565b91505092915050565b5f60208284031215610a9657610a956104c3565b5b5f82013567ffffffffffffffff811115610ab357610ab26104c7565b5b610abf84828501610a54565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f610b1382610af5565b610b1d8185610aff565b9350610b2d8185602086016105ba565b80840191505092915050565b5f610b448284610b09565b915081905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8235600160a003833603038112610b7657610b75610b4f565b5b80830191505092915050565b5f60208284031215610b9757610b966104c3565b5b5f610ba4848285016107a5565b91505092915050565b5f8083356001602003843603038112610bc957610bc8610b4f565b5b80840192508235915067ffffffffffffffff821115610beb57610bea610b53565b5b602083019250600182023603831315610c0757610c06610b57565b5b509250929050565b5f610c1a8385610aff565b9350610c2783858461081f565b82840190509392505050565b5f610c3f828486610c0f565b91508190509392505050565b5f67ffffffffffffffff82169050919050565b610c6781610c4b565b8114610c71575f80fd5b50565b5f81359050610c8281610c5e565b92915050565b5f60208284031215610c9d57610c9c6104c3565b5b5f610caa84828501610c74565b9150509291505056fea26469706673582212202224c14e02b0acb4c8ea6935a8478754be0aadf98650ea261576824a821139f564736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\r\xFC8\x03\x80a\r\xFC\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\0\xC9V[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPa\0\xF4V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\x98\x82a\0oV[\x90P\x91\x90PV[a\0\xA8\x81a\0\x8EV[\x81\x14a\0\xB2W_\x80\xFD[PV[_\x81Q\x90Pa\0\xC3\x81a\0\x9FV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\0\xDEWa\0\xDDa\0kV[[_a\0\xEB\x84\x82\x85\x01a\0\xB5V[\x91PP\x92\x91PPV[`\x80Qa\x0C\xE9a\x01\x13_9_\x81\x81a\x04\x17\x01Ra\x04;\x01Ra\x0C\xE9_\xF3\xFE`\x80`@R`\x046\x10a\x007W_5`\xE0\x1C\x80c\x01\x1ED[\x14a\0\xEDW\x80c\x11x\x03\xE3\x14a\x01\tW\x80ch\xBE<\xF2\x14a\x013Wa\0>V[6a\0>W\0[_6``_a\0L_a\x01OV[\x90P\x80_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\0\x87W_\x80\xFD[_`\xA0\x82\x90\x1C_\x1C\x90P``\x81` \x02`\x04\x015`\x04\x01\x805`@Q\x92P\x80` \x01\x82\x847\x80` \x01\x83\x01`@RPP``\x81\x80` \x01\x90Q\x81\x01\x90a\0\xCD\x91\x90a\x06\xE9V[\x80\x96P\x81\x92PPPa\0\xDE\x81a\x01YV[PPPP\x91PP\x80Q\x90` \x01\xF3[a\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\x08\xF4V[a\x02\x08V[\0[4\x80\x15a\x01\x14W_\x80\xFD[Pa\x01\x1Da\x04\x15V[`@Qa\x01*\x91\x90a\t\xB5V[`@Q\x80\x91\x03\x90\xF3[a\x01M`\x04\x806\x03\x81\x01\x90a\x01H\x91\x90a\n\x81V[a\x049V[\0[_\x81\\\x90P\x91\x90PV[_[\x81Q\x81\x10\x15a\x02\x04W_\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x01\x90Wa\x01\x8Fa\n\xC8V[[` \x02` \x01\x01Q`@Qa\x01\xA5\x91\x90a\x0B9V[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x01\xDEW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xE3V[``\x91P[P\x91P\x91P\x81a\x01\xF7Wa\x01\xF6\x81a\x04\x9CV[[PP\x80`\x01\x01\x90Pa\x01[V[PPV[0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02?W_\x80\xFD[_[\x82\x82\x90P\x81\x10\x15a\x03nW6\x83\x83\x83\x81\x81\x10a\x02`Wa\x02_a\n\xC8V[[\x90P` \x02\x81\x01\x90a\x02r\x91\x90a\x0B[V[\x90P_\x80\x82_\x01` \x81\x01\x90a\x02\x88\x91\x90a\x0B\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\x02\xAE\x91\x90a\x0B\xADV[`@Qa\x02\xBC\x92\x91\x90a\x0C3V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x02\xF4W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xF9V[``\x91P[P\x91P\x91P\x81a\x03\rWa\x03\x0C\x81a\x04\x9CV[[_\x83`@\x01` \x81\x01\x90a\x03!\x91\x90a\x0C\x88V[\x90P_\x84``\x01` \x81\x01\x90a\x037\x91\x90a\x0C\x88V[\x90P_\x85`\x80\x01` \x81\x01\x90a\x03M\x91\x90a\x0C\x88V[\x90P\x81\x81` \x01\x85\x01\x84` \x01\x8C\x01^PPPPPP\x80`\x01\x01\x90Pa\x02AV[P_a\x03y_a\x01OV[\x90Pa\x03\x85_\x86a\x04\xB3V[_\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x88\x87`@Qa\x03\xAD\x91\x90a\x0B9V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x03\xE7W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03\xECV[``\x91P[P\x91P\x91P\x81a\x04\0Wa\x03\xFF\x81a\x04\x9CV[[a\x04\n_\x84a\x04\xB3V[PPPPPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04\x90W_\x80\xFD[a\x04\x99\x81a\x01YV[PV[_\x81Q\x90P_\x81\x11a\x04\xACW_\x80\xFD[\x80\x82` \x01\xFD[\x80\x82]PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05\x15\x82a\x04\xCFV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x054Wa\x053a\x04\xDFV[[\x80`@RPPPV[_a\x05Fa\x04\xBAV[\x90Pa\x05R\x82\x82a\x05\x0CV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05qWa\x05pa\x04\xDFV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xA4Wa\x05\xA3a\x04\xDFV[[a\x05\xAD\x82a\x04\xCFV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x05\xDAa\x05\xD5\x84a\x05\x8AV[a\x05=V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x05\xF6Wa\x05\xF5a\x05\x86V[[a\x06\x01\x84\x82\x85a\x05\xBAV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\x1DWa\x06\x1Ca\x04\xCBV[[\x81Qa\x06-\x84\x82` \x86\x01a\x05\xC8V[\x91PP\x92\x91PPV[_a\x06Ha\x06C\x84a\x05WV[a\x05=V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06kWa\x06ja\x05\x82V[[\x83[\x81\x81\x10\x15a\x06\xB2W\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\x90Wa\x06\x8Fa\x04\xCBV[[\x80\x86\x01a\x06\x9D\x89\x82a\x06\tV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x06mV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xD0Wa\x06\xCFa\x04\xCBV[[\x81Qa\x06\xE0\x84\x82` \x86\x01a\x066V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x06\xFFWa\x06\xFEa\x04\xC3V[[_\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x1CWa\x07\x1Ba\x04\xC7V[[a\x07(\x85\x82\x86\x01a\x06\xBCV[\x92PP` \x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07IWa\x07Ha\x04\xC7V[[a\x07U\x85\x82\x86\x01a\x06\tV[\x91PP\x92P\x92\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07\x88\x82a\x07_V[\x90P\x91\x90PV[a\x07\x98\x81a\x07~V[\x81\x14a\x07\xA2W_\x80\xFD[PV[_\x815\x90Pa\x07\xB3\x81a\x07\x8FV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xCB\x81a\x07\xB9V[\x81\x14a\x07\xD5W_\x80\xFD[PV[_\x815\x90Pa\x07\xE6\x81a\x07\xC2V[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xFE\x81a\x07\xECV[\x81\x14a\x08\x08W_\x80\xFD[PV[_\x815\x90Pa\x08\x19\x81a\x07\xF5V[\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x08?a\x08:\x84a\x05\x8AV[a\x05=V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x08[Wa\x08Za\x05\x86V[[a\x08f\x84\x82\x85a\x08\x1FV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x08\x82Wa\x08\x81a\x04\xCBV[[\x815a\x08\x92\x84\x82` \x86\x01a\x08-V[\x91PP\x92\x91PPV[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x08\xB4Wa\x08\xB3a\x04\xCBV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xD1Wa\x08\xD0a\x08\x9BV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x08\xEDWa\x08\xECa\x05\x82V[[\x92P\x92\x90PV[_\x80_\x80_\x80`\xA0\x87\x89\x03\x12\x15a\t\x0EWa\t\ra\x04\xC3V[[_a\t\x1B\x89\x82\x8A\x01a\x07\xA5V[\x96PP` a\t,\x89\x82\x8A\x01a\x07\xD8V[\x95PP`@a\t=\x89\x82\x8A\x01a\x08\x0BV[\x94PP``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t^Wa\t]a\x04\xC7V[[a\tj\x89\x82\x8A\x01a\x08nV[\x93PP`\x80\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\x8BWa\t\x8Aa\x04\xC7V[[a\t\x97\x89\x82\x8A\x01a\x08\x9FV[\x92P\x92PP\x92\x95P\x92\x95P\x92\x95V[a\t\xAF\x81a\x07~V[\x82RPPV[_` \x82\x01\x90Pa\t\xC8_\x83\x01\x84a\t\xA6V[\x92\x91PPV[_a\t\xE0a\t\xDB\x84a\x05WV[a\x05=V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\n\x03Wa\n\x02a\x05\x82V[[\x83[\x81\x81\x10\x15a\nJW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n(Wa\n'a\x04\xCBV[[\x80\x86\x01a\n5\x89\x82a\x08nV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\n\x05V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\nhWa\nga\x04\xCBV[[\x815a\nx\x84\x82` \x86\x01a\t\xCEV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\x96Wa\n\x95a\x04\xC3V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xB3Wa\n\xB2a\x04\xC7V[[a\n\xBF\x84\x82\x85\x01a\nTV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a\x0B\x13\x82a\n\xF5V[a\x0B\x1D\x81\x85a\n\xFFV[\x93Pa\x0B-\x81\x85` \x86\x01a\x05\xBAV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0BD\x82\x84a\x0B\tV[\x91P\x81\x90P\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\xA0\x03\x836\x03\x03\x81\x12a\x0BvWa\x0Bua\x0BOV[[\x80\x83\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B\x97Wa\x0B\x96a\x04\xC3V[[_a\x0B\xA4\x84\x82\x85\x01a\x07\xA5V[\x91PP\x92\x91PPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x0B\xC9Wa\x0B\xC8a\x0BOV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0B\xEBWa\x0B\xEAa\x0BSV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15a\x0C\x07Wa\x0C\x06a\x0BWV[[P\x92P\x92\x90PV[_a\x0C\x1A\x83\x85a\n\xFFV[\x93Pa\x0C'\x83\x85\x84a\x08\x1FV[\x82\x84\x01\x90P\x93\x92PPPV[_a\x0C?\x82\x84\x86a\x0C\x0FV[\x91P\x81\x90P\x93\x92PPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0Cg\x81a\x0CKV[\x81\x14a\x0CqW_\x80\xFD[PV[_\x815\x90Pa\x0C\x82\x81a\x0C^V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0C\x9DWa\x0C\x9Ca\x04\xC3V[[_a\x0C\xAA\x84\x82\x85\x01a\x0CtV[\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \"$\xC1N\x02\xB0\xAC\xB4\xC8\xEAi5\xA8G\x87T\xBE\n\xAD\xF9\x86P\xEA&\x15v\x82J\x82\x119\xF5dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610037575f3560e01c8063011e445b146100ed578063117803e31461010957806368be3cf2146101335761003e565b3661003e57005b5f3660605f61004c5f61014f565b9050805f1c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610087575f80fd5b5f60a082901c5f1c905060608160200260040135600401803560405192508060200182843780602001830160405250506060818060200190518101906100cd91906106e9565b80965081925050506100de81610159565b50505050915050805190602001f35b610107600480360381019061010291906108f4565b610208565b005b348015610114575f80fd5b5061011d610415565b60405161012a91906109b5565b60405180910390f35b61014d60048036038101906101489190610a81565b610439565b005b5f815c9050919050565b5f5b8151811015610204575f803073ffffffffffffffffffffffffffffffffffffffff168484815181106101905761018f610ac8565b5b60200260200101516040516101a59190610b39565b5f604051808303815f865af19150503d805f81146101de576040519150601f19603f3d011682016040523d82523d5f602084013e6101e3565b606091505b5091509150816101f7576101f68161049c565b5b505080600101905061015b565b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023f575f80fd5b5f5b8282905081101561036e57368383838181106102605761025f610ac8565b5b90506020028101906102729190610b5b565b90505f80825f0160208101906102889190610b82565b73ffffffffffffffffffffffffffffffffffffffff168380602001906102ae9190610bad565b6040516102bc929190610c33565b5f60405180830381855afa9150503d805f81146102f4576040519150601f19603f3d011682016040523d82523d5f602084013e6102f9565b606091505b50915091508161030d5761030c8161049c565b5b5f8360400160208101906103219190610c88565b90505f8460600160208101906103379190610c88565b90505f85608001602081019061034d9190610c88565b905081816020018501846020018c015e505050505050806001019050610241565b505f6103795f61014f565b90506103855f866104b3565b5f808873ffffffffffffffffffffffffffffffffffffffff1688876040516103ad9190610b39565b5f6040518083038185875af1925050503d805f81146103e7576040519150601f19603f3d011682016040523d82523d5f602084013e6103ec565b606091505b509150915081610400576103ff8161049c565b5b61040a5f846104b3565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610490575f80fd5b61049981610159565b50565b5f815190505f81116104ac575f80fd5b8082602001fd5b80825d5050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610515826104cf565b810181811067ffffffffffffffff82111715610534576105336104df565b5b80604052505050565b5f6105466104ba565b9050610552828261050c565b919050565b5f67ffffffffffffffff821115610571576105706104df565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156105a4576105a36104df565b5b6105ad826104cf565b9050602081019050919050565b8281835e5f83830152505050565b5f6105da6105d58461058a565b61053d565b9050828152602081018484840111156105f6576105f5610586565b5b6106018482856105ba565b509392505050565b5f82601f83011261061d5761061c6104cb565b5b815161062d8482602086016105c8565b91505092915050565b5f61064861064384610557565b61053d565b9050808382526020820190506020840283018581111561066b5761066a610582565b5b835b818110156106b257805167ffffffffffffffff8111156106905761068f6104cb565b5b80860161069d8982610609565b8552602085019450505060208101905061066d565b5050509392505050565b5f82601f8301126106d0576106cf6104cb565b5b81516106e0848260208601610636565b91505092915050565b5f80604083850312156106ff576106fe6104c3565b5b5f83015167ffffffffffffffff81111561071c5761071b6104c7565b5b610728858286016106bc565b925050602083015167ffffffffffffffff811115610749576107486104c7565b5b61075585828601610609565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107888261075f565b9050919050565b6107988161077e565b81146107a2575f80fd5b50565b5f813590506107b38161078f565b92915050565b5f819050919050565b6107cb816107b9565b81146107d5575f80fd5b50565b5f813590506107e6816107c2565b92915050565b5f819050919050565b6107fe816107ec565b8114610808575f80fd5b50565b5f81359050610819816107f5565b92915050565b828183375f83830152505050565b5f61083f61083a8461058a565b61053d565b90508281526020810184848401111561085b5761085a610586565b5b61086684828561081f565b509392505050565b5f82601f830112610882576108816104cb565b5b813561089284826020860161082d565b91505092915050565b5f80fd5b5f8083601f8401126108b4576108b36104cb565b5b8235905067ffffffffffffffff8111156108d1576108d061089b565b5b6020830191508360208202830111156108ed576108ec610582565b5b9250929050565b5f805f805f8060a0878903121561090e5761090d6104c3565b5b5f61091b89828a016107a5565b965050602061092c89828a016107d8565b955050604061093d89828a0161080b565b945050606087013567ffffffffffffffff81111561095e5761095d6104c7565b5b61096a89828a0161086e565b935050608087013567ffffffffffffffff81111561098b5761098a6104c7565b5b61099789828a0161089f565b92509250509295509295509295565b6109af8161077e565b82525050565b5f6020820190506109c85f8301846109a6565b92915050565b5f6109e06109db84610557565b61053d565b90508083825260208201905060208402830185811115610a0357610a02610582565b5b835b81811015610a4a57803567ffffffffffffffff811115610a2857610a276104cb565b5b808601610a35898261086e565b85526020850194505050602081019050610a05565b5050509392505050565b5f82601f830112610a6857610a676104cb565b5b8135610a788482602086016109ce565b91505092915050565b5f60208284031215610a9657610a956104c3565b5b5f82013567ffffffffffffffff811115610ab357610ab26104c7565b5b610abf84828501610a54565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b5f610b1382610af5565b610b1d8185610aff565b9350610b2d8185602086016105ba565b80840191505092915050565b5f610b448284610b09565b915081905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8235600160a003833603038112610b7657610b75610b4f565b5b80830191505092915050565b5f60208284031215610b9757610b966104c3565b5b5f610ba4848285016107a5565b91505092915050565b5f8083356001602003843603038112610bc957610bc8610b4f565b5b80840192508235915067ffffffffffffffff821115610beb57610bea610b53565b5b602083019250600182023603831315610c0757610c06610b57565b5b509250929050565b5f610c1a8385610aff565b9350610c2783858461081f565b82840190509392505050565b5f610c3f828486610c0f565b91508190509392505050565b5f67ffffffffffffffff82169050919050565b610c6781610c4b565b8114610c71575f80fd5b50565b5f81359050610c8281610c5e565b92915050565b5f60208284031215610c9d57610c9c6104c3565b5b5f610caa84828501610c74565b9150509291505056fea26469706673582212202224c14e02b0acb4c8ea6935a8478754be0aadf98650ea261576824a821139f564736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x007W_5`\xE0\x1C\x80c\x01\x1ED[\x14a\0\xEDW\x80c\x11x\x03\xE3\x14a\x01\tW\x80ch\xBE<\xF2\x14a\x013Wa\0>V[6a\0>W\0[_6``_a\0L_a\x01OV[\x90P\x80_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\0\x87W_\x80\xFD[_`\xA0\x82\x90\x1C_\x1C\x90P``\x81` \x02`\x04\x015`\x04\x01\x805`@Q\x92P\x80` \x01\x82\x847\x80` \x01\x83\x01`@RPP``\x81\x80` \x01\x90Q\x81\x01\x90a\0\xCD\x91\x90a\x06\xE9V[\x80\x96P\x81\x92PPPa\0\xDE\x81a\x01YV[PPPP\x91PP\x80Q\x90` \x01\xF3[a\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\x08\xF4V[a\x02\x08V[\0[4\x80\x15a\x01\x14W_\x80\xFD[Pa\x01\x1Da\x04\x15V[`@Qa\x01*\x91\x90a\t\xB5V[`@Q\x80\x91\x03\x90\xF3[a\x01M`\x04\x806\x03\x81\x01\x90a\x01H\x91\x90a\n\x81V[a\x049V[\0[_\x81\\\x90P\x91\x90PV[_[\x81Q\x81\x10\x15a\x02\x04W_\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x01\x90Wa\x01\x8Fa\n\xC8V[[` \x02` \x01\x01Q`@Qa\x01\xA5\x91\x90a\x0B9V[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x01\xDEW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xE3V[``\x91P[P\x91P\x91P\x81a\x01\xF7Wa\x01\xF6\x81a\x04\x9CV[[PP\x80`\x01\x01\x90Pa\x01[V[PPV[0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02?W_\x80\xFD[_[\x82\x82\x90P\x81\x10\x15a\x03nW6\x83\x83\x83\x81\x81\x10a\x02`Wa\x02_a\n\xC8V[[\x90P` \x02\x81\x01\x90a\x02r\x91\x90a\x0B[V[\x90P_\x80\x82_\x01` \x81\x01\x90a\x02\x88\x91\x90a\x0B\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\x02\xAE\x91\x90a\x0B\xADV[`@Qa\x02\xBC\x92\x91\x90a\x0C3V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x02\xF4W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xF9V[``\x91P[P\x91P\x91P\x81a\x03\rWa\x03\x0C\x81a\x04\x9CV[[_\x83`@\x01` \x81\x01\x90a\x03!\x91\x90a\x0C\x88V[\x90P_\x84``\x01` \x81\x01\x90a\x037\x91\x90a\x0C\x88V[\x90P_\x85`\x80\x01` \x81\x01\x90a\x03M\x91\x90a\x0C\x88V[\x90P\x81\x81` \x01\x85\x01\x84` \x01\x8C\x01^PPPPPP\x80`\x01\x01\x90Pa\x02AV[P_a\x03y_a\x01OV[\x90Pa\x03\x85_\x86a\x04\xB3V[_\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x88\x87`@Qa\x03\xAD\x91\x90a\x0B9V[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x03\xE7W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03\xECV[``\x91P[P\x91P\x91P\x81a\x04\0Wa\x03\xFF\x81a\x04\x9CV[[a\x04\n_\x84a\x04\xB3V[PPPPPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04\x90W_\x80\xFD[a\x04\x99\x81a\x01YV[PV[_\x81Q\x90P_\x81\x11a\x04\xACW_\x80\xFD[\x80\x82` \x01\xFD[\x80\x82]PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05\x15\x82a\x04\xCFV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x054Wa\x053a\x04\xDFV[[\x80`@RPPPV[_a\x05Fa\x04\xBAV[\x90Pa\x05R\x82\x82a\x05\x0CV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05qWa\x05pa\x04\xDFV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xA4Wa\x05\xA3a\x04\xDFV[[a\x05\xAD\x82a\x04\xCFV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x05\xDAa\x05\xD5\x84a\x05\x8AV[a\x05=V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x05\xF6Wa\x05\xF5a\x05\x86V[[a\x06\x01\x84\x82\x85a\x05\xBAV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\x1DWa\x06\x1Ca\x04\xCBV[[\x81Qa\x06-\x84\x82` \x86\x01a\x05\xC8V[\x91PP\x92\x91PPV[_a\x06Ha\x06C\x84a\x05WV[a\x05=V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06kWa\x06ja\x05\x82V[[\x83[\x81\x81\x10\x15a\x06\xB2W\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\x90Wa\x06\x8Fa\x04\xCBV[[\x80\x86\x01a\x06\x9D\x89\x82a\x06\tV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x06mV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06\xD0Wa\x06\xCFa\x04\xCBV[[\x81Qa\x06\xE0\x84\x82` \x86\x01a\x066V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a\x06\xFFWa\x06\xFEa\x04\xC3V[[_\x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x1CWa\x07\x1Ba\x04\xC7V[[a\x07(\x85\x82\x86\x01a\x06\xBCV[\x92PP` \x83\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07IWa\x07Ha\x04\xC7V[[a\x07U\x85\x82\x86\x01a\x06\tV[\x91PP\x92P\x92\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07\x88\x82a\x07_V[\x90P\x91\x90PV[a\x07\x98\x81a\x07~V[\x81\x14a\x07\xA2W_\x80\xFD[PV[_\x815\x90Pa\x07\xB3\x81a\x07\x8FV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xCB\x81a\x07\xB9V[\x81\x14a\x07\xD5W_\x80\xFD[PV[_\x815\x90Pa\x07\xE6\x81a\x07\xC2V[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xFE\x81a\x07\xECV[\x81\x14a\x08\x08W_\x80\xFD[PV[_\x815\x90Pa\x08\x19\x81a\x07\xF5V[\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x08?a\x08:\x84a\x05\x8AV[a\x05=V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x08[Wa\x08Za\x05\x86V[[a\x08f\x84\x82\x85a\x08\x1FV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x08\x82Wa\x08\x81a\x04\xCBV[[\x815a\x08\x92\x84\x82` \x86\x01a\x08-V[\x91PP\x92\x91PPV[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\x08\xB4Wa\x08\xB3a\x04\xCBV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xD1Wa\x08\xD0a\x08\x9BV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x08\xEDWa\x08\xECa\x05\x82V[[\x92P\x92\x90PV[_\x80_\x80_\x80`\xA0\x87\x89\x03\x12\x15a\t\x0EWa\t\ra\x04\xC3V[[_a\t\x1B\x89\x82\x8A\x01a\x07\xA5V[\x96PP` a\t,\x89\x82\x8A\x01a\x07\xD8V[\x95PP`@a\t=\x89\x82\x8A\x01a\x08\x0BV[\x94PP``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t^Wa\t]a\x04\xC7V[[a\tj\x89\x82\x8A\x01a\x08nV[\x93PP`\x80\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\x8BWa\t\x8Aa\x04\xC7V[[a\t\x97\x89\x82\x8A\x01a\x08\x9FV[\x92P\x92PP\x92\x95P\x92\x95P\x92\x95V[a\t\xAF\x81a\x07~V[\x82RPPV[_` \x82\x01\x90Pa\t\xC8_\x83\x01\x84a\t\xA6V[\x92\x91PPV[_a\t\xE0a\t\xDB\x84a\x05WV[a\x05=V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\n\x03Wa\n\x02a\x05\x82V[[\x83[\x81\x81\x10\x15a\nJW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n(Wa\n'a\x04\xCBV[[\x80\x86\x01a\n5\x89\x82a\x08nV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\n\x05V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\nhWa\nga\x04\xCBV[[\x815a\nx\x84\x82` \x86\x01a\t\xCEV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\x96Wa\n\x95a\x04\xC3V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xB3Wa\n\xB2a\x04\xC7V[[a\n\xBF\x84\x82\x85\x01a\nTV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a\x0B\x13\x82a\n\xF5V[a\x0B\x1D\x81\x85a\n\xFFV[\x93Pa\x0B-\x81\x85` \x86\x01a\x05\xBAV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0BD\x82\x84a\x0B\tV[\x91P\x81\x90P\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\xA0\x03\x836\x03\x03\x81\x12a\x0BvWa\x0Bua\x0BOV[[\x80\x83\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B\x97Wa\x0B\x96a\x04\xC3V[[_a\x0B\xA4\x84\x82\x85\x01a\x07\xA5V[\x91PP\x92\x91PPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x0B\xC9Wa\x0B\xC8a\x0BOV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0B\xEBWa\x0B\xEAa\x0BSV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15a\x0C\x07Wa\x0C\x06a\x0BWV[[P\x92P\x92\x90PV[_a\x0C\x1A\x83\x85a\n\xFFV[\x93Pa\x0C'\x83\x85\x84a\x08\x1FV[\x82\x84\x01\x90P\x93\x92PPPV[_a\x0C?\x82\x84\x86a\x0C\x0FV[\x91P\x81\x90P\x93\x92PPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0Cg\x81a\x0CKV[\x81\x14a\x0CqW_\x80\xFD[PV[_\x815\x90Pa\x0C\x82\x81a\x0C^V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0C\x9DWa\x0C\x9Ca\x04\xC3V[[_a\x0C\xAA\x84\x82\x85\x01a\x0CtV[\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \"$\xC1N\x02\xB0\xAC\xB4\xC8\xEAi5\xA8G\x87T\xBE\n\xAD\xF9\x86P\xEA&\x15v\x82J\x82\x119\xF5dsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct DynamicCall { address to; bytes data; uint64 offset; uint64 length; uint64 resOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DynamicCall {
        pub to: alloy::sol_types::private::Address,
        pub data: alloy::sol_types::private::Bytes,
        pub offset: u64,
        pub length: u64,
        pub resOffset: u64,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
            u64,
            u64,
            u64,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DynamicCall> for UnderlyingRustTuple<'_> {
            fn from(value: DynamicCall) -> Self {
                (value.to, value.data, value.offset, value.length, value.resOffset)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DynamicCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    to: tuple.0,
                    data: tuple.1,
                    offset: tuple.2,
                    length: tuple.3,
                    resOffset: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DynamicCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DynamicCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.offset),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.resOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DynamicCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DynamicCall {
            const NAME: &'static str = "DynamicCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DynamicCall(address to,bytes data,uint64 offset,uint64 length,uint64 resOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.offset)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.length)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.resOffset)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DynamicCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.offset,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.length,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.resOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.offset,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.length,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.resOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _owner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                )
            }
        }
    };
    /**Function with signature `OWNER()` and selector `0x117803e3`.
```solidity
function OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OWNERCall {}
    ///Container type for the return parameters of the [`OWNER()`](OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OWNERReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OWNER()";
            const SELECTOR: [u8; 4] = [17u8, 120u8, 3u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `batchCall(bytes[])` and selector `0x68be3cf2`.
```solidity
function batchCall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`batchCall(bytes[])`](batchCallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for batchCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = batchCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "batchCall(bytes[])";
            const SELECTOR: [u8; 4] = [104u8, 190u8, 60u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])` and selector `0x011e445b`.
```solidity
function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallCall {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub context: alloy::sol_types::private::FixedBytes<32>,
        pub callData: alloy::sol_types::private::Bytes,
        pub dynamicCalls: alloy::sol_types::private::Vec<
            <DynamicCall as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])`](singlecallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<
                    <DynamicCall as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallCall> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallCall) -> Self {
                    (
                        value.target,
                        value.value,
                        value.context,
                        value.callData,
                        value.dynamicCalls,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        target: tuple.0,
                        value: tuple.1,
                        context: tuple.2,
                        callData: tuple.3,
                        dynamicCalls: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for singlecallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = singlecallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])";
            const SELECTOR: [u8; 4] = [1u8, 30u8, 68u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.context),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        DynamicCall,
                    > as alloy_sol_types::SolType>::tokenize(&self.dynamicCalls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`BatchExecutor`](self) function calls.
    pub enum BatchExecutorCalls {
        OWNER(OWNERCall),
        batchCall(batchCallCall),
        singlecall(singlecallCall),
    }
    #[automatically_derived]
    impl BatchExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 30u8, 68u8, 91u8],
            [17u8, 120u8, 3u8, 227u8],
            [104u8, 190u8, 60u8, 242u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BatchExecutorCalls {
        const NAME: &'static str = "BatchExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OWNER(_) => <OWNERCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::batchCall(_) => {
                    <batchCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::singlecall(_) => {
                    <singlecallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BatchExecutorCalls>] = &[
                {
                    fn singlecall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <singlecallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::singlecall)
                    }
                    singlecall
                },
                {
                    fn OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::OWNER)
                    }
                    OWNER
                },
                {
                    fn batchCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <batchCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::batchCall)
                    }
                    batchCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BatchExecutorInstance<T, P, N> {
        BatchExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BatchExecutorInstance<T, P, N>>,
    > {
        BatchExecutorInstance::<T, P, N>::deploy(provider, _owner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BatchExecutorInstance::<T, P, N>::deploy_builder(provider, _owner)
    }
    /**A [`BatchExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BatchExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BatchExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BatchExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BatchExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BatchExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _owner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _owner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BatchExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BatchExecutorInstance<T, P, N> {
            BatchExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`OWNER`] function.
        pub fn OWNER(&self) -> alloy_contract::SolCallBuilder<T, &P, OWNERCall, N> {
            self.call_builder(&OWNERCall {})
        }
        ///Creates a new call builder for the [`batchCall`] function.
        pub fn batchCall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, batchCallCall, N> {
            self.call_builder(&batchCallCall { data })
        }
        ///Creates a new call builder for the [`singlecall`] function.
        pub fn singlecall(
            &self,
            target: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            context: alloy::sol_types::private::FixedBytes<32>,
            callData: alloy::sol_types::private::Bytes,
            dynamicCalls: alloy::sol_types::private::Vec<
                <DynamicCall as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, singlecallCall, N> {
            self.call_builder(
                &singlecallCall {
                    target,
                    value,
                    context,
                    callData,
                    dynamicCalls,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
