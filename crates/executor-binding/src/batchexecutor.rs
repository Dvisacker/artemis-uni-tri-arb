/**

Generated by the following Solidity interface...
```solidity
interface BatchExecutor {
    struct DynamicCall {
        address to;
        bytes data;
        uint64 offset;
        uint64 length;
        uint64 resOffset;
    }

    constructor(address _owner);

    fallback() external payable;

    receive() external payable;

    function OWNER() external view returns (address);
    function batchCall(bytes[] memory data) external payable;
    function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "fallback",
    "stateMutability": "payable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "OWNER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "batchCall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "singlecall",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "context",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callData",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "dynamicCalls",
        "type": "tuple[]",
        "internalType": "struct BatchExecutor.DynamicCall[]",
        "components": [
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "offset",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "length",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "resOffset",
            "type": "uint64",
            "internalType": "uint64"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod BatchExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523461003f57610019610014610104565b610125565b610021610044565b610bcd61012b82396080518181816102ff01526107c50152610bcd90f35b61004a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100769061004e565b810190811060018060401b0382111761008e57604052565b610058565b906100a661009f610044565b928361006c565b565b5f80fd5b60018060a01b031690565b6100c0906100ac565b90565b6100cc816100b7565b036100d357565b5f80fd5b905051906100e4826100c3565b565b906020828203126100ff576100fc915f016100d7565b90565b6100a8565b610122610cf88038038061011781610093565b9283398101906100e6565b90565b60805256fe60806040526004361015610028575b36156100265761001e365f6109fa565b602081519101f35b005b6100325f35610061565b8063011e445b1461005c578063117803e314610057576368be3cf20361000e5761045d565b610343565b6102ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61008990610075565b90565b61009581610080565b0361009c57565b5f80fd5b905035906100ad8261008c565b565b90565b6100bb816100af565b036100c257565b5f80fd5b905035906100d3826100b2565b565b90565b6100e1816100d5565b036100e857565b5f80fd5b905035906100f9826100d8565b565b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061012b90610103565b810190811067ffffffffffffffff82111761014557604052565b61010d565b9061015d610156610067565b9283610121565b565b67ffffffffffffffff811161017d57610179602091610103565b0190565b61010d565b90825f939282370152565b909291926101a261019d8261015f565b61014a565b938185526020850190828401116101be576101bc92610182565b565b6100ff565b9080601f830112156101e1578160206101de9335910161018d565b90565b6100fb565b5f80fd5b5f80fd5b909182601f830112156102285781359167ffffffffffffffff831161022357602001926020830284011161021e57565b6101ea565b6101e6565b6100fb565b91909160a0818403126102b057610246835f83016100a0565b9261025481602084016100c6565b9261026282604085016100ec565b92606081013567ffffffffffffffff81116102ab57836102839183016101c3565b92608082013567ffffffffffffffff81116102a6576102a292016101ee565b9091565b610071565b610071565b61006d565b5f0190565b6102d46102c836600461022d565b9493909392919261065f565b6102dc610067565b806102e6816102b5565b0390f35b5f80fd5b5f9103126102f857565b61006d565b7f000000000000000000000000000000000000000000000000000000000000000090565b61032a90610080565b9052565b9190610341905f60208501940190610321565b565b34610373576103533660046102ee565b61036f61035e6102fd565b610366610067565b9182918261032e565b0390f35b6102ea565b67ffffffffffffffff81116103905760208091020190565b61010d565b9291906103a96103a482610378565b61014a565b93818552602080860192028101918383116104005781905b8382106103cf575050505050565b813567ffffffffffffffff81116103fb576020916103f087849387016101c3565b8152019101906103c1565b6100fb565b6101ea565b9080601f830112156104235781602061042093359101610395565b90565b6100fb565b90602082820312610458575f82013567ffffffffffffffff8111610453576104509201610405565b90565b610071565b61006d565b61047061046b366004610428565b6107b5565b610478610067565b80610482816102b5565b0390f35b90565b61049d6104986104a292610075565b610486565b610075565b90565b6104ae90610489565b90565b6104ba906104a5565b90565b156104c457565b5f80fd5b5f90565b60016104d891016100af565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160a00381360303821215610516570190565b6104f3565b9082101561053557602061053292028101906104ff565b90565b6104df565b356105448161008c565b90565b903590600160200381360303821215610589570180359067ffffffffffffffff82116105845760200191600182023603831361057f57565b6104fb565b6104f7565b6104f3565b905090565b9091826105a3816105aa9361058e565b8093610182565b0190565b90916105b992610593565b90565b906105ce6105c98361015f565b61014a565b918252565b606090565b3d5f146105f3576105e83d6105bc565b903d5f602084013e5b565b6105fb6105d3565b906105f1565b151590565b67ffffffffffffffff1690565b61061c81610606565b0361062357565b5f80fd5b3561063181610613565b90565b90565b61064b61064661065092610634565b610486565b6100af565b90565b61065c5f610637565b90565b9493929591906106893361068361067d610678306104b1565b610080565b91610080565b146104bd565b6106916104c8565b5b806106af6106a96106a4888a906104db565b6100af565b916100af565b1015610750576106c18587839161051b565b5f806106ce81840161053a565b6106dc846020810190610547565b906106f16106e8610067565b928392836105ae565b03915afa6107076107006105d8565b9115610601565b61074b5790610746929161071d60408301610627565b90610736608061072f60608601610627565b9401610627565b60200101906020018b015e6104cc565b610692565b610abb565b50919590945f945084935061077c61076e610769610653565b610aea565b96610777610653565b610af7565b91602082019151925af16107986107916105d8565b9115610601565b6107b057506107ae906107a9610653565b610af7565b565b610abb565b6107fa906107f5336107ef6107e97f0000000000000000000000000000000000000000000000000000000000000000610080565b91610080565b146104bd565b610b1e565b565b5f1c90565b61081561081061081a926100af565b610486565b6100af565b90565b61082961082e916107fc565b610801565b90565b61084561084061084a926100af565b610486565b610075565b90565b90565b60ff1690565b61086a61086561086f9261084d565b610486565b610850565b90565b1c90565b6108959061088f61088961089a94610850565b916100d5565b90610872565b6100d5565b90565b606090565b90825f9392825e0152565b909291926108c26108bd8261015f565b61014a565b938185526020850190828401116108de576108dc926108a2565b565b6100ff565b9080601f83011215610901578160206108fe935191016108ad565b90565b6100fb565b92919061091a61091582610378565b61014a565b93818552602080860192028101918383116109715781905b838210610940575050505050565b815167ffffffffffffffff811161096c5760209161096187849387016108e3565b815201910190610932565b6100fb565b6101ea565b9080601f830112156109945781602061099193519101610906565b90565b6100fb565b9190916040818403126109f1575f81015167ffffffffffffffff81116109ec57836109c5918301610976565b92602082015167ffffffffffffffff81116109e7576109e492016108e3565b90565b610071565b610071565b61006d565b5190565b5050610ab990610a086105d3565b50610ab2610a6b610a66610a22610a1d610653565b610aea565b610a5633610a50610a4a610a45610a40610a3b8761081d565b610831565b6104a5565b610080565b91610080565b146104bd565b610a6060a0610856565b90610876565b61081d565b610a736105d3565b5060200260040135600401803560405191816020019083376020018101604052610a9b61089d565b506020610aa7826109f6565b818301019101610999565b9290610b1e565b565b610ac4816109f6565b90610ae182610adb610ad55f610637565b916100af565b116104bd565b602001fd5b5f90565b610af2610ae6565b505c90565b5d565b5190565b90610b0882610afa565b811015610b19576020809102010190565b6104df565b610b266104c8565b5b80610b42610b3c610b3785610afa565b6100af565b916100af565b1015610b93575f80610b53306104b1565b610b5e858590610afe565b5182602082019151925af1610b7b610b746105d8565b9115610601565b610b8e5750610b89906104cc565b610b27565b610abb565b505056fea26469706673582212205abc0822b472495a0343372a7fcff573276f830073f7e395526ecb6522cce1e664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\0?Wa\0\x19a\0\x14a\x01\x04V[a\x01%V[a\0!a\0DV[a\x0B\xCDa\x01+\x829`\x80Q\x81\x81\x81a\x02\xFF\x01Ra\x07\xC5\x01Ra\x0B\xCD\x90\xF3[a\0JV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0v\x90a\0NV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x8EW`@RV[a\0XV[\x90a\0\xA6a\0\x9Fa\0DV[\x92\x83a\0lV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xC0\x90a\0\xACV[\x90V[a\0\xCC\x81a\0\xB7V[\x03a\0\xD3WV[_\x80\xFD[\x90PQ\x90a\0\xE4\x82a\0\xC3V[V[\x90` \x82\x82\x03\x12a\0\xFFWa\0\xFC\x91_\x01a\0\xD7V[\x90V[a\0\xA8V[a\x01\"a\x0C\xF8\x808\x03\x80a\x01\x17\x81a\0\x93V[\x92\x839\x81\x01\x90a\0\xE6V[\x90V[`\x80RV\xFE`\x80`@R`\x046\x10\x15a\0(W[6\x15a\0&Wa\0\x1E6_a\t\xFAV[` \x81Q\x91\x01\xF3[\0[a\x002_5a\0aV[\x80c\x01\x1ED[\x14a\0\\W\x80c\x11x\x03\xE3\x14a\0WWch\xBE<\xF2\x03a\0\x0EWa\x04]V[a\x03CV[a\x02\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x89\x90a\0uV[\x90V[a\0\x95\x81a\0\x80V[\x03a\0\x9CWV[_\x80\xFD[\x90P5\x90a\0\xAD\x82a\0\x8CV[V[\x90V[a\0\xBB\x81a\0\xAFV[\x03a\0\xC2WV[_\x80\xFD[\x90P5\x90a\0\xD3\x82a\0\xB2V[V[\x90V[a\0\xE1\x81a\0\xD5V[\x03a\0\xE8WV[_\x80\xFD[\x90P5\x90a\0\xF9\x82a\0\xD8V[V[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01+\x90a\x01\x03V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01EW`@RV[a\x01\rV[\x90a\x01]a\x01Va\0gV[\x92\x83a\x01!V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01}Wa\x01y` \x91a\x01\x03V[\x01\x90V[a\x01\rV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x01\xA2a\x01\x9D\x82a\x01_V[a\x01JV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01\xBEWa\x01\xBC\x92a\x01\x82V[V[a\0\xFFV[\x90\x80`\x1F\x83\x01\x12\x15a\x01\xE1W\x81` a\x01\xDE\x935\x91\x01a\x01\x8DV[\x90V[a\0\xFBV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02(W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02#W` \x01\x92` \x83\x02\x84\x01\x11a\x02\x1EWV[a\x01\xEAV[a\x01\xE6V[a\0\xFBV[\x91\x90\x91`\xA0\x81\x84\x03\x12a\x02\xB0Wa\x02F\x83_\x83\x01a\0\xA0V[\x92a\x02T\x81` \x84\x01a\0\xC6V[\x92a\x02b\x82`@\x85\x01a\0\xECV[\x92``\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xABW\x83a\x02\x83\x91\x83\x01a\x01\xC3V[\x92`\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA6Wa\x02\xA2\x92\x01a\x01\xEEV[\x90\x91V[a\0qV[a\0qV[a\0mV[_\x01\x90V[a\x02\xD4a\x02\xC86`\x04a\x02-V[\x94\x93\x90\x93\x92\x91\x92a\x06_V[a\x02\xDCa\0gV[\x80a\x02\xE6\x81a\x02\xB5V[\x03\x90\xF3[_\x80\xFD[_\x91\x03\x12a\x02\xF8WV[a\0mV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03*\x90a\0\x80V[\x90RV[\x91\x90a\x03A\x90_` \x85\x01\x94\x01\x90a\x03!V[V[4a\x03sWa\x03S6`\x04a\x02\xEEV[a\x03oa\x03^a\x02\xFDV[a\x03fa\0gV[\x91\x82\x91\x82a\x03.V[\x03\x90\xF3[a\x02\xEAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x90W` \x80\x91\x02\x01\x90V[a\x01\rV[\x92\x91\x90a\x03\xA9a\x03\xA4\x82a\x03xV[a\x01JV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x04\0W\x81\x90[\x83\x82\x10a\x03\xCFWPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFBW` \x91a\x03\xF0\x87\x84\x93\x87\x01a\x01\xC3V[\x81R\x01\x91\x01\x90a\x03\xC1V[a\0\xFBV[a\x01\xEAV[\x90\x80`\x1F\x83\x01\x12\x15a\x04#W\x81` a\x04 \x935\x91\x01a\x03\x95V[\x90V[a\0\xFBV[\x90` \x82\x82\x03\x12a\x04XW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04SWa\x04P\x92\x01a\x04\x05V[\x90V[a\0qV[a\0mV[a\x04pa\x04k6`\x04a\x04(V[a\x07\xB5V[a\x04xa\0gV[\x80a\x04\x82\x81a\x02\xB5V[\x03\x90\xF3[\x90V[a\x04\x9Da\x04\x98a\x04\xA2\x92a\0uV[a\x04\x86V[a\0uV[\x90V[a\x04\xAE\x90a\x04\x89V[\x90V[a\x04\xBA\x90a\x04\xA5V[\x90V[\x15a\x04\xC4WV[_\x80\xFD[_\x90V[`\x01a\x04\xD8\x91\x01a\0\xAFV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01`\xA0\x03\x816\x03\x03\x82\x12\x15a\x05\x16W\x01\x90V[a\x04\xF3V[\x90\x82\x10\x15a\x055W` a\x052\x92\x02\x81\x01\x90a\x04\xFFV[\x90V[a\x04\xDFV[5a\x05D\x81a\0\x8CV[\x90V[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x05\x89W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\x84W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x05\x7FWV[a\x04\xFBV[a\x04\xF7V[a\x04\xF3V[\x90P\x90V[\x90\x91\x82a\x05\xA3\x81a\x05\xAA\x93a\x05\x8EV[\x80\x93a\x01\x82V[\x01\x90V[\x90\x91a\x05\xB9\x92a\x05\x93V[\x90V[\x90a\x05\xCEa\x05\xC9\x83a\x01_V[a\x01JV[\x91\x82RV[``\x90V[=_\x14a\x05\xF3Wa\x05\xE8=a\x05\xBCV[\x90=_` \x84\x01>[V[a\x05\xFBa\x05\xD3V[\x90a\x05\xF1V[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x06\x1C\x81a\x06\x06V[\x03a\x06#WV[_\x80\xFD[5a\x061\x81a\x06\x13V[\x90V[\x90V[a\x06Ka\x06Fa\x06P\x92a\x064V[a\x04\x86V[a\0\xAFV[\x90V[a\x06\\_a\x067V[\x90V[\x94\x93\x92\x95\x91\x90a\x06\x893a\x06\x83a\x06}a\x06x0a\x04\xB1V[a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\x06\x91a\x04\xC8V[[\x80a\x06\xAFa\x06\xA9a\x06\xA4\x88\x8A\x90a\x04\xDBV[a\0\xAFV[\x91a\0\xAFV[\x10\x15a\x07PWa\x06\xC1\x85\x87\x83\x91a\x05\x1BV[_\x80a\x06\xCE\x81\x84\x01a\x05:V[a\x06\xDC\x84` \x81\x01\x90a\x05GV[\x90a\x06\xF1a\x06\xE8a\0gV[\x92\x83\x92\x83a\x05\xAEV[\x03\x91Z\xFAa\x07\x07a\x07\0a\x05\xD8V[\x91\x15a\x06\x01V[a\x07KW\x90a\x07F\x92\x91a\x07\x1D`@\x83\x01a\x06'V[\x90a\x076`\x80a\x07/``\x86\x01a\x06'V[\x94\x01a\x06'V[` \x01\x01\x90` \x01\x8B\x01^a\x04\xCCV[a\x06\x92V[a\n\xBBV[P\x91\x95\x90\x94_\x94P\x84\x93Pa\x07|a\x07na\x07ia\x06SV[a\n\xEAV[\x96a\x07wa\x06SV[a\n\xF7V[\x91` \x82\x01\x91Q\x92Z\xF1a\x07\x98a\x07\x91a\x05\xD8V[\x91\x15a\x06\x01V[a\x07\xB0WPa\x07\xAE\x90a\x07\xA9a\x06SV[a\n\xF7V[V[a\n\xBBV[a\x07\xFA\x90a\x07\xF53a\x07\xEFa\x07\xE9\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\x0B\x1EV[V[_\x1C\x90V[a\x08\x15a\x08\x10a\x08\x1A\x92a\0\xAFV[a\x04\x86V[a\0\xAFV[\x90V[a\x08)a\x08.\x91a\x07\xFCV[a\x08\x01V[\x90V[a\x08Ea\x08@a\x08J\x92a\0\xAFV[a\x04\x86V[a\0uV[\x90V[\x90V[`\xFF\x16\x90V[a\x08ja\x08ea\x08o\x92a\x08MV[a\x04\x86V[a\x08PV[\x90V[\x1C\x90V[a\x08\x95\x90a\x08\x8Fa\x08\x89a\x08\x9A\x94a\x08PV[\x91a\0\xD5V[\x90a\x08rV[a\0\xD5V[\x90V[``\x90V[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x08\xC2a\x08\xBD\x82a\x01_V[a\x01JV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x08\xDEWa\x08\xDC\x92a\x08\xA2V[V[a\0\xFFV[\x90\x80`\x1F\x83\x01\x12\x15a\t\x01W\x81` a\x08\xFE\x93Q\x91\x01a\x08\xADV[\x90V[a\0\xFBV[\x92\x91\x90a\t\x1Aa\t\x15\x82a\x03xV[a\x01JV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\tqW\x81\x90[\x83\x82\x10a\t@WPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\tlW` \x91a\ta\x87\x84\x93\x87\x01a\x08\xE3V[\x81R\x01\x91\x01\x90a\t2V[a\0\xFBV[a\x01\xEAV[\x90\x80`\x1F\x83\x01\x12\x15a\t\x94W\x81` a\t\x91\x93Q\x91\x01a\t\x06V[\x90V[a\0\xFBV[\x91\x90\x91`@\x81\x84\x03\x12a\t\xF1W_\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xECW\x83a\t\xC5\x91\x83\x01a\tvV[\x92` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xE7Wa\t\xE4\x92\x01a\x08\xE3V[\x90V[a\0qV[a\0qV[a\0mV[Q\x90V[PPa\n\xB9\x90a\n\x08a\x05\xD3V[Pa\n\xB2a\nka\nfa\n\"a\n\x1Da\x06SV[a\n\xEAV[a\nV3a\nPa\nJa\nEa\n@a\n;\x87a\x08\x1DV[a\x081V[a\x04\xA5V[a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\n``\xA0a\x08VV[\x90a\x08vV[a\x08\x1DV[a\nsa\x05\xD3V[P` \x02`\x04\x015`\x04\x01\x805`@Q\x91\x81` \x01\x90\x837` \x01\x81\x01`@Ra\n\x9Ba\x08\x9DV[P` a\n\xA7\x82a\t\xF6V[\x81\x83\x01\x01\x91\x01a\t\x99V[\x92\x90a\x0B\x1EV[V[a\n\xC4\x81a\t\xF6V[\x90a\n\xE1\x82a\n\xDBa\n\xD5_a\x067V[\x91a\0\xAFV[\x11a\x04\xBDV[` \x01\xFD[_\x90V[a\n\xF2a\n\xE6V[P\\\x90V[]V[Q\x90V[\x90a\x0B\x08\x82a\n\xFAV[\x81\x10\x15a\x0B\x19W` \x80\x91\x02\x01\x01\x90V[a\x04\xDFV[a\x0B&a\x04\xC8V[[\x80a\x0BBa\x0B<a\x0B7\x85a\n\xFAV[a\0\xAFV[\x91a\0\xAFV[\x10\x15a\x0B\x93W_\x80a\x0BS0a\x04\xB1V[a\x0B^\x85\x85\x90a\n\xFEV[Q\x82` \x82\x01\x91Q\x92Z\xF1a\x0B{a\x0Bta\x05\xD8V[\x91\x15a\x06\x01V[a\x0B\x8EWPa\x0B\x89\x90a\x04\xCCV[a\x0B'V[a\n\xBBV[PPV\xFE\xA2dipfsX\"\x12 Z\xBC\x08\"\xB4rIZ\x03C7*\x7F\xCF\xF5s'o\x83\0s\xF7\xE3\x95Rn\xCBe\"\xCC\xE1\xE6dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610028575b36156100265761001e365f6109fa565b602081519101f35b005b6100325f35610061565b8063011e445b1461005c578063117803e314610057576368be3cf20361000e5761045d565b610343565b6102ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61008990610075565b90565b61009581610080565b0361009c57565b5f80fd5b905035906100ad8261008c565b565b90565b6100bb816100af565b036100c257565b5f80fd5b905035906100d3826100b2565b565b90565b6100e1816100d5565b036100e857565b5f80fd5b905035906100f9826100d8565b565b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061012b90610103565b810190811067ffffffffffffffff82111761014557604052565b61010d565b9061015d610156610067565b9283610121565b565b67ffffffffffffffff811161017d57610179602091610103565b0190565b61010d565b90825f939282370152565b909291926101a261019d8261015f565b61014a565b938185526020850190828401116101be576101bc92610182565b565b6100ff565b9080601f830112156101e1578160206101de9335910161018d565b90565b6100fb565b5f80fd5b5f80fd5b909182601f830112156102285781359167ffffffffffffffff831161022357602001926020830284011161021e57565b6101ea565b6101e6565b6100fb565b91909160a0818403126102b057610246835f83016100a0565b9261025481602084016100c6565b9261026282604085016100ec565b92606081013567ffffffffffffffff81116102ab57836102839183016101c3565b92608082013567ffffffffffffffff81116102a6576102a292016101ee565b9091565b610071565b610071565b61006d565b5f0190565b6102d46102c836600461022d565b9493909392919261065f565b6102dc610067565b806102e6816102b5565b0390f35b5f80fd5b5f9103126102f857565b61006d565b7f000000000000000000000000000000000000000000000000000000000000000090565b61032a90610080565b9052565b9190610341905f60208501940190610321565b565b34610373576103533660046102ee565b61036f61035e6102fd565b610366610067565b9182918261032e565b0390f35b6102ea565b67ffffffffffffffff81116103905760208091020190565b61010d565b9291906103a96103a482610378565b61014a565b93818552602080860192028101918383116104005781905b8382106103cf575050505050565b813567ffffffffffffffff81116103fb576020916103f087849387016101c3565b8152019101906103c1565b6100fb565b6101ea565b9080601f830112156104235781602061042093359101610395565b90565b6100fb565b90602082820312610458575f82013567ffffffffffffffff8111610453576104509201610405565b90565b610071565b61006d565b61047061046b366004610428565b6107b5565b610478610067565b80610482816102b5565b0390f35b90565b61049d6104986104a292610075565b610486565b610075565b90565b6104ae90610489565b90565b6104ba906104a5565b90565b156104c457565b5f80fd5b5f90565b60016104d891016100af565b90565b5090565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160a00381360303821215610516570190565b6104f3565b9082101561053557602061053292028101906104ff565b90565b6104df565b356105448161008c565b90565b903590600160200381360303821215610589570180359067ffffffffffffffff82116105845760200191600182023603831361057f57565b6104fb565b6104f7565b6104f3565b905090565b9091826105a3816105aa9361058e565b8093610182565b0190565b90916105b992610593565b90565b906105ce6105c98361015f565b61014a565b918252565b606090565b3d5f146105f3576105e83d6105bc565b903d5f602084013e5b565b6105fb6105d3565b906105f1565b151590565b67ffffffffffffffff1690565b61061c81610606565b0361062357565b5f80fd5b3561063181610613565b90565b90565b61064b61064661065092610634565b610486565b6100af565b90565b61065c5f610637565b90565b9493929591906106893361068361067d610678306104b1565b610080565b91610080565b146104bd565b6106916104c8565b5b806106af6106a96106a4888a906104db565b6100af565b916100af565b1015610750576106c18587839161051b565b5f806106ce81840161053a565b6106dc846020810190610547565b906106f16106e8610067565b928392836105ae565b03915afa6107076107006105d8565b9115610601565b61074b5790610746929161071d60408301610627565b90610736608061072f60608601610627565b9401610627565b60200101906020018b015e6104cc565b610692565b610abb565b50919590945f945084935061077c61076e610769610653565b610aea565b96610777610653565b610af7565b91602082019151925af16107986107916105d8565b9115610601565b6107b057506107ae906107a9610653565b610af7565b565b610abb565b6107fa906107f5336107ef6107e97f0000000000000000000000000000000000000000000000000000000000000000610080565b91610080565b146104bd565b610b1e565b565b5f1c90565b61081561081061081a926100af565b610486565b6100af565b90565b61082961082e916107fc565b610801565b90565b61084561084061084a926100af565b610486565b610075565b90565b90565b60ff1690565b61086a61086561086f9261084d565b610486565b610850565b90565b1c90565b6108959061088f61088961089a94610850565b916100d5565b90610872565b6100d5565b90565b606090565b90825f9392825e0152565b909291926108c26108bd8261015f565b61014a565b938185526020850190828401116108de576108dc926108a2565b565b6100ff565b9080601f83011215610901578160206108fe935191016108ad565b90565b6100fb565b92919061091a61091582610378565b61014a565b93818552602080860192028101918383116109715781905b838210610940575050505050565b815167ffffffffffffffff811161096c5760209161096187849387016108e3565b815201910190610932565b6100fb565b6101ea565b9080601f830112156109945781602061099193519101610906565b90565b6100fb565b9190916040818403126109f1575f81015167ffffffffffffffff81116109ec57836109c5918301610976565b92602082015167ffffffffffffffff81116109e7576109e492016108e3565b90565b610071565b610071565b61006d565b5190565b5050610ab990610a086105d3565b50610ab2610a6b610a66610a22610a1d610653565b610aea565b610a5633610a50610a4a610a45610a40610a3b8761081d565b610831565b6104a5565b610080565b91610080565b146104bd565b610a6060a0610856565b90610876565b61081d565b610a736105d3565b5060200260040135600401803560405191816020019083376020018101604052610a9b61089d565b506020610aa7826109f6565b818301019101610999565b9290610b1e565b565b610ac4816109f6565b90610ae182610adb610ad55f610637565b916100af565b116104bd565b602001fd5b5f90565b610af2610ae6565b505c90565b5d565b5190565b90610b0882610afa565b811015610b19576020809102010190565b6104df565b610b266104c8565b5b80610b42610b3c610b3785610afa565b6100af565b916100af565b1015610b93575f80610b53306104b1565b610b5e858590610afe565b5182602082019151925af1610b7b610b746105d8565b9115610601565b610b8e5750610b89906104cc565b610b27565b610abb565b505056fea26469706673582212205abc0822b472495a0343372a7fcff573276f830073f7e395526ecb6522cce1e664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0(W[6\x15a\0&Wa\0\x1E6_a\t\xFAV[` \x81Q\x91\x01\xF3[\0[a\x002_5a\0aV[\x80c\x01\x1ED[\x14a\0\\W\x80c\x11x\x03\xE3\x14a\0WWch\xBE<\xF2\x03a\0\x0EWa\x04]V[a\x03CV[a\x02\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x89\x90a\0uV[\x90V[a\0\x95\x81a\0\x80V[\x03a\0\x9CWV[_\x80\xFD[\x90P5\x90a\0\xAD\x82a\0\x8CV[V[\x90V[a\0\xBB\x81a\0\xAFV[\x03a\0\xC2WV[_\x80\xFD[\x90P5\x90a\0\xD3\x82a\0\xB2V[V[\x90V[a\0\xE1\x81a\0\xD5V[\x03a\0\xE8WV[_\x80\xFD[\x90P5\x90a\0\xF9\x82a\0\xD8V[V[_\x80\xFD[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01+\x90a\x01\x03V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01EW`@RV[a\x01\rV[\x90a\x01]a\x01Va\0gV[\x92\x83a\x01!V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01}Wa\x01y` \x91a\x01\x03V[\x01\x90V[a\x01\rV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x01\xA2a\x01\x9D\x82a\x01_V[a\x01JV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01\xBEWa\x01\xBC\x92a\x01\x82V[V[a\0\xFFV[\x90\x80`\x1F\x83\x01\x12\x15a\x01\xE1W\x81` a\x01\xDE\x935\x91\x01a\x01\x8DV[\x90V[a\0\xFBV[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02(W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02#W` \x01\x92` \x83\x02\x84\x01\x11a\x02\x1EWV[a\x01\xEAV[a\x01\xE6V[a\0\xFBV[\x91\x90\x91`\xA0\x81\x84\x03\x12a\x02\xB0Wa\x02F\x83_\x83\x01a\0\xA0V[\x92a\x02T\x81` \x84\x01a\0\xC6V[\x92a\x02b\x82`@\x85\x01a\0\xECV[\x92``\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xABW\x83a\x02\x83\x91\x83\x01a\x01\xC3V[\x92`\x80\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xA6Wa\x02\xA2\x92\x01a\x01\xEEV[\x90\x91V[a\0qV[a\0qV[a\0mV[_\x01\x90V[a\x02\xD4a\x02\xC86`\x04a\x02-V[\x94\x93\x90\x93\x92\x91\x92a\x06_V[a\x02\xDCa\0gV[\x80a\x02\xE6\x81a\x02\xB5V[\x03\x90\xF3[_\x80\xFD[_\x91\x03\x12a\x02\xF8WV[a\0mV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03*\x90a\0\x80V[\x90RV[\x91\x90a\x03A\x90_` \x85\x01\x94\x01\x90a\x03!V[V[4a\x03sWa\x03S6`\x04a\x02\xEEV[a\x03oa\x03^a\x02\xFDV[a\x03fa\0gV[\x91\x82\x91\x82a\x03.V[\x03\x90\xF3[a\x02\xEAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x90W` \x80\x91\x02\x01\x90V[a\x01\rV[\x92\x91\x90a\x03\xA9a\x03\xA4\x82a\x03xV[a\x01JV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x04\0W\x81\x90[\x83\x82\x10a\x03\xCFWPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFBW` \x91a\x03\xF0\x87\x84\x93\x87\x01a\x01\xC3V[\x81R\x01\x91\x01\x90a\x03\xC1V[a\0\xFBV[a\x01\xEAV[\x90\x80`\x1F\x83\x01\x12\x15a\x04#W\x81` a\x04 \x935\x91\x01a\x03\x95V[\x90V[a\0\xFBV[\x90` \x82\x82\x03\x12a\x04XW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04SWa\x04P\x92\x01a\x04\x05V[\x90V[a\0qV[a\0mV[a\x04pa\x04k6`\x04a\x04(V[a\x07\xB5V[a\x04xa\0gV[\x80a\x04\x82\x81a\x02\xB5V[\x03\x90\xF3[\x90V[a\x04\x9Da\x04\x98a\x04\xA2\x92a\0uV[a\x04\x86V[a\0uV[\x90V[a\x04\xAE\x90a\x04\x89V[\x90V[a\x04\xBA\x90a\x04\xA5V[\x90V[\x15a\x04\xC4WV[_\x80\xFD[_\x90V[`\x01a\x04\xD8\x91\x01a\0\xAFV[\x90V[P\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01`\xA0\x03\x816\x03\x03\x82\x12\x15a\x05\x16W\x01\x90V[a\x04\xF3V[\x90\x82\x10\x15a\x055W` a\x052\x92\x02\x81\x01\x90a\x04\xFFV[\x90V[a\x04\xDFV[5a\x05D\x81a\0\x8CV[\x90V[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x05\x89W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x05\x84W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x05\x7FWV[a\x04\xFBV[a\x04\xF7V[a\x04\xF3V[\x90P\x90V[\x90\x91\x82a\x05\xA3\x81a\x05\xAA\x93a\x05\x8EV[\x80\x93a\x01\x82V[\x01\x90V[\x90\x91a\x05\xB9\x92a\x05\x93V[\x90V[\x90a\x05\xCEa\x05\xC9\x83a\x01_V[a\x01JV[\x91\x82RV[``\x90V[=_\x14a\x05\xF3Wa\x05\xE8=a\x05\xBCV[\x90=_` \x84\x01>[V[a\x05\xFBa\x05\xD3V[\x90a\x05\xF1V[\x15\x15\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x06\x1C\x81a\x06\x06V[\x03a\x06#WV[_\x80\xFD[5a\x061\x81a\x06\x13V[\x90V[\x90V[a\x06Ka\x06Fa\x06P\x92a\x064V[a\x04\x86V[a\0\xAFV[\x90V[a\x06\\_a\x067V[\x90V[\x94\x93\x92\x95\x91\x90a\x06\x893a\x06\x83a\x06}a\x06x0a\x04\xB1V[a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\x06\x91a\x04\xC8V[[\x80a\x06\xAFa\x06\xA9a\x06\xA4\x88\x8A\x90a\x04\xDBV[a\0\xAFV[\x91a\0\xAFV[\x10\x15a\x07PWa\x06\xC1\x85\x87\x83\x91a\x05\x1BV[_\x80a\x06\xCE\x81\x84\x01a\x05:V[a\x06\xDC\x84` \x81\x01\x90a\x05GV[\x90a\x06\xF1a\x06\xE8a\0gV[\x92\x83\x92\x83a\x05\xAEV[\x03\x91Z\xFAa\x07\x07a\x07\0a\x05\xD8V[\x91\x15a\x06\x01V[a\x07KW\x90a\x07F\x92\x91a\x07\x1D`@\x83\x01a\x06'V[\x90a\x076`\x80a\x07/``\x86\x01a\x06'V[\x94\x01a\x06'V[` \x01\x01\x90` \x01\x8B\x01^a\x04\xCCV[a\x06\x92V[a\n\xBBV[P\x91\x95\x90\x94_\x94P\x84\x93Pa\x07|a\x07na\x07ia\x06SV[a\n\xEAV[\x96a\x07wa\x06SV[a\n\xF7V[\x91` \x82\x01\x91Q\x92Z\xF1a\x07\x98a\x07\x91a\x05\xD8V[\x91\x15a\x06\x01V[a\x07\xB0WPa\x07\xAE\x90a\x07\xA9a\x06SV[a\n\xF7V[V[a\n\xBBV[a\x07\xFA\x90a\x07\xF53a\x07\xEFa\x07\xE9\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\x0B\x1EV[V[_\x1C\x90V[a\x08\x15a\x08\x10a\x08\x1A\x92a\0\xAFV[a\x04\x86V[a\0\xAFV[\x90V[a\x08)a\x08.\x91a\x07\xFCV[a\x08\x01V[\x90V[a\x08Ea\x08@a\x08J\x92a\0\xAFV[a\x04\x86V[a\0uV[\x90V[\x90V[`\xFF\x16\x90V[a\x08ja\x08ea\x08o\x92a\x08MV[a\x04\x86V[a\x08PV[\x90V[\x1C\x90V[a\x08\x95\x90a\x08\x8Fa\x08\x89a\x08\x9A\x94a\x08PV[\x91a\0\xD5V[\x90a\x08rV[a\0\xD5V[\x90V[``\x90V[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\x08\xC2a\x08\xBD\x82a\x01_V[a\x01JV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x08\xDEWa\x08\xDC\x92a\x08\xA2V[V[a\0\xFFV[\x90\x80`\x1F\x83\x01\x12\x15a\t\x01W\x81` a\x08\xFE\x93Q\x91\x01a\x08\xADV[\x90V[a\0\xFBV[\x92\x91\x90a\t\x1Aa\t\x15\x82a\x03xV[a\x01JV[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\tqW\x81\x90[\x83\x82\x10a\t@WPPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\tlW` \x91a\ta\x87\x84\x93\x87\x01a\x08\xE3V[\x81R\x01\x91\x01\x90a\t2V[a\0\xFBV[a\x01\xEAV[\x90\x80`\x1F\x83\x01\x12\x15a\t\x94W\x81` a\t\x91\x93Q\x91\x01a\t\x06V[\x90V[a\0\xFBV[\x91\x90\x91`@\x81\x84\x03\x12a\t\xF1W_\x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xECW\x83a\t\xC5\x91\x83\x01a\tvV[\x92` \x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xE7Wa\t\xE4\x92\x01a\x08\xE3V[\x90V[a\0qV[a\0qV[a\0mV[Q\x90V[PPa\n\xB9\x90a\n\x08a\x05\xD3V[Pa\n\xB2a\nka\nfa\n\"a\n\x1Da\x06SV[a\n\xEAV[a\nV3a\nPa\nJa\nEa\n@a\n;\x87a\x08\x1DV[a\x081V[a\x04\xA5V[a\0\x80V[\x91a\0\x80V[\x14a\x04\xBDV[a\n``\xA0a\x08VV[\x90a\x08vV[a\x08\x1DV[a\nsa\x05\xD3V[P` \x02`\x04\x015`\x04\x01\x805`@Q\x91\x81` \x01\x90\x837` \x01\x81\x01`@Ra\n\x9Ba\x08\x9DV[P` a\n\xA7\x82a\t\xF6V[\x81\x83\x01\x01\x91\x01a\t\x99V[\x92\x90a\x0B\x1EV[V[a\n\xC4\x81a\t\xF6V[\x90a\n\xE1\x82a\n\xDBa\n\xD5_a\x067V[\x91a\0\xAFV[\x11a\x04\xBDV[` \x01\xFD[_\x90V[a\n\xF2a\n\xE6V[P\\\x90V[]V[Q\x90V[\x90a\x0B\x08\x82a\n\xFAV[\x81\x10\x15a\x0B\x19W` \x80\x91\x02\x01\x01\x90V[a\x04\xDFV[a\x0B&a\x04\xC8V[[\x80a\x0BBa\x0B<a\x0B7\x85a\n\xFAV[a\0\xAFV[\x91a\0\xAFV[\x10\x15a\x0B\x93W_\x80a\x0BS0a\x04\xB1V[a\x0B^\x85\x85\x90a\n\xFEV[Q\x82` \x82\x01\x91Q\x92Z\xF1a\x0B{a\x0Bta\x05\xD8V[\x91\x15a\x06\x01V[a\x0B\x8EWPa\x0B\x89\x90a\x04\xCCV[a\x0B'V[a\n\xBBV[PPV\xFE\xA2dipfsX\"\x12 Z\xBC\x08\"\xB4rIZ\x03C7*\x7F\xCF\xF5s'o\x83\0s\xF7\xE3\x95Rn\xCBe\"\xCC\xE1\xE6dsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct DynamicCall { address to; bytes data; uint64 offset; uint64 length; uint64 resOffset; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DynamicCall {
        pub to: alloy::sol_types::private::Address,
        pub data: alloy::sol_types::private::Bytes,
        pub offset: u64,
        pub length: u64,
        pub resOffset: u64,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
            alloy::sol_types::sol_data::Uint<64>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
            u64,
            u64,
            u64,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DynamicCall> for UnderlyingRustTuple<'_> {
            fn from(value: DynamicCall) -> Self {
                (value.to, value.data, value.offset, value.length, value.resOffset)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DynamicCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    to: tuple.0,
                    data: tuple.1,
                    offset: tuple.2,
                    length: tuple.3,
                    resOffset: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DynamicCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DynamicCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.offset),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.resOffset),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DynamicCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DynamicCall {
            const NAME: &'static str = "DynamicCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DynamicCall(address to,bytes data,uint64 offset,uint64 length,uint64 resOffset)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.offset)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.length)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.resOffset)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DynamicCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.offset,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.length,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.resOffset,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.offset,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.length,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    64,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.resOffset,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _owner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                )
            }
        }
    };
    /**Function with signature `OWNER()` and selector `0x117803e3`.
```solidity
function OWNER() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OWNERCall {}
    ///Container type for the return parameters of the [`OWNER()`](OWNERCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OWNERReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERCall> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<OWNERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: OWNERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for OWNERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for OWNERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = OWNERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OWNER()";
            const SELECTOR: [u8; 4] = [17u8, 120u8, 3u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `batchCall(bytes[])` and selector `0x68be3cf2`.
```solidity
function batchCall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`batchCall(bytes[])`](batchCallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct batchCallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallCall> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<batchCallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: batchCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for batchCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for batchCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = batchCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "batchCall(bytes[])";
            const SELECTOR: [u8; 4] = [104u8, 190u8, 60u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])` and selector `0x011e445b`.
```solidity
function singlecall(address target, uint256 value, bytes32 context, bytes memory callData, DynamicCall[] memory dynamicCalls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallCall {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub context: alloy::sol_types::private::FixedBytes<32>,
        pub callData: alloy::sol_types::private::Bytes,
        pub dynamicCalls: alloy::sol_types::private::Vec<
            <DynamicCall as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])`](singlecallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct singlecallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<
                    <DynamicCall as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallCall> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallCall) -> Self {
                    (
                        value.target,
                        value.value,
                        value.context,
                        value.callData,
                        value.dynamicCalls,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        target: tuple.0,
                        value: tuple.1,
                        context: tuple.2,
                        callData: tuple.3,
                        dynamicCalls: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<singlecallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: singlecallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for singlecallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for singlecallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<DynamicCall>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = singlecallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "singlecall(address,uint256,bytes32,bytes,(address,bytes,uint64,uint64,uint64)[])";
            const SELECTOR: [u8; 4] = [1u8, 30u8, 68u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.context),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        DynamicCall,
                    > as alloy_sol_types::SolType>::tokenize(&self.dynamicCalls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`BatchExecutor`](self) function calls.
    pub enum BatchExecutorCalls {
        OWNER(OWNERCall),
        batchCall(batchCallCall),
        singlecall(singlecallCall),
    }
    #[automatically_derived]
    impl BatchExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 30u8, 68u8, 91u8],
            [17u8, 120u8, 3u8, 227u8],
            [104u8, 190u8, 60u8, 242u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BatchExecutorCalls {
        const NAME: &'static str = "BatchExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OWNER(_) => <OWNERCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::batchCall(_) => {
                    <batchCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::singlecall(_) => {
                    <singlecallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<BatchExecutorCalls>] = &[
                {
                    fn singlecall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <singlecallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::singlecall)
                    }
                    singlecall
                },
                {
                    fn OWNER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <OWNERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::OWNER)
                    }
                    OWNER
                },
                {
                    fn batchCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<BatchExecutorCalls> {
                        <batchCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(BatchExecutorCalls::batchCall)
                    }
                    batchCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OWNER(inner) => {
                    <OWNERCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::batchCall(inner) => {
                    <batchCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::singlecall(inner) => {
                    <singlecallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BatchExecutorInstance<T, P, N> {
        BatchExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BatchExecutorInstance<T, P, N>>,
    > {
        BatchExecutorInstance::<T, P, N>::deploy(provider, _owner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        BatchExecutorInstance::<T, P, N>::deploy_builder(provider, _owner)
    }
    /**A [`BatchExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BatchExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BatchExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for BatchExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BatchExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`BatchExecutor`](self) contract instance.

See the [wrapper's documentation](`BatchExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BatchExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _owner);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _owner },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> BatchExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BatchExecutorInstance<T, P, N> {
            BatchExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`OWNER`] function.
        pub fn OWNER(&self) -> alloy_contract::SolCallBuilder<T, &P, OWNERCall, N> {
            self.call_builder(&OWNERCall {})
        }
        ///Creates a new call builder for the [`batchCall`] function.
        pub fn batchCall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, batchCallCall, N> {
            self.call_builder(&batchCallCall { data })
        }
        ///Creates a new call builder for the [`singlecall`] function.
        pub fn singlecall(
            &self,
            target: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            context: alloy::sol_types::private::FixedBytes<32>,
            callData: alloy::sol_types::private::Bytes,
            dynamicCalls: alloy::sol_types::private::Vec<
                <DynamicCall as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, singlecallCall, N> {
            self.call_builder(
                &singlecallCall {
                    target,
                    value,
                    context,
                    callData,
                    dynamicCalls,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > BatchExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
