/**

Generated by the following Solidity interface...
```solidity
interface AtomicExecutor {
    struct Call {
        address target;
        uint256 value;
        bytes data;
    }
    struct Swap {
        uint8 swapType;
        address tokenOut;
        uint24 feeTier;
        bool stable;
    }
    struct SwapData {
        address tokenIn;
        uint256 amountIn;
        Swap[] swaps;
    }

    constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);

    receive() external payable;

    function AGGREGATION_ROUTER_V5() external view returns (address);
    function FEE_TIERS(uint256) external view returns (uint24);
    function multicall(Call[] memory calls) external payable;
    function swap(SwapData memory data) external returns (uint256);
    function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
    function swapAll(SwapData memory swapData) external returns (uint256);
    function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
    function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_aerodromeRouter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "AGGREGATION_ROUTER_V5",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_TIERS",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct AtomicExecutor.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct AtomicExecutor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct AtomicExecutor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAerodrome",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "stable",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAll",
    "inputs": [
      {
        "name": "swapData",
        "type": "tuple",
        "internalType": "struct AtomicExecutor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct AtomicExecutor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV2",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV3",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeTier",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod AtomicExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101006040526040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff168152505f90600461004c929190610153565b50348015610058575f80fd5b50604051612786380380612786833981810160405281019061007a9190610275565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506102d9565b828054828255905f5260205f2090600901600a900481019282156101eb579160200282015f5b838211156101ba57835183826101000a81548162ffffff021916908361ffff1602179055509260200192600301602081600201049283019260010302610179565b80156101e95782816101000a81549062ffffff02191690556003016020816002010492830192600103026101ba565b505b5090506101f891906101fc565b5090565b5b80821115610213575f815f9055506001016101fd565b5090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102448261021b565b9050919050565b6102548161023a565b811461025e575f80fd5b50565b5f8151905061026f8161024b565b92915050565b5f805f806080858703121561028d5761028c610217565b5b5f61029a87828801610261565b94505060206102ab87828801610261565b93505060406102bc87828801610261565b92505060606102cd87828801610261565b91505092959194509250565b60805160a05160c05160e0516124656103215f395f81816109d40152610b3001525f818161125301526112d401525f8181610256015261036a01525f61041201526124655ff3fe60806040526004361061007e575f3560e01c8063886cdc9c1161004d578063886cdc9c14610159578063b11de7e314610195578063d1855626146101bf578063f1a52592146101fb57610085565b80630748b19b146100895780631749e1e3146100c55780636b1b9b20146100e15780638231ab0b1461011d57610085565b3661008557005b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190611605565b610237565b6040516100bc9190611678565b60405180910390f35b6100df60048036038101906100da9190611934565b610410565b005b3480156100ec575f80fd5b506101076004803603810190610102919061197b565b610557565b60405161011491906119b5565b60405180910390f35b348015610128575f80fd5b50610143600480360381019061013e91906119f0565b61058c565b6040516101509190611678565b60405180910390f35b348015610164575f80fd5b5061017f600480360381019061017a9190611a6c565b6109b5565b60405161018c9190611678565b60405180910390f35b3480156101a0575f80fd5b506101a9610c15565b6040516101b69190611adf565b60405180910390f35b3480156101ca575f80fd5b506101e560048036038101906101e091906119f0565b610c2d565b6040516101f29190611678565b60405180910390f35b348015610206575f80fd5b50610221600480360381019061021c9190611af8565b6110c8565b60405161022e9190611678565b60405180910390f35b5f8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610293929190611b48565b6020604051808303815f875af11580156102af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d39190611b83565b505f6040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018781526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103c19190611c76565b6020604051808303815f875af11580156103dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104019190611ca3565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467575f80fd5b5f5b8151811015610553575f8083838151811061048757610486611cce565b5b60200260200101515f015173ffffffffffffffffffffffffffffffffffffffff168484815181106104bb576104ba611cce565b5b6020026020010151602001518585815181106104da576104d9611cce565b5b6020026020010151604001516040516104f39190611d4d565b5f6040518083038185875af1925050503d805f811461052d576040519150601f19603f3d011682016040523d82523d5f602084013e610532565b606091505b50915091508161054657610545816113b9565b5b5050806001019050610469565b5050565b5f8181548110610565575f80fd5b905f5260205f2090600a9182820401919006600302915054906101000a900462ffffff1681565b5f815f01602081019061059f9190611d63565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b81526004016105df93929190611d8e565b6020604051808303815f875af11580156105fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061f9190611b83565b505f826020013590505f835f01602081019061063b9190611d63565b90505f805b8580604001906106509190611dcf565b905081101561092d57600186806040019061066b9190611dcf565b8381811061067c5761067b611cce565b5b9050608002015f0160208101906106939190611e67565b60ff160361071e5761071784848880604001906106b09190611dcf565b858181106106c1576106c0611cce565b5b90506080020160200160208101906106d99190611d63565b8980604001906106e99190611dcf565b868181106106fa576106f9611cce565b5b90506080020160400160208101906107129190611e92565b610237565b915061086c565b5f86806040019061072f9190611dcf565b838181106107405761073f611cce565b5b9050608002015f0160208101906107579190611e67565b60ff16036107a9576107a284848880604001906107749190611dcf565b8581811061078557610784611cce565b5b905060800201602001602081019061079d9190611d63565b6110c8565b915061086b565b60028680604001906107bb9190611dcf565b838181106107cc576107cb611cce565b5b9050608002015f0160208101906107e39190611e67565b60ff160361086a5761086784848880604001906108009190611dcf565b8581811061081157610810611cce565b5b90506080020160200160208101906108299190611d63565b8980604001906108399190611dcf565b8681811061084a57610849611cce565b5b90506080020160600160208101906108629190611ebd565b6109b5565b91505b5b5b81935085806040019061087f9190611dcf565b828181106108905761088f611cce565b5b90506080020160200160208101906108a89190611d63565b92506109206040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f660000000000000000000000000000000000000000000000000000000000815250866113d0565b8080600101915050610640565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610969929190611b48565b6020604051808303815f875af1158015610985573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a99190611b83565b50829350505050919050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610a11929190611b48565b6020604051808303815f875af1158015610a2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a519190611b83565b505f600167ffffffffffffffff811115610a6e57610a6d6116a5565b5b604051908082528060200260200182016040528015610aa757816020015b610a946114bd565b815260200190600190039081610a8c5790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020015f73ffffffffffffffffffffffffffffffffffffffff16815250815f81518110610b2257610b21611cce565b5b60200260200101819052505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9885f853061012c42610b7c9190611f15565b6040518663ffffffff1660e01b8152600401610b9c959493929190612094565b5f604051808303815f875af1158015610bb7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610bdf91906121ac565b90508060018251610bf091906121f3565b81518110610c0157610c00611cce565b5b602002602001015192505050949350505050565b731111111254eeb25477b68fb85ed929f73a96058281565b5f815f016020810190610c409190611d63565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b8152600401610c8093929190611d8e565b6020604051808303815f875af1158015610c9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc09190611b83565b505f826020013590505f835f016020810190610cdc9190611d63565b90505f5b848060400190610cf09190611dcf565b9050811015611041576001858060400190610d0b9190611dcf565b83818110610d1c57610d1b611cce565b5b9050608002015f016020810190610d339190611e67565b60ff1603610dbd57610db78383878060400190610d509190611dcf565b85818110610d6157610d60611cce565b5b9050608002016020016020810190610d799190611d63565b888060400190610d899190611dcf565b86818110610d9a57610d99611cce565b5b9050608002016040016020810190610db29190611e92565b610237565b50610f09565b5f858060400190610dce9190611dcf565b83818110610ddf57610dde611cce565b5b9050608002015f016020810190610df69190611e67565b60ff1603610e4757610e418383878060400190610e139190611dcf565b85818110610e2457610e23611cce565b5b9050608002016020016020810190610e3c9190611d63565b6110c8565b50610f08565b6002858060400190610e599190611dcf565b83818110610e6a57610e69611cce565b5b9050608002015f016020810190610e819190611e67565b60ff1603610f0757610f058383878060400190610e9e9190611dcf565b85818110610eaf57610eae611cce565b5b9050608002016020016020810190610ec79190611d63565b888060400190610ed79190611dcf565b86818110610ee857610ee7611cce565b5b9050608002016060016020810190610f009190611ebd565b6109b5565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f429190611adf565b602060405180830381865afa158015610f5d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f819190611ca3565b9250848060400190610f939190611dcf565b82818110610fa457610fa3611cce565b5b9050608002016020016020810190610fbc9190611d63565b91506110346040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f660000000000000000000000000000000000000000000000000000000000815250856113d0565b8080600101915050610ce0565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161107d929190611b48565b6020604051808303815f875af1158015611099573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bd9190611b83565b508192505050919050565b5f80840361114b578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111099190611adf565b602060405180830381865afa158015611124573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111489190611ca3565b93505b5f600267ffffffffffffffff811115611167576111666116a5565b5b6040519080825280602002602001820160405280156111955781602001602082028036833780820191505090505b50905083815f815181106111ac576111ab611cce565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816001815181106111fb576111fa611cce565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401611290929190611b48565b6020604051808303815f875af11580156112ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d09190611b83565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c426113219190611f15565b6040518663ffffffff1660e01b8152600401611341959493929190612307565b5f604051808303815f875af115801561135c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061138491906121ac565b9050806001825161139591906121f3565b815181106113a6576113a5611cce565b5b6020026020010151925050509392505050565b5f815190505f81116113c9575f80fd5b8082602001fd5b61146c848484846040516024016113ea94939291906123b1565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611472565b50505050565b6114898161148161148c6114b2565b63ffffffff16565b50565b5f815190505f6a636f6e736f6c652e6c6f679050602083015f808483855afa5050505050565b611525819050919050565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b61152d612402565b565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61155281611540565b811461155c575f80fd5b50565b5f8135905061156d81611549565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61159c82611573565b9050919050565b6115ac81611592565b81146115b6575f80fd5b50565b5f813590506115c7816115a3565b92915050565b5f62ffffff82169050919050565b6115e4816115cd565b81146115ee575f80fd5b50565b5f813590506115ff816115db565b92915050565b5f805f806080858703121561161d5761161c611538565b5b5f61162a8782880161155f565b945050602061163b878288016115b9565b935050604061164c878288016115b9565b925050606061165d878288016115f1565b91505092959194509250565b61167281611540565b82525050565b5f60208201905061168b5f830184611669565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6116db82611695565b810181811067ffffffffffffffff821117156116fa576116f96116a5565b5b80604052505050565b5f61170c61152f565b905061171882826116d2565b919050565b5f67ffffffffffffffff821115611737576117366116a5565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f67ffffffffffffffff821115611772576117716116a5565b5b61177b82611695565b9050602081019050919050565b828183375f83830152505050565b5f6117a86117a384611758565b611703565b9050828152602081018484840111156117c4576117c3611754565b5b6117cf848285611788565b509392505050565b5f82601f8301126117eb576117ea611691565b5b81356117fb848260208601611796565b91505092915050565b5f606082840312156118195761181861174c565b5b6118236060611703565b90505f611832848285016115b9565b5f8301525060206118458482850161155f565b602083015250604082013567ffffffffffffffff81111561186957611868611750565b5b611875848285016117d7565b60408301525092915050565b5f61189361188e8461171d565b611703565b905080838252602082019050602084028301858111156118b6576118b5611748565b5b835b818110156118fd57803567ffffffffffffffff8111156118db576118da611691565b5b8086016118e88982611804565b855260208501945050506020810190506118b8565b5050509392505050565b5f82601f83011261191b5761191a611691565b5b813561192b848260208601611881565b91505092915050565b5f6020828403121561194957611948611538565b5b5f82013567ffffffffffffffff8111156119665761196561153c565b5b61197284828501611907565b91505092915050565b5f602082840312156119905761198f611538565b5b5f61199d8482850161155f565b91505092915050565b6119af816115cd565b82525050565b5f6020820190506119c85f8301846119a6565b92915050565b5f80fd5b5f606082840312156119e7576119e66119ce565b5b81905092915050565b5f60208284031215611a0557611a04611538565b5b5f82013567ffffffffffffffff811115611a2257611a2161153c565b5b611a2e848285016119d2565b91505092915050565b5f8115159050919050565b611a4b81611a37565b8114611a55575f80fd5b50565b5f81359050611a6681611a42565b92915050565b5f805f8060808587031215611a8457611a83611538565b5b5f611a918782880161155f565b9450506020611aa2878288016115b9565b9350506040611ab3878288016115b9565b9250506060611ac487828801611a58565b91505092959194509250565b611ad981611592565b82525050565b5f602082019050611af25f830184611ad0565b92915050565b5f805f60608486031215611b0f57611b0e611538565b5b5f611b1c8682870161155f565b9350506020611b2d868287016115b9565b9250506040611b3e868287016115b9565b9150509250925092565b5f604082019050611b5b5f830185611ad0565b611b686020830184611669565b9392505050565b5f81519050611b7d81611a42565b92915050565b5f60208284031215611b9857611b97611538565b5b5f611ba584828501611b6f565b91505092915050565b611bb781611592565b82525050565b611bc6816115cd565b82525050565b611bd581611540565b82525050565b611be481611573565b82525050565b60e082015f820151611bfe5f850182611bae565b506020820151611c116020850182611bae565b506040820151611c246040850182611bbd565b506060820151611c376060850182611bae565b506080820151611c4a6080850182611bcc565b5060a0820151611c5d60a0850182611bcc565b5060c0820151611c7060c0850182611bdb565b50505050565b5f60e082019050611c895f830184611bea565b92915050565b5f81519050611c9d81611549565b92915050565b5f60208284031215611cb857611cb7611538565b5b5f611cc584828501611c8f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f611d2782611cfb565b611d318185611d05565b9350611d41818560208601611d0f565b80840191505092915050565b5f611d588284611d1d565b915081905092915050565b5f60208284031215611d7857611d77611538565b5b5f611d85848285016115b9565b91505092915050565b5f606082019050611da15f830186611ad0565b611dae6020830185611ad0565b611dbb6040830184611669565b949350505050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112611deb57611dea611dc3565b5b80840192508235915067ffffffffffffffff821115611e0d57611e0c611dc7565b5b602083019250608082023603831315611e2957611e28611dcb565b5b509250929050565b5f60ff82169050919050565b611e4681611e31565b8114611e50575f80fd5b50565b5f81359050611e6181611e3d565b92915050565b5f60208284031215611e7c57611e7b611538565b5b5f611e8984828501611e53565b91505092915050565b5f60208284031215611ea757611ea6611538565b5b5f611eb4848285016115f1565b91505092915050565b5f60208284031215611ed257611ed1611538565b5b5f611edf84828501611a58565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611f1f82611540565b9150611f2a83611540565b9250828201905080821115611f4257611f41611ee8565b5b92915050565b5f819050919050565b5f819050919050565b5f611f74611f6f611f6a84611f48565b611f51565b611540565b9050919050565b611f8481611f5a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611fbc81611a37565b82525050565b608082015f820151611fd65f850182611bae565b506020820151611fe96020850182611bae565b506040820151611ffc6040850182611fb3565b50606082015161200f6060850182611bae565b50505050565b5f6120208383611fc2565b60808301905092915050565b5f602082019050919050565b5f61204282611f8a565b61204c8185611f94565b935061205783611fa4565b805f5b8381101561208757815161206e8882612015565b97506120798361202c565b92505060018101905061205a565b5085935050505092915050565b5f60a0820190506120a75f830188611669565b6120b46020830187611f7b565b81810360408301526120c68186612038565b90506120d56060830185611ad0565b6120e26080830184611669565b9695505050505050565b5f67ffffffffffffffff821115612106576121056116a5565b5b602082029050602081019050919050565b5f612129612124846120ec565b611703565b9050808382526020820190506020840283018581111561214c5761214b611748565b5b835b8181101561217557806121618882611c8f565b84526020840193505060208101905061214e565b5050509392505050565b5f82601f83011261219357612192611691565b5b81516121a3848260208601612117565b91505092915050565b5f602082840312156121c1576121c0611538565b5b5f82015167ffffffffffffffff8111156121de576121dd61153c565b5b6121ea8482850161217f565b91505092915050565b5f6121fd82611540565b915061220883611540565b92508282039050818111156122205761221f611ee8565b5b92915050565b5f819050919050565b5f61224961224461223f84612226565b611f51565b611540565b9050919050565b6122598161222f565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6122938383611bae565b60208301905092915050565b5f602082019050919050565b5f6122b58261225f565b6122bf8185612269565b93506122ca83612279565b805f5b838110156122fa5781516122e18882612288565b97506122ec8361229f565b9250506001810190506122cd565b5085935050505092915050565b5f60a08201905061231a5f830188611669565b6123276020830187612250565b818103604083015261233981866122ab565b90506123486060830185611ad0565b6123556080830184611669565b9695505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f6123838261235f565b61238d8185612369565b935061239d818560208601611d0f565b6123a681611695565b840191505092915050565b5f6080820190508181035f8301526123c98187612379565b90506123d86020830186611669565b81810360408301526123ea8185612379565b90506123f96060830184611ad0565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffdfea2646970667358221220e9a29e43942385f0dc5929272faea88b79aeff6fd7444dd1d0b61030bab48a0864736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R`@Q\x80`\x80\x01`@R\x80`da\xFF\xFF\x16\x81R` \x01a\x01\xF4a\xFF\xFF\x16\x81R` \x01a\x0B\xB8a\xFF\xFF\x16\x81R` \x01a'\x10a\xFF\xFF\x16\x81RP_\x90`\x04a\0L\x92\x91\x90a\x01SV[P4\x80\x15a\0XW_\x80\xFD[P`@Qa'\x868\x03\x80a'\x86\x839\x81\x81\x01`@R\x81\x01\x90a\0z\x91\x90a\x02uV[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPPPPa\x02\xD9V[\x82\x80T\x82\x82U\x90_R` _ \x90`\t\x01`\n\x90\x04\x81\x01\x92\x82\x15a\x01\xEBW\x91` \x02\x82\x01_[\x83\x82\x11\x15a\x01\xBAW\x83Q\x83\x82a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83a\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01yV[\x80\x15a\x01\xE9W\x82\x81a\x01\0\n\x81T\x90b\xFF\xFF\xFF\x02\x19\x16\x90U`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01\xBAV[P[P\x90Pa\x01\xF8\x91\x90a\x01\xFCV[P\x90V[[\x80\x82\x11\x15a\x02\x13W_\x81_\x90UP`\x01\x01a\x01\xFDV[P\x90V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x02D\x82a\x02\x1BV[\x90P\x91\x90PV[a\x02T\x81a\x02:V[\x81\x14a\x02^W_\x80\xFD[PV[_\x81Q\x90Pa\x02o\x81a\x02KV[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x02\x8DWa\x02\x8Ca\x02\x17V[[_a\x02\x9A\x87\x82\x88\x01a\x02aV[\x94PP` a\x02\xAB\x87\x82\x88\x01a\x02aV[\x93PP`@a\x02\xBC\x87\x82\x88\x01a\x02aV[\x92PP``a\x02\xCD\x87\x82\x88\x01a\x02aV[\x91PP\x92\x95\x91\x94P\x92PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa$ea\x03!_9_\x81\x81a\t\xD4\x01Ra\x0B0\x01R_\x81\x81a\x12S\x01Ra\x12\xD4\x01R_\x81\x81a\x02V\x01Ra\x03j\x01R_a\x04\x12\x01Ra$e_\xF3\xFE`\x80`@R`\x046\x10a\0~W_5`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0MW\x80c\x88l\xDC\x9C\x14a\x01YW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x95W\x80c\xD1\x85V&\x14a\x01\xBFW\x80c\xF1\xA5%\x92\x14a\x01\xFBWa\0\x85V[\x80c\x07H\xB1\x9B\x14a\0\x89W\x80c\x17I\xE1\xE3\x14a\0\xC5W\x80ck\x1B\x9B \x14a\0\xE1W\x80c\x821\xAB\x0B\x14a\x01\x1DWa\0\x85V[6a\0\x85W\0[_\x80\xFD[4\x80\x15a\0\x94W_\x80\xFD[Pa\0\xAF`\x04\x806\x03\x81\x01\x90a\0\xAA\x91\x90a\x16\x05V[a\x027V[`@Qa\0\xBC\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[a\0\xDF`\x04\x806\x03\x81\x01\x90a\0\xDA\x91\x90a\x194V[a\x04\x10V[\0[4\x80\x15a\0\xECW_\x80\xFD[Pa\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\x19{V[a\x05WV[`@Qa\x01\x14\x91\x90a\x19\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01(W_\x80\xFD[Pa\x01C`\x04\x806\x03\x81\x01\x90a\x01>\x91\x90a\x19\xF0V[a\x05\x8CV[`@Qa\x01P\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01dW_\x80\xFD[Pa\x01\x7F`\x04\x806\x03\x81\x01\x90a\x01z\x91\x90a\x1AlV[a\t\xB5V[`@Qa\x01\x8C\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA0W_\x80\xFD[Pa\x01\xA9a\x0C\x15V[`@Qa\x01\xB6\x91\x90a\x1A\xDFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xCAW_\x80\xFD[Pa\x01\xE5`\x04\x806\x03\x81\x01\x90a\x01\xE0\x91\x90a\x19\xF0V[a\x0C-V[`@Qa\x01\xF2\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x06W_\x80\xFD[Pa\x02!`\x04\x806\x03\x81\x01\x90a\x02\x1C\x91\x90a\x1A\xF8V[a\x10\xC8V[`@Qa\x02.\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[_\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x93\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xAFW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xD3\x91\x90a\x1B\x83V[P_`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01_\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xC1\x91\x90a\x1CvV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03\xDDW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x01\x91\x90a\x1C\xA3V[\x90P\x80\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04gW_\x80\xFD[_[\x81Q\x81\x10\x15a\x05SW_\x80\x83\x83\x81Q\x81\x10a\x04\x87Wa\x04\x86a\x1C\xCEV[[` \x02` \x01\x01Q_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x04\xBBWa\x04\xBAa\x1C\xCEV[[` \x02` \x01\x01Q` \x01Q\x85\x85\x81Q\x81\x10a\x04\xDAWa\x04\xD9a\x1C\xCEV[[` \x02` \x01\x01Q`@\x01Q`@Qa\x04\xF3\x91\x90a\x1DMV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x05-W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x052V[``\x91P[P\x91P\x91P\x81a\x05FWa\x05E\x81a\x13\xB9V[[PP\x80`\x01\x01\x90Pa\x04iV[PPV[_\x81\x81T\x81\x10a\x05eW_\x80\xFD[\x90_R` _ \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[_\x81_\x01` \x81\x01\x90a\x05\x9F\x91\x90a\x1DcV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xDF\x93\x92\x91\x90a\x1D\x8EV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xFBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x1F\x91\x90a\x1B\x83V[P_\x82` \x015\x90P_\x83_\x01` \x81\x01\x90a\x06;\x91\x90a\x1DcV[\x90P_\x80[\x85\x80`@\x01\x90a\x06P\x91\x90a\x1D\xCFV[\x90P\x81\x10\x15a\t-W`\x01\x86\x80`@\x01\x90a\x06k\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x06|Wa\x06{a\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x06\x93\x91\x90a\x1EgV[`\xFF\x16\x03a\x07\x1EWa\x07\x17\x84\x84\x88\x80`@\x01\x90a\x06\xB0\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x06\xC1Wa\x06\xC0a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06\xD9\x91\x90a\x1DcV[\x89\x80`@\x01\x90a\x06\xE9\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x06\xFAWa\x06\xF9a\x1C\xCEV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x07\x12\x91\x90a\x1E\x92V[a\x027V[\x91Pa\x08lV[_\x86\x80`@\x01\x90a\x07/\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x07@Wa\x07?a\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x07W\x91\x90a\x1EgV[`\xFF\x16\x03a\x07\xA9Wa\x07\xA2\x84\x84\x88\x80`@\x01\x90a\x07t\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x07\x85Wa\x07\x84a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\x9D\x91\x90a\x1DcV[a\x10\xC8V[\x91Pa\x08kV[`\x02\x86\x80`@\x01\x90a\x07\xBB\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x07\xCCWa\x07\xCBa\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x07\xE3\x91\x90a\x1EgV[`\xFF\x16\x03a\x08jWa\x08g\x84\x84\x88\x80`@\x01\x90a\x08\0\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x08\x11Wa\x08\x10a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08)\x91\x90a\x1DcV[\x89\x80`@\x01\x90a\x089\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x08JWa\x08Ia\x1C\xCEV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x08b\x91\x90a\x1E\xBDV[a\t\xB5V[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x08\x7F\x91\x90a\x1D\xCFV[\x82\x81\x81\x10a\x08\x90Wa\x08\x8Fa\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08\xA8\x91\x90a\x1DcV[\x92Pa\t `@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x13\xD0V[\x80\x80`\x01\x01\x91PPa\x06@V[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\ti\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xA9\x91\x90a\x1B\x83V[P\x82\x93PPPP\x91\x90PV[_\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x11\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n-W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nQ\x91\x90a\x1B\x83V[P_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\nnWa\nma\x16\xA5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\n\xA7W\x81` \x01[a\n\x94a\x14\xBDV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n\x8CW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81_\x81Q\x81\x10a\x0B\"Wa\x0B!a\x1C\xCEV[[` \x02` \x01\x01\x81\x90RP_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88_\x850a\x01,Ba\x0B|\x91\x90a\x1F\x15V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\x9C\x95\x94\x93\x92\x91\x90a \x94V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0B\xB7W=_\x80>=_\xFD[PPPP`@Q=_\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xDF\x91\x90a!\xACV[\x90P\x80`\x01\x82Qa\x0B\xF0\x91\x90a!\xF3V[\x81Q\x81\x10a\x0C\x01Wa\x0C\0a\x1C\xCEV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[_\x81_\x01` \x81\x01\x90a\x0C@\x91\x90a\x1DcV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\x80\x93\x92\x91\x90a\x1D\x8EV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x9CW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xC0\x91\x90a\x1B\x83V[P_\x82` \x015\x90P_\x83_\x01` \x81\x01\x90a\x0C\xDC\x91\x90a\x1DcV[\x90P_[\x84\x80`@\x01\x90a\x0C\xF0\x91\x90a\x1D\xCFV[\x90P\x81\x10\x15a\x10AW`\x01\x85\x80`@\x01\x90a\r\x0B\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\r\x1CWa\r\x1Ba\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\r3\x91\x90a\x1EgV[`\xFF\x16\x03a\r\xBDWa\r\xB7\x83\x83\x87\x80`@\x01\x90a\rP\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\raWa\r`a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\ry\x91\x90a\x1DcV[\x88\x80`@\x01\x90a\r\x89\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\r\x9AWa\r\x99a\x1C\xCEV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\r\xB2\x91\x90a\x1E\x92V[a\x027V[Pa\x0F\tV[_\x85\x80`@\x01\x90a\r\xCE\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\r\xDFWa\r\xDEa\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\r\xF6\x91\x90a\x1EgV[`\xFF\x16\x03a\x0EGWa\x0EA\x83\x83\x87\x80`@\x01\x90a\x0E\x13\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x0E$Wa\x0E#a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E<\x91\x90a\x1DcV[a\x10\xC8V[Pa\x0F\x08V[`\x02\x85\x80`@\x01\x90a\x0EY\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x0EjWa\x0Eia\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x0E\x81\x91\x90a\x1EgV[`\xFF\x16\x03a\x0F\x07Wa\x0F\x05\x83\x83\x87\x80`@\x01\x90a\x0E\x9E\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x0E\xAFWa\x0E\xAEa\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E\xC7\x91\x90a\x1DcV[\x88\x80`@\x01\x90a\x0E\xD7\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x0E\xE8Wa\x0E\xE7a\x1C\xCEV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x0F\0\x91\x90a\x1E\xBDV[a\t\xB5V[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0FB\x91\x90a\x1A\xDFV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F]W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\x81\x91\x90a\x1C\xA3V[\x92P\x84\x80`@\x01\x90a\x0F\x93\x91\x90a\x1D\xCFV[\x82\x81\x81\x10a\x0F\xA4Wa\x0F\xA3a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0F\xBC\x91\x90a\x1DcV[\x91Pa\x104`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x13\xD0V[\x80\x80`\x01\x01\x91PPa\x0C\xE0V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10}\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x10\x99W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xBD\x91\x90a\x1B\x83V[P\x81\x92PPP\x91\x90PV[_\x80\x84\x03a\x11KW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\t\x91\x90a\x1A\xDFV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11$W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11H\x91\x90a\x1C\xA3V[\x93P[_`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11gWa\x11fa\x16\xA5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11\x95W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81_\x81Q\x81\x10a\x11\xACWa\x11\xABa\x1C\xCEV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x11\xFBWa\x11\xFAa\x1C\xCEV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x12\x90\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x12\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xD0\x91\x90a\x1B\x83V[P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x13!\x91\x90a\x1F\x15V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x13A\x95\x94\x93\x92\x91\x90a#\x07V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x13\\W=_\x80>=_\xFD[PPPP`@Q=_\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\x84\x91\x90a!\xACV[\x90P\x80`\x01\x82Qa\x13\x95\x91\x90a!\xF3V[\x81Q\x81\x10a\x13\xA6Wa\x13\xA5a\x1C\xCEV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[_\x81Q\x90P_\x81\x11a\x13\xC9W_\x80\xFD[\x80\x82` \x01\xFD[a\x14l\x84\x84\x84\x84`@Q`$\x01a\x13\xEA\x94\x93\x92\x91\x90a#\xB1V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x14rV[PPPPV[a\x14\x89\x81a\x14\x81a\x14\x8Ca\x14\xB2V[c\xFF\xFF\xFF\xFF\x16V[PV[_\x81Q\x90P_jconsole.log\x90P` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[a\x15%\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x15\x15\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x15-a$\x02V[V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x15R\x81a\x15@V[\x81\x14a\x15\\W_\x80\xFD[PV[_\x815\x90Pa\x15m\x81a\x15IV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x15\x9C\x82a\x15sV[\x90P\x91\x90PV[a\x15\xAC\x81a\x15\x92V[\x81\x14a\x15\xB6W_\x80\xFD[PV[_\x815\x90Pa\x15\xC7\x81a\x15\xA3V[\x92\x91PPV[_b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x15\xE4\x81a\x15\xCDV[\x81\x14a\x15\xEEW_\x80\xFD[PV[_\x815\x90Pa\x15\xFF\x81a\x15\xDBV[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x16\x1DWa\x16\x1Ca\x158V[[_a\x16*\x87\x82\x88\x01a\x15_V[\x94PP` a\x16;\x87\x82\x88\x01a\x15\xB9V[\x93PP`@a\x16L\x87\x82\x88\x01a\x15\xB9V[\x92PP``a\x16]\x87\x82\x88\x01a\x15\xF1V[\x91PP\x92\x95\x91\x94P\x92PV[a\x16r\x81a\x15@V[\x82RPPV[_` \x82\x01\x90Pa\x16\x8B_\x83\x01\x84a\x16iV[\x92\x91PPV[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x16\xDB\x82a\x16\x95V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x16\xFAWa\x16\xF9a\x16\xA5V[[\x80`@RPPPV[_a\x17\x0Ca\x15/V[\x90Pa\x17\x18\x82\x82a\x16\xD2V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x177Wa\x176a\x16\xA5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17rWa\x17qa\x16\xA5V[[a\x17{\x82a\x16\x95V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x17\xA8a\x17\xA3\x84a\x17XV[a\x17\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x17\xC4Wa\x17\xC3a\x17TV[[a\x17\xCF\x84\x82\x85a\x17\x88V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x17\xEBWa\x17\xEAa\x16\x91V[[\x815a\x17\xFB\x84\x82` \x86\x01a\x17\x96V[\x91PP\x92\x91PPV[_``\x82\x84\x03\x12\x15a\x18\x19Wa\x18\x18a\x17LV[[a\x18#``a\x17\x03V[\x90P_a\x182\x84\x82\x85\x01a\x15\xB9V[_\x83\x01RP` a\x18E\x84\x82\x85\x01a\x15_V[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18iWa\x18ha\x17PV[[a\x18u\x84\x82\x85\x01a\x17\xD7V[`@\x83\x01RP\x92\x91PPV[_a\x18\x93a\x18\x8E\x84a\x17\x1DV[a\x17\x03V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x18\xB6Wa\x18\xB5a\x17HV[[\x83[\x81\x81\x10\x15a\x18\xFDW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDBWa\x18\xDAa\x16\x91V[[\x80\x86\x01a\x18\xE8\x89\x82a\x18\x04V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x18\xB8V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x19\x1BWa\x19\x1Aa\x16\x91V[[\x815a\x19+\x84\x82` \x86\x01a\x18\x81V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x19IWa\x19Ha\x158V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19fWa\x19ea\x15<V[[a\x19r\x84\x82\x85\x01a\x19\x07V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x19\x90Wa\x19\x8Fa\x158V[[_a\x19\x9D\x84\x82\x85\x01a\x15_V[\x91PP\x92\x91PPV[a\x19\xAF\x81a\x15\xCDV[\x82RPPV[_` \x82\x01\x90Pa\x19\xC8_\x83\x01\x84a\x19\xA6V[\x92\x91PPV[_\x80\xFD[_``\x82\x84\x03\x12\x15a\x19\xE7Wa\x19\xE6a\x19\xCEV[[\x81\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1A\x05Wa\x1A\x04a\x158V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\"Wa\x1A!a\x15<V[[a\x1A.\x84\x82\x85\x01a\x19\xD2V[\x91PP\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x1AK\x81a\x1A7V[\x81\x14a\x1AUW_\x80\xFD[PV[_\x815\x90Pa\x1Af\x81a\x1ABV[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1A\x84Wa\x1A\x83a\x158V[[_a\x1A\x91\x87\x82\x88\x01a\x15_V[\x94PP` a\x1A\xA2\x87\x82\x88\x01a\x15\xB9V[\x93PP`@a\x1A\xB3\x87\x82\x88\x01a\x15\xB9V[\x92PP``a\x1A\xC4\x87\x82\x88\x01a\x1AXV[\x91PP\x92\x95\x91\x94P\x92PV[a\x1A\xD9\x81a\x15\x92V[\x82RPPV[_` \x82\x01\x90Pa\x1A\xF2_\x83\x01\x84a\x1A\xD0V[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x1B\x0FWa\x1B\x0Ea\x158V[[_a\x1B\x1C\x86\x82\x87\x01a\x15_V[\x93PP` a\x1B-\x86\x82\x87\x01a\x15\xB9V[\x92PP`@a\x1B>\x86\x82\x87\x01a\x15\xB9V[\x91PP\x92P\x92P\x92V[_`@\x82\x01\x90Pa\x1B[_\x83\x01\x85a\x1A\xD0V[a\x1Bh` \x83\x01\x84a\x16iV[\x93\x92PPPV[_\x81Q\x90Pa\x1B}\x81a\x1ABV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1B\x98Wa\x1B\x97a\x158V[[_a\x1B\xA5\x84\x82\x85\x01a\x1BoV[\x91PP\x92\x91PPV[a\x1B\xB7\x81a\x15\x92V[\x82RPPV[a\x1B\xC6\x81a\x15\xCDV[\x82RPPV[a\x1B\xD5\x81a\x15@V[\x82RPPV[a\x1B\xE4\x81a\x15sV[\x82RPPV[`\xE0\x82\x01_\x82\x01Qa\x1B\xFE_\x85\x01\x82a\x1B\xAEV[P` \x82\x01Qa\x1C\x11` \x85\x01\x82a\x1B\xAEV[P`@\x82\x01Qa\x1C$`@\x85\x01\x82a\x1B\xBDV[P``\x82\x01Qa\x1C7``\x85\x01\x82a\x1B\xAEV[P`\x80\x82\x01Qa\x1CJ`\x80\x85\x01\x82a\x1B\xCCV[P`\xA0\x82\x01Qa\x1C]`\xA0\x85\x01\x82a\x1B\xCCV[P`\xC0\x82\x01Qa\x1Cp`\xC0\x85\x01\x82a\x1B\xDBV[PPPPV[_`\xE0\x82\x01\x90Pa\x1C\x89_\x83\x01\x84a\x1B\xEAV[\x92\x91PPV[_\x81Q\x90Pa\x1C\x9D\x81a\x15IV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1C\xB8Wa\x1C\xB7a\x158V[[_a\x1C\xC5\x84\x82\x85\x01a\x1C\x8FV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x1D'\x82a\x1C\xFBV[a\x1D1\x81\x85a\x1D\x05V[\x93Pa\x1DA\x81\x85` \x86\x01a\x1D\x0FV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1DX\x82\x84a\x1D\x1DV[\x91P\x81\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1DxWa\x1Dwa\x158V[[_a\x1D\x85\x84\x82\x85\x01a\x15\xB9V[\x91PP\x92\x91PPV[_``\x82\x01\x90Pa\x1D\xA1_\x83\x01\x86a\x1A\xD0V[a\x1D\xAE` \x83\x01\x85a\x1A\xD0V[a\x1D\xBB`@\x83\x01\x84a\x16iV[\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1D\xEBWa\x1D\xEAa\x1D\xC3V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1E\rWa\x1E\x0Ca\x1D\xC7V[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1E)Wa\x1E(a\x1D\xCBV[[P\x92P\x92\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x1EF\x81a\x1E1V[\x81\x14a\x1EPW_\x80\xFD[PV[_\x815\x90Pa\x1Ea\x81a\x1E=V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E|Wa\x1E{a\x158V[[_a\x1E\x89\x84\x82\x85\x01a\x1ESV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E\xA7Wa\x1E\xA6a\x158V[[_a\x1E\xB4\x84\x82\x85\x01a\x15\xF1V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E\xD2Wa\x1E\xD1a\x158V[[_a\x1E\xDF\x84\x82\x85\x01a\x1AXV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1F\x1F\x82a\x15@V[\x91Pa\x1F*\x83a\x15@V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1FBWa\x1FAa\x1E\xE8V[[\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x1Fta\x1Foa\x1Fj\x84a\x1FHV[a\x1FQV[a\x15@V[\x90P\x91\x90PV[a\x1F\x84\x81a\x1FZV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1F\xBC\x81a\x1A7V[\x82RPPV[`\x80\x82\x01_\x82\x01Qa\x1F\xD6_\x85\x01\x82a\x1B\xAEV[P` \x82\x01Qa\x1F\xE9` \x85\x01\x82a\x1B\xAEV[P`@\x82\x01Qa\x1F\xFC`@\x85\x01\x82a\x1F\xB3V[P``\x82\x01Qa \x0F``\x85\x01\x82a\x1B\xAEV[PPPPV[_a  \x83\x83a\x1F\xC2V[`\x80\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a B\x82a\x1F\x8AV[a L\x81\x85a\x1F\x94V[\x93Pa W\x83a\x1F\xA4V[\x80_[\x83\x81\x10\x15a \x87W\x81Qa n\x88\x82a \x15V[\x97Pa y\x83a ,V[\x92PP`\x01\x81\x01\x90Pa ZV[P\x85\x93PPPP\x92\x91PPV[_`\xA0\x82\x01\x90Pa \xA7_\x83\x01\x88a\x16iV[a \xB4` \x83\x01\x87a\x1F{V[\x81\x81\x03`@\x83\x01Ra \xC6\x81\x86a 8V[\x90Pa \xD5``\x83\x01\x85a\x1A\xD0V[a \xE2`\x80\x83\x01\x84a\x16iV[\x96\x95PPPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\x06Wa!\x05a\x16\xA5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_a!)a!$\x84a \xECV[a\x17\x03V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a!LWa!Ka\x17HV[[\x83[\x81\x81\x10\x15a!uW\x80a!a\x88\x82a\x1C\x8FV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa!NV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a!\x93Wa!\x92a\x16\x91V[[\x81Qa!\xA3\x84\x82` \x86\x01a!\x17V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a!\xC1Wa!\xC0a\x158V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xDEWa!\xDDa\x15<V[[a!\xEA\x84\x82\x85\x01a!\x7FV[\x91PP\x92\x91PPV[_a!\xFD\x82a\x15@V[\x91Pa\"\x08\x83a\x15@V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\" Wa\"\x1Fa\x1E\xE8V[[\x92\x91PPV[_\x81\x90P\x91\x90PV[_a\"Ia\"Da\"?\x84a\"&V[a\x1FQV[a\x15@V[\x90P\x91\x90PV[a\"Y\x81a\"/V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_a\"\x93\x83\x83a\x1B\xAEV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\"\xB5\x82a\"_V[a\"\xBF\x81\x85a\"iV[\x93Pa\"\xCA\x83a\"yV[\x80_[\x83\x81\x10\x15a\"\xFAW\x81Qa\"\xE1\x88\x82a\"\x88V[\x97Pa\"\xEC\x83a\"\x9FV[\x92PP`\x01\x81\x01\x90Pa\"\xCDV[P\x85\x93PPPP\x92\x91PPV[_`\xA0\x82\x01\x90Pa#\x1A_\x83\x01\x88a\x16iV[a#'` \x83\x01\x87a\"PV[\x81\x81\x03`@\x83\x01Ra#9\x81\x86a\"\xABV[\x90Pa#H``\x83\x01\x85a\x1A\xD0V[a#U`\x80\x83\x01\x84a\x16iV[\x96\x95PPPPPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_a#\x83\x82a#_V[a#\x8D\x81\x85a#iV[\x93Pa#\x9D\x81\x85` \x86\x01a\x1D\x0FV[a#\xA6\x81a\x16\x95V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01Ra#\xC9\x81\x87a#yV[\x90Pa#\xD8` \x83\x01\x86a\x16iV[\x81\x81\x03`@\x83\x01Ra#\xEA\x81\x85a#yV[\x90Pa#\xF9``\x83\x01\x84a\x1A\xD0V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xE9\xA2\x9EC\x94#\x85\xF0\xDCY)'/\xAE\xA8\x8By\xAE\xFFo\xD7DM\xD1\xD0\xB6\x100\xBA\xB4\x8A\x08dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061007e575f3560e01c8063886cdc9c1161004d578063886cdc9c14610159578063b11de7e314610195578063d1855626146101bf578063f1a52592146101fb57610085565b80630748b19b146100895780631749e1e3146100c55780636b1b9b20146100e15780638231ab0b1461011d57610085565b3661008557005b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190611605565b610237565b6040516100bc9190611678565b60405180910390f35b6100df60048036038101906100da9190611934565b610410565b005b3480156100ec575f80fd5b506101076004803603810190610102919061197b565b610557565b60405161011491906119b5565b60405180910390f35b348015610128575f80fd5b50610143600480360381019061013e91906119f0565b61058c565b6040516101509190611678565b60405180910390f35b348015610164575f80fd5b5061017f600480360381019061017a9190611a6c565b6109b5565b60405161018c9190611678565b60405180910390f35b3480156101a0575f80fd5b506101a9610c15565b6040516101b69190611adf565b60405180910390f35b3480156101ca575f80fd5b506101e560048036038101906101e091906119f0565b610c2d565b6040516101f29190611678565b60405180910390f35b348015610206575f80fd5b50610221600480360381019061021c9190611af8565b6110c8565b60405161022e9190611678565b60405180910390f35b5f8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610293929190611b48565b6020604051808303815f875af11580156102af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d39190611b83565b505f6040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018781526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103c19190611c76565b6020604051808303815f875af11580156103dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104019190611ca3565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467575f80fd5b5f5b8151811015610553575f8083838151811061048757610486611cce565b5b60200260200101515f015173ffffffffffffffffffffffffffffffffffffffff168484815181106104bb576104ba611cce565b5b6020026020010151602001518585815181106104da576104d9611cce565b5b6020026020010151604001516040516104f39190611d4d565b5f6040518083038185875af1925050503d805f811461052d576040519150601f19603f3d011682016040523d82523d5f602084013e610532565b606091505b50915091508161054657610545816113b9565b5b5050806001019050610469565b5050565b5f8181548110610565575f80fd5b905f5260205f2090600a9182820401919006600302915054906101000a900462ffffff1681565b5f815f01602081019061059f9190611d63565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b81526004016105df93929190611d8e565b6020604051808303815f875af11580156105fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061f9190611b83565b505f826020013590505f835f01602081019061063b9190611d63565b90505f805b8580604001906106509190611dcf565b905081101561092d57600186806040019061066b9190611dcf565b8381811061067c5761067b611cce565b5b9050608002015f0160208101906106939190611e67565b60ff160361071e5761071784848880604001906106b09190611dcf565b858181106106c1576106c0611cce565b5b90506080020160200160208101906106d99190611d63565b8980604001906106e99190611dcf565b868181106106fa576106f9611cce565b5b90506080020160400160208101906107129190611e92565b610237565b915061086c565b5f86806040019061072f9190611dcf565b838181106107405761073f611cce565b5b9050608002015f0160208101906107579190611e67565b60ff16036107a9576107a284848880604001906107749190611dcf565b8581811061078557610784611cce565b5b905060800201602001602081019061079d9190611d63565b6110c8565b915061086b565b60028680604001906107bb9190611dcf565b838181106107cc576107cb611cce565b5b9050608002015f0160208101906107e39190611e67565b60ff160361086a5761086784848880604001906108009190611dcf565b8581811061081157610810611cce565b5b90506080020160200160208101906108299190611d63565b8980604001906108399190611dcf565b8681811061084a57610849611cce565b5b90506080020160600160208101906108629190611ebd565b6109b5565b91505b5b5b81935085806040019061087f9190611dcf565b828181106108905761088f611cce565b5b90506080020160200160208101906108a89190611d63565b92506109206040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f660000000000000000000000000000000000000000000000000000000000815250866113d0565b8080600101915050610640565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610969929190611b48565b6020604051808303815f875af1158015610985573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a99190611b83565b50829350505050919050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610a11929190611b48565b6020604051808303815f875af1158015610a2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a519190611b83565b505f600167ffffffffffffffff811115610a6e57610a6d6116a5565b5b604051908082528060200260200182016040528015610aa757816020015b610a946114bd565b815260200190600190039081610a8c5790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020015f73ffffffffffffffffffffffffffffffffffffffff16815250815f81518110610b2257610b21611cce565b5b60200260200101819052505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9885f853061012c42610b7c9190611f15565b6040518663ffffffff1660e01b8152600401610b9c959493929190612094565b5f604051808303815f875af1158015610bb7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610bdf91906121ac565b90508060018251610bf091906121f3565b81518110610c0157610c00611cce565b5b602002602001015192505050949350505050565b731111111254eeb25477b68fb85ed929f73a96058281565b5f815f016020810190610c409190611d63565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b8152600401610c8093929190611d8e565b6020604051808303815f875af1158015610c9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc09190611b83565b505f826020013590505f835f016020810190610cdc9190611d63565b90505f5b848060400190610cf09190611dcf565b9050811015611041576001858060400190610d0b9190611dcf565b83818110610d1c57610d1b611cce565b5b9050608002015f016020810190610d339190611e67565b60ff1603610dbd57610db78383878060400190610d509190611dcf565b85818110610d6157610d60611cce565b5b9050608002016020016020810190610d799190611d63565b888060400190610d899190611dcf565b86818110610d9a57610d99611cce565b5b9050608002016040016020810190610db29190611e92565b610237565b50610f09565b5f858060400190610dce9190611dcf565b83818110610ddf57610dde611cce565b5b9050608002015f016020810190610df69190611e67565b60ff1603610e4757610e418383878060400190610e139190611dcf565b85818110610e2457610e23611cce565b5b9050608002016020016020810190610e3c9190611d63565b6110c8565b50610f08565b6002858060400190610e599190611dcf565b83818110610e6a57610e69611cce565b5b9050608002015f016020810190610e819190611e67565b60ff1603610f0757610f058383878060400190610e9e9190611dcf565b85818110610eaf57610eae611cce565b5b9050608002016020016020810190610ec79190611d63565b888060400190610ed79190611dcf565b86818110610ee857610ee7611cce565b5b9050608002016060016020810190610f009190611ebd565b6109b5565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f429190611adf565b602060405180830381865afa158015610f5d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f819190611ca3565b9250848060400190610f939190611dcf565b82818110610fa457610fa3611cce565b5b9050608002016020016020810190610fbc9190611d63565b91506110346040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f660000000000000000000000000000000000000000000000000000000000815250856113d0565b8080600101915050610ce0565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161107d929190611b48565b6020604051808303815f875af1158015611099573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bd9190611b83565b508192505050919050565b5f80840361114b578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111099190611adf565b602060405180830381865afa158015611124573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111489190611ca3565b93505b5f600267ffffffffffffffff811115611167576111666116a5565b5b6040519080825280602002602001820160405280156111955781602001602082028036833780820191505090505b50905083815f815181106111ac576111ab611cce565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816001815181106111fb576111fa611cce565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401611290929190611b48565b6020604051808303815f875af11580156112ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d09190611b83565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c426113219190611f15565b6040518663ffffffff1660e01b8152600401611341959493929190612307565b5f604051808303815f875af115801561135c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061138491906121ac565b9050806001825161139591906121f3565b815181106113a6576113a5611cce565b5b6020026020010151925050509392505050565b5f815190505f81116113c9575f80fd5b8082602001fd5b61146c848484846040516024016113ea94939291906123b1565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611472565b50505050565b6114898161148161148c6114b2565b63ffffffff16565b50565b5f815190505f6a636f6e736f6c652e6c6f679050602083015f808483855afa5050505050565b611525819050919050565b60405180608001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b61152d612402565b565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61155281611540565b811461155c575f80fd5b50565b5f8135905061156d81611549565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61159c82611573565b9050919050565b6115ac81611592565b81146115b6575f80fd5b50565b5f813590506115c7816115a3565b92915050565b5f62ffffff82169050919050565b6115e4816115cd565b81146115ee575f80fd5b50565b5f813590506115ff816115db565b92915050565b5f805f806080858703121561161d5761161c611538565b5b5f61162a8782880161155f565b945050602061163b878288016115b9565b935050604061164c878288016115b9565b925050606061165d878288016115f1565b91505092959194509250565b61167281611540565b82525050565b5f60208201905061168b5f830184611669565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6116db82611695565b810181811067ffffffffffffffff821117156116fa576116f96116a5565b5b80604052505050565b5f61170c61152f565b905061171882826116d2565b919050565b5f67ffffffffffffffff821115611737576117366116a5565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f67ffffffffffffffff821115611772576117716116a5565b5b61177b82611695565b9050602081019050919050565b828183375f83830152505050565b5f6117a86117a384611758565b611703565b9050828152602081018484840111156117c4576117c3611754565b5b6117cf848285611788565b509392505050565b5f82601f8301126117eb576117ea611691565b5b81356117fb848260208601611796565b91505092915050565b5f606082840312156118195761181861174c565b5b6118236060611703565b90505f611832848285016115b9565b5f8301525060206118458482850161155f565b602083015250604082013567ffffffffffffffff81111561186957611868611750565b5b611875848285016117d7565b60408301525092915050565b5f61189361188e8461171d565b611703565b905080838252602082019050602084028301858111156118b6576118b5611748565b5b835b818110156118fd57803567ffffffffffffffff8111156118db576118da611691565b5b8086016118e88982611804565b855260208501945050506020810190506118b8565b5050509392505050565b5f82601f83011261191b5761191a611691565b5b813561192b848260208601611881565b91505092915050565b5f6020828403121561194957611948611538565b5b5f82013567ffffffffffffffff8111156119665761196561153c565b5b61197284828501611907565b91505092915050565b5f602082840312156119905761198f611538565b5b5f61199d8482850161155f565b91505092915050565b6119af816115cd565b82525050565b5f6020820190506119c85f8301846119a6565b92915050565b5f80fd5b5f606082840312156119e7576119e66119ce565b5b81905092915050565b5f60208284031215611a0557611a04611538565b5b5f82013567ffffffffffffffff811115611a2257611a2161153c565b5b611a2e848285016119d2565b91505092915050565b5f8115159050919050565b611a4b81611a37565b8114611a55575f80fd5b50565b5f81359050611a6681611a42565b92915050565b5f805f8060808587031215611a8457611a83611538565b5b5f611a918782880161155f565b9450506020611aa2878288016115b9565b9350506040611ab3878288016115b9565b9250506060611ac487828801611a58565b91505092959194509250565b611ad981611592565b82525050565b5f602082019050611af25f830184611ad0565b92915050565b5f805f60608486031215611b0f57611b0e611538565b5b5f611b1c8682870161155f565b9350506020611b2d868287016115b9565b9250506040611b3e868287016115b9565b9150509250925092565b5f604082019050611b5b5f830185611ad0565b611b686020830184611669565b9392505050565b5f81519050611b7d81611a42565b92915050565b5f60208284031215611b9857611b97611538565b5b5f611ba584828501611b6f565b91505092915050565b611bb781611592565b82525050565b611bc6816115cd565b82525050565b611bd581611540565b82525050565b611be481611573565b82525050565b60e082015f820151611bfe5f850182611bae565b506020820151611c116020850182611bae565b506040820151611c246040850182611bbd565b506060820151611c376060850182611bae565b506080820151611c4a6080850182611bcc565b5060a0820151611c5d60a0850182611bcc565b5060c0820151611c7060c0850182611bdb565b50505050565b5f60e082019050611c895f830184611bea565b92915050565b5f81519050611c9d81611549565b92915050565b5f60208284031215611cb857611cb7611538565b5b5f611cc584828501611c8f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f611d2782611cfb565b611d318185611d05565b9350611d41818560208601611d0f565b80840191505092915050565b5f611d588284611d1d565b915081905092915050565b5f60208284031215611d7857611d77611538565b5b5f611d85848285016115b9565b91505092915050565b5f606082019050611da15f830186611ad0565b611dae6020830185611ad0565b611dbb6040830184611669565b949350505050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112611deb57611dea611dc3565b5b80840192508235915067ffffffffffffffff821115611e0d57611e0c611dc7565b5b602083019250608082023603831315611e2957611e28611dcb565b5b509250929050565b5f60ff82169050919050565b611e4681611e31565b8114611e50575f80fd5b50565b5f81359050611e6181611e3d565b92915050565b5f60208284031215611e7c57611e7b611538565b5b5f611e8984828501611e53565b91505092915050565b5f60208284031215611ea757611ea6611538565b5b5f611eb4848285016115f1565b91505092915050565b5f60208284031215611ed257611ed1611538565b5b5f611edf84828501611a58565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611f1f82611540565b9150611f2a83611540565b9250828201905080821115611f4257611f41611ee8565b5b92915050565b5f819050919050565b5f819050919050565b5f611f74611f6f611f6a84611f48565b611f51565b611540565b9050919050565b611f8481611f5a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611fbc81611a37565b82525050565b608082015f820151611fd65f850182611bae565b506020820151611fe96020850182611bae565b506040820151611ffc6040850182611fb3565b50606082015161200f6060850182611bae565b50505050565b5f6120208383611fc2565b60808301905092915050565b5f602082019050919050565b5f61204282611f8a565b61204c8185611f94565b935061205783611fa4565b805f5b8381101561208757815161206e8882612015565b97506120798361202c565b92505060018101905061205a565b5085935050505092915050565b5f60a0820190506120a75f830188611669565b6120b46020830187611f7b565b81810360408301526120c68186612038565b90506120d56060830185611ad0565b6120e26080830184611669565b9695505050505050565b5f67ffffffffffffffff821115612106576121056116a5565b5b602082029050602081019050919050565b5f612129612124846120ec565b611703565b9050808382526020820190506020840283018581111561214c5761214b611748565b5b835b8181101561217557806121618882611c8f565b84526020840193505060208101905061214e565b5050509392505050565b5f82601f83011261219357612192611691565b5b81516121a3848260208601612117565b91505092915050565b5f602082840312156121c1576121c0611538565b5b5f82015167ffffffffffffffff8111156121de576121dd61153c565b5b6121ea8482850161217f565b91505092915050565b5f6121fd82611540565b915061220883611540565b92508282039050818111156122205761221f611ee8565b5b92915050565b5f819050919050565b5f61224961224461223f84612226565b611f51565b611540565b9050919050565b6122598161222f565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6122938383611bae565b60208301905092915050565b5f602082019050919050565b5f6122b58261225f565b6122bf8185612269565b93506122ca83612279565b805f5b838110156122fa5781516122e18882612288565b97506122ec8361229f565b9250506001810190506122cd565b5085935050505092915050565b5f60a08201905061231a5f830188611669565b6123276020830187612250565b818103604083015261233981866122ab565b90506123486060830185611ad0565b6123556080830184611669565b9695505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f6123838261235f565b61238d8185612369565b935061239d818560208601611d0f565b6123a681611695565b840191505092915050565b5f6080820190508181035f8301526123c98187612379565b90506123d86020830186611669565b81810360408301526123ea8185612379565b90506123f96060830184611ad0565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52605160045260245ffdfea2646970667358221220e9a29e43942385f0dc5929272faea88b79aeff6fd7444dd1d0b61030bab48a0864736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0~W_5`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0MW\x80c\x88l\xDC\x9C\x14a\x01YW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x95W\x80c\xD1\x85V&\x14a\x01\xBFW\x80c\xF1\xA5%\x92\x14a\x01\xFBWa\0\x85V[\x80c\x07H\xB1\x9B\x14a\0\x89W\x80c\x17I\xE1\xE3\x14a\0\xC5W\x80ck\x1B\x9B \x14a\0\xE1W\x80c\x821\xAB\x0B\x14a\x01\x1DWa\0\x85V[6a\0\x85W\0[_\x80\xFD[4\x80\x15a\0\x94W_\x80\xFD[Pa\0\xAF`\x04\x806\x03\x81\x01\x90a\0\xAA\x91\x90a\x16\x05V[a\x027V[`@Qa\0\xBC\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[a\0\xDF`\x04\x806\x03\x81\x01\x90a\0\xDA\x91\x90a\x194V[a\x04\x10V[\0[4\x80\x15a\0\xECW_\x80\xFD[Pa\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\x19{V[a\x05WV[`@Qa\x01\x14\x91\x90a\x19\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01(W_\x80\xFD[Pa\x01C`\x04\x806\x03\x81\x01\x90a\x01>\x91\x90a\x19\xF0V[a\x05\x8CV[`@Qa\x01P\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01dW_\x80\xFD[Pa\x01\x7F`\x04\x806\x03\x81\x01\x90a\x01z\x91\x90a\x1AlV[a\t\xB5V[`@Qa\x01\x8C\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA0W_\x80\xFD[Pa\x01\xA9a\x0C\x15V[`@Qa\x01\xB6\x91\x90a\x1A\xDFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xCAW_\x80\xFD[Pa\x01\xE5`\x04\x806\x03\x81\x01\x90a\x01\xE0\x91\x90a\x19\xF0V[a\x0C-V[`@Qa\x01\xF2\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x06W_\x80\xFD[Pa\x02!`\x04\x806\x03\x81\x01\x90a\x02\x1C\x91\x90a\x1A\xF8V[a\x10\xC8V[`@Qa\x02.\x91\x90a\x16xV[`@Q\x80\x91\x03\x90\xF3[_\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x93\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x02\xAFW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xD3\x91\x90a\x1B\x83V[P_`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01_\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xC1\x91\x90a\x1CvV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03\xDDW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x01\x91\x90a\x1C\xA3V[\x90P\x80\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04gW_\x80\xFD[_[\x81Q\x81\x10\x15a\x05SW_\x80\x83\x83\x81Q\x81\x10a\x04\x87Wa\x04\x86a\x1C\xCEV[[` \x02` \x01\x01Q_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x04\xBBWa\x04\xBAa\x1C\xCEV[[` \x02` \x01\x01Q` \x01Q\x85\x85\x81Q\x81\x10a\x04\xDAWa\x04\xD9a\x1C\xCEV[[` \x02` \x01\x01Q`@\x01Q`@Qa\x04\xF3\x91\x90a\x1DMV[_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x05-W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x052V[``\x91P[P\x91P\x91P\x81a\x05FWa\x05E\x81a\x13\xB9V[[PP\x80`\x01\x01\x90Pa\x04iV[PPV[_\x81\x81T\x81\x10a\x05eW_\x80\xFD[\x90_R` _ \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[_\x81_\x01` \x81\x01\x90a\x05\x9F\x91\x90a\x1DcV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xDF\x93\x92\x91\x90a\x1D\x8EV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xFBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x1F\x91\x90a\x1B\x83V[P_\x82` \x015\x90P_\x83_\x01` \x81\x01\x90a\x06;\x91\x90a\x1DcV[\x90P_\x80[\x85\x80`@\x01\x90a\x06P\x91\x90a\x1D\xCFV[\x90P\x81\x10\x15a\t-W`\x01\x86\x80`@\x01\x90a\x06k\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x06|Wa\x06{a\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x06\x93\x91\x90a\x1EgV[`\xFF\x16\x03a\x07\x1EWa\x07\x17\x84\x84\x88\x80`@\x01\x90a\x06\xB0\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x06\xC1Wa\x06\xC0a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06\xD9\x91\x90a\x1DcV[\x89\x80`@\x01\x90a\x06\xE9\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x06\xFAWa\x06\xF9a\x1C\xCEV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x07\x12\x91\x90a\x1E\x92V[a\x027V[\x91Pa\x08lV[_\x86\x80`@\x01\x90a\x07/\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x07@Wa\x07?a\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x07W\x91\x90a\x1EgV[`\xFF\x16\x03a\x07\xA9Wa\x07\xA2\x84\x84\x88\x80`@\x01\x90a\x07t\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x07\x85Wa\x07\x84a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\x9D\x91\x90a\x1DcV[a\x10\xC8V[\x91Pa\x08kV[`\x02\x86\x80`@\x01\x90a\x07\xBB\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x07\xCCWa\x07\xCBa\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x07\xE3\x91\x90a\x1EgV[`\xFF\x16\x03a\x08jWa\x08g\x84\x84\x88\x80`@\x01\x90a\x08\0\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x08\x11Wa\x08\x10a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08)\x91\x90a\x1DcV[\x89\x80`@\x01\x90a\x089\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x08JWa\x08Ia\x1C\xCEV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x08b\x91\x90a\x1E\xBDV[a\t\xB5V[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x08\x7F\x91\x90a\x1D\xCFV[\x82\x81\x81\x10a\x08\x90Wa\x08\x8Fa\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08\xA8\x91\x90a\x1DcV[\x92Pa\t `@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x13\xD0V[\x80\x80`\x01\x01\x91PPa\x06@V[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\ti\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xA9\x91\x90a\x1B\x83V[P\x82\x93PPPP\x91\x90PV[_\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x11\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n-W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nQ\x91\x90a\x1B\x83V[P_`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\nnWa\nma\x16\xA5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\n\xA7W\x81` \x01[a\n\x94a\x14\xBDV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n\x8CW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81_\x81Q\x81\x10a\x0B\"Wa\x0B!a\x1C\xCEV[[` \x02` \x01\x01\x81\x90RP_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88_\x850a\x01,Ba\x0B|\x91\x90a\x1F\x15V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\x9C\x95\x94\x93\x92\x91\x90a \x94V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0B\xB7W=_\x80>=_\xFD[PPPP`@Q=_\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xDF\x91\x90a!\xACV[\x90P\x80`\x01\x82Qa\x0B\xF0\x91\x90a!\xF3V[\x81Q\x81\x10a\x0C\x01Wa\x0C\0a\x1C\xCEV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[_\x81_\x01` \x81\x01\x90a\x0C@\x91\x90a\x1DcV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\x80\x93\x92\x91\x90a\x1D\x8EV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x9CW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xC0\x91\x90a\x1B\x83V[P_\x82` \x015\x90P_\x83_\x01` \x81\x01\x90a\x0C\xDC\x91\x90a\x1DcV[\x90P_[\x84\x80`@\x01\x90a\x0C\xF0\x91\x90a\x1D\xCFV[\x90P\x81\x10\x15a\x10AW`\x01\x85\x80`@\x01\x90a\r\x0B\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\r\x1CWa\r\x1Ba\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\r3\x91\x90a\x1EgV[`\xFF\x16\x03a\r\xBDWa\r\xB7\x83\x83\x87\x80`@\x01\x90a\rP\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\raWa\r`a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\ry\x91\x90a\x1DcV[\x88\x80`@\x01\x90a\r\x89\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\r\x9AWa\r\x99a\x1C\xCEV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\r\xB2\x91\x90a\x1E\x92V[a\x027V[Pa\x0F\tV[_\x85\x80`@\x01\x90a\r\xCE\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\r\xDFWa\r\xDEa\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\r\xF6\x91\x90a\x1EgV[`\xFF\x16\x03a\x0EGWa\x0EA\x83\x83\x87\x80`@\x01\x90a\x0E\x13\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x0E$Wa\x0E#a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E<\x91\x90a\x1DcV[a\x10\xC8V[Pa\x0F\x08V[`\x02\x85\x80`@\x01\x90a\x0EY\x91\x90a\x1D\xCFV[\x83\x81\x81\x10a\x0EjWa\x0Eia\x1C\xCEV[[\x90P`\x80\x02\x01_\x01` \x81\x01\x90a\x0E\x81\x91\x90a\x1EgV[`\xFF\x16\x03a\x0F\x07Wa\x0F\x05\x83\x83\x87\x80`@\x01\x90a\x0E\x9E\x91\x90a\x1D\xCFV[\x85\x81\x81\x10a\x0E\xAFWa\x0E\xAEa\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E\xC7\x91\x90a\x1DcV[\x88\x80`@\x01\x90a\x0E\xD7\x91\x90a\x1D\xCFV[\x86\x81\x81\x10a\x0E\xE8Wa\x0E\xE7a\x1C\xCEV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x0F\0\x91\x90a\x1E\xBDV[a\t\xB5V[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0FB\x91\x90a\x1A\xDFV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F]W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\x81\x91\x90a\x1C\xA3V[\x92P\x84\x80`@\x01\x90a\x0F\x93\x91\x90a\x1D\xCFV[\x82\x81\x81\x10a\x0F\xA4Wa\x0F\xA3a\x1C\xCEV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0F\xBC\x91\x90a\x1DcV[\x91Pa\x104`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x13\xD0V[\x80\x80`\x01\x01\x91PPa\x0C\xE0V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10}\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x10\x99W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\xBD\x91\x90a\x1B\x83V[P\x81\x92PPP\x91\x90PV[_\x80\x84\x03a\x11KW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\t\x91\x90a\x1A\xDFV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11$W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11H\x91\x90a\x1C\xA3V[\x93P[_`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11gWa\x11fa\x16\xA5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11\x95W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81_\x81Q\x81\x10a\x11\xACWa\x11\xABa\x1C\xCEV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x11\xFBWa\x11\xFAa\x1C\xCEV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x12\x90\x92\x91\x90a\x1BHV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x12\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xD0\x91\x90a\x1B\x83V[P_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x13!\x91\x90a\x1F\x15V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x13A\x95\x94\x93\x92\x91\x90a#\x07V[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x13\\W=_\x80>=_\xFD[PPPP`@Q=_\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\x84\x91\x90a!\xACV[\x90P\x80`\x01\x82Qa\x13\x95\x91\x90a!\xF3V[\x81Q\x81\x10a\x13\xA6Wa\x13\xA5a\x1C\xCEV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[_\x81Q\x90P_\x81\x11a\x13\xC9W_\x80\xFD[\x80\x82` \x01\xFD[a\x14l\x84\x84\x84\x84`@Q`$\x01a\x13\xEA\x94\x93\x92\x91\x90a#\xB1V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x14rV[PPPPV[a\x14\x89\x81a\x14\x81a\x14\x8Ca\x14\xB2V[c\xFF\xFF\xFF\xFF\x16V[PV[_\x81Q\x90P_jconsole.log\x90P` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[a\x15%\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x15\x15\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x15-a$\x02V[V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a\x15R\x81a\x15@V[\x81\x14a\x15\\W_\x80\xFD[PV[_\x815\x90Pa\x15m\x81a\x15IV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x15\x9C\x82a\x15sV[\x90P\x91\x90PV[a\x15\xAC\x81a\x15\x92V[\x81\x14a\x15\xB6W_\x80\xFD[PV[_\x815\x90Pa\x15\xC7\x81a\x15\xA3V[\x92\x91PPV[_b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x15\xE4\x81a\x15\xCDV[\x81\x14a\x15\xEEW_\x80\xFD[PV[_\x815\x90Pa\x15\xFF\x81a\x15\xDBV[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x16\x1DWa\x16\x1Ca\x158V[[_a\x16*\x87\x82\x88\x01a\x15_V[\x94PP` a\x16;\x87\x82\x88\x01a\x15\xB9V[\x93PP`@a\x16L\x87\x82\x88\x01a\x15\xB9V[\x92PP``a\x16]\x87\x82\x88\x01a\x15\xF1V[\x91PP\x92\x95\x91\x94P\x92PV[a\x16r\x81a\x15@V[\x82RPPV[_` \x82\x01\x90Pa\x16\x8B_\x83\x01\x84a\x16iV[\x92\x91PPV[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x16\xDB\x82a\x16\x95V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x16\xFAWa\x16\xF9a\x16\xA5V[[\x80`@RPPPV[_a\x17\x0Ca\x15/V[\x90Pa\x17\x18\x82\x82a\x16\xD2V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x177Wa\x176a\x16\xA5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17rWa\x17qa\x16\xA5V[[a\x17{\x82a\x16\x95V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\x17\xA8a\x17\xA3\x84a\x17XV[a\x17\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x17\xC4Wa\x17\xC3a\x17TV[[a\x17\xCF\x84\x82\x85a\x17\x88V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x17\xEBWa\x17\xEAa\x16\x91V[[\x815a\x17\xFB\x84\x82` \x86\x01a\x17\x96V[\x91PP\x92\x91PPV[_``\x82\x84\x03\x12\x15a\x18\x19Wa\x18\x18a\x17LV[[a\x18#``a\x17\x03V[\x90P_a\x182\x84\x82\x85\x01a\x15\xB9V[_\x83\x01RP` a\x18E\x84\x82\x85\x01a\x15_V[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18iWa\x18ha\x17PV[[a\x18u\x84\x82\x85\x01a\x17\xD7V[`@\x83\x01RP\x92\x91PPV[_a\x18\x93a\x18\x8E\x84a\x17\x1DV[a\x17\x03V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x18\xB6Wa\x18\xB5a\x17HV[[\x83[\x81\x81\x10\x15a\x18\xFDW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xDBWa\x18\xDAa\x16\x91V[[\x80\x86\x01a\x18\xE8\x89\x82a\x18\x04V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x18\xB8V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x19\x1BWa\x19\x1Aa\x16\x91V[[\x815a\x19+\x84\x82` \x86\x01a\x18\x81V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x19IWa\x19Ha\x158V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19fWa\x19ea\x15<V[[a\x19r\x84\x82\x85\x01a\x19\x07V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x19\x90Wa\x19\x8Fa\x158V[[_a\x19\x9D\x84\x82\x85\x01a\x15_V[\x91PP\x92\x91PPV[a\x19\xAF\x81a\x15\xCDV[\x82RPPV[_` \x82\x01\x90Pa\x19\xC8_\x83\x01\x84a\x19\xA6V[\x92\x91PPV[_\x80\xFD[_``\x82\x84\x03\x12\x15a\x19\xE7Wa\x19\xE6a\x19\xCEV[[\x81\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1A\x05Wa\x1A\x04a\x158V[[_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\"Wa\x1A!a\x15<V[[a\x1A.\x84\x82\x85\x01a\x19\xD2V[\x91PP\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x1AK\x81a\x1A7V[\x81\x14a\x1AUW_\x80\xFD[PV[_\x815\x90Pa\x1Af\x81a\x1ABV[\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\x1A\x84Wa\x1A\x83a\x158V[[_a\x1A\x91\x87\x82\x88\x01a\x15_V[\x94PP` a\x1A\xA2\x87\x82\x88\x01a\x15\xB9V[\x93PP`@a\x1A\xB3\x87\x82\x88\x01a\x15\xB9V[\x92PP``a\x1A\xC4\x87\x82\x88\x01a\x1AXV[\x91PP\x92\x95\x91\x94P\x92PV[a\x1A\xD9\x81a\x15\x92V[\x82RPPV[_` \x82\x01\x90Pa\x1A\xF2_\x83\x01\x84a\x1A\xD0V[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x1B\x0FWa\x1B\x0Ea\x158V[[_a\x1B\x1C\x86\x82\x87\x01a\x15_V[\x93PP` a\x1B-\x86\x82\x87\x01a\x15\xB9V[\x92PP`@a\x1B>\x86\x82\x87\x01a\x15\xB9V[\x91PP\x92P\x92P\x92V[_`@\x82\x01\x90Pa\x1B[_\x83\x01\x85a\x1A\xD0V[a\x1Bh` \x83\x01\x84a\x16iV[\x93\x92PPPV[_\x81Q\x90Pa\x1B}\x81a\x1ABV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1B\x98Wa\x1B\x97a\x158V[[_a\x1B\xA5\x84\x82\x85\x01a\x1BoV[\x91PP\x92\x91PPV[a\x1B\xB7\x81a\x15\x92V[\x82RPPV[a\x1B\xC6\x81a\x15\xCDV[\x82RPPV[a\x1B\xD5\x81a\x15@V[\x82RPPV[a\x1B\xE4\x81a\x15sV[\x82RPPV[`\xE0\x82\x01_\x82\x01Qa\x1B\xFE_\x85\x01\x82a\x1B\xAEV[P` \x82\x01Qa\x1C\x11` \x85\x01\x82a\x1B\xAEV[P`@\x82\x01Qa\x1C$`@\x85\x01\x82a\x1B\xBDV[P``\x82\x01Qa\x1C7``\x85\x01\x82a\x1B\xAEV[P`\x80\x82\x01Qa\x1CJ`\x80\x85\x01\x82a\x1B\xCCV[P`\xA0\x82\x01Qa\x1C]`\xA0\x85\x01\x82a\x1B\xCCV[P`\xC0\x82\x01Qa\x1Cp`\xC0\x85\x01\x82a\x1B\xDBV[PPPPV[_`\xE0\x82\x01\x90Pa\x1C\x89_\x83\x01\x84a\x1B\xEAV[\x92\x91PPV[_\x81Q\x90Pa\x1C\x9D\x81a\x15IV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1C\xB8Wa\x1C\xB7a\x158V[[_a\x1C\xC5\x84\x82\x85\x01a\x1C\x8FV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x1D'\x82a\x1C\xFBV[a\x1D1\x81\x85a\x1D\x05V[\x93Pa\x1DA\x81\x85` \x86\x01a\x1D\x0FV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x1DX\x82\x84a\x1D\x1DV[\x91P\x81\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1DxWa\x1Dwa\x158V[[_a\x1D\x85\x84\x82\x85\x01a\x15\xB9V[\x91PP\x92\x91PPV[_``\x82\x01\x90Pa\x1D\xA1_\x83\x01\x86a\x1A\xD0V[a\x1D\xAE` \x83\x01\x85a\x1A\xD0V[a\x1D\xBB`@\x83\x01\x84a\x16iV[\x94\x93PPPPV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1D\xEBWa\x1D\xEAa\x1D\xC3V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1E\rWa\x1E\x0Ca\x1D\xC7V[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1E)Wa\x1E(a\x1D\xCBV[[P\x92P\x92\x90PV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x1EF\x81a\x1E1V[\x81\x14a\x1EPW_\x80\xFD[PV[_\x815\x90Pa\x1Ea\x81a\x1E=V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E|Wa\x1E{a\x158V[[_a\x1E\x89\x84\x82\x85\x01a\x1ESV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E\xA7Wa\x1E\xA6a\x158V[[_a\x1E\xB4\x84\x82\x85\x01a\x15\xF1V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1E\xD2Wa\x1E\xD1a\x158V[[_a\x1E\xDF\x84\x82\x85\x01a\x1AXV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1F\x1F\x82a\x15@V[\x91Pa\x1F*\x83a\x15@V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1FBWa\x1FAa\x1E\xE8V[[\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a\x1Fta\x1Foa\x1Fj\x84a\x1FHV[a\x1FQV[a\x15@V[\x90P\x91\x90PV[a\x1F\x84\x81a\x1FZV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1F\xBC\x81a\x1A7V[\x82RPPV[`\x80\x82\x01_\x82\x01Qa\x1F\xD6_\x85\x01\x82a\x1B\xAEV[P` \x82\x01Qa\x1F\xE9` \x85\x01\x82a\x1B\xAEV[P`@\x82\x01Qa\x1F\xFC`@\x85\x01\x82a\x1F\xB3V[P``\x82\x01Qa \x0F``\x85\x01\x82a\x1B\xAEV[PPPPV[_a  \x83\x83a\x1F\xC2V[`\x80\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a B\x82a\x1F\x8AV[a L\x81\x85a\x1F\x94V[\x93Pa W\x83a\x1F\xA4V[\x80_[\x83\x81\x10\x15a \x87W\x81Qa n\x88\x82a \x15V[\x97Pa y\x83a ,V[\x92PP`\x01\x81\x01\x90Pa ZV[P\x85\x93PPPP\x92\x91PPV[_`\xA0\x82\x01\x90Pa \xA7_\x83\x01\x88a\x16iV[a \xB4` \x83\x01\x87a\x1F{V[\x81\x81\x03`@\x83\x01Ra \xC6\x81\x86a 8V[\x90Pa \xD5``\x83\x01\x85a\x1A\xD0V[a \xE2`\x80\x83\x01\x84a\x16iV[\x96\x95PPPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\x06Wa!\x05a\x16\xA5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_a!)a!$\x84a \xECV[a\x17\x03V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a!LWa!Ka\x17HV[[\x83[\x81\x81\x10\x15a!uW\x80a!a\x88\x82a\x1C\x8FV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa!NV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a!\x93Wa!\x92a\x16\x91V[[\x81Qa!\xA3\x84\x82` \x86\x01a!\x17V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a!\xC1Wa!\xC0a\x158V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xDEWa!\xDDa\x15<V[[a!\xEA\x84\x82\x85\x01a!\x7FV[\x91PP\x92\x91PPV[_a!\xFD\x82a\x15@V[\x91Pa\"\x08\x83a\x15@V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\" Wa\"\x1Fa\x1E\xE8V[[\x92\x91PPV[_\x81\x90P\x91\x90PV[_a\"Ia\"Da\"?\x84a\"&V[a\x1FQV[a\x15@V[\x90P\x91\x90PV[a\"Y\x81a\"/V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_a\"\x93\x83\x83a\x1B\xAEV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\"\xB5\x82a\"_V[a\"\xBF\x81\x85a\"iV[\x93Pa\"\xCA\x83a\"yV[\x80_[\x83\x81\x10\x15a\"\xFAW\x81Qa\"\xE1\x88\x82a\"\x88V[\x97Pa\"\xEC\x83a\"\x9FV[\x92PP`\x01\x81\x01\x90Pa\"\xCDV[P\x85\x93PPPP\x92\x91PPV[_`\xA0\x82\x01\x90Pa#\x1A_\x83\x01\x88a\x16iV[a#'` \x83\x01\x87a\"PV[\x81\x81\x03`@\x83\x01Ra#9\x81\x86a\"\xABV[\x90Pa#H``\x83\x01\x85a\x1A\xD0V[a#U`\x80\x83\x01\x84a\x16iV[\x96\x95PPPPPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_a#\x83\x82a#_V[a#\x8D\x81\x85a#iV[\x93Pa#\x9D\x81\x85` \x86\x01a\x1D\x0FV[a#\xA6\x81a\x16\x95V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01Ra#\xC9\x81\x87a#yV[\x90Pa#\xD8` \x83\x01\x86a\x16iV[\x81\x81\x03`@\x83\x01Ra#\xEA\x81\x85a#yV[\x90Pa#\xF9``\x83\x01\x84a\x1A\xD0V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`Q`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xE9\xA2\x9EC\x94#\x85\xF0\xDCY)'/\xAE\xA8\x8By\xAE\xFFo\xD7DM\xD1\xD0\xB6\x100\xBA\xB4\x8A\x08dsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct Call { address target; uint256 value; bytes data; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call> for UnderlyingRustTuple<'_> {
            fn from(value: Call) -> Self {
                (value.target, value.value, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    value: tuple.1,
                    data: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call {
            const NAME: &'static str = "Call";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call(address target,uint256 value,bytes data)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Swap { uint8 swapType; address tokenOut; uint24 feeTier; bool stable; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Swap {
        pub swapType: u8,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
        pub stable: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Swap> for UnderlyingRustTuple<'_> {
            fn from(value: Swap) -> Self {
                (value.swapType, value.tokenOut, value.feeTier, value.stable)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Swap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    swapType: tuple.0,
                    tokenOut: tuple.1,
                    feeTier: tuple.2,
                    stable: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Swap {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Swap {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.swapType),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Swap {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Swap {
            const NAME: &'static str = "Swap";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Swap(uint8 swapType,address tokenOut,uint24 feeTier,bool stable)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swapType)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feeTier)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Swap {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.swapType,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeTier,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swapType,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeTier,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct SwapData { address tokenIn; uint256 amountIn; Swap[] swaps; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapData {
        pub tokenIn: alloy::sol_types::private::Address,
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub swaps: alloy::sol_types::private::Vec<
            <Swap as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<Swap>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<<Swap as alloy::sol_types::SolType>::RustType>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapData> for UnderlyingRustTuple<'_> {
            fn from(value: SwapData) -> Self {
                (value.tokenIn, value.amountIn, value.swaps)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenIn: tuple.0,
                    amountIn: tuple.1,
                    swaps: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::tokenize(&self.swaps),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapData {
            const NAME: &'static str = "SwapData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapData(address tokenIn,uint256 amountIn,Swap[] swaps)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Swap as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Swap as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountIn)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swaps)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountIn,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.swaps)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountIn,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    Swap,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swaps,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
        pub _uniswapV3Router: alloy::sol_types::private::Address,
        pub _uniswapV2Router: alloy::sol_types::private::Address,
        pub _aerodromeRouter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._owner,
                        value._uniswapV3Router,
                        value._uniswapV2Router,
                        value._aerodromeRouter,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _uniswapV3Router: tuple.1,
                        _uniswapV2Router: tuple.2,
                        _aerodromeRouter: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._aerodromeRouter,
                    ),
                )
            }
        }
    };
    /**Function with signature `AGGREGATION_ROUTER_V5()` and selector `0xb11de7e3`.
```solidity
function AGGREGATION_ROUTER_V5() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Call {}
    ///Container type for the return parameters of the [`AGGREGATION_ROUTER_V5()`](AGGREGATION_ROUTER_V5Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATION_ROUTER_V5Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AGGREGATION_ROUTER_V5Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATION_ROUTER_V5()";
            const SELECTOR: [u8; 4] = [177u8, 29u8, 231u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_TIERS(uint256)` and selector `0x6b1b9b20`.
```solidity
function FEE_TIERS(uint256) external view returns (uint24);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`FEE_TIERS(uint256)`](FEE_TIERSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_TIERSCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_TIERSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_TIERS(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 27u8, 155u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall((address,uint256,bytes)[])` and selector `0x1749e1e3`.
```solidity
function multicall(Call[] memory calls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`multicall((address,uint256,bytes)[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall((address,uint256,bytes)[])";
            const SELECTOR: [u8; 4] = [23u8, 73u8, 225u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swap((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0x8231ab0b`.
```solidity
function swap(SwapData memory data) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub data: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swap((address,uint256,(uint8,address,uint24,bool)[]))`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [130u8, 49u8, 171u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.data),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAerodrome(uint256,address,address,bool)` and selector `0x886cdc9c`.
```solidity
function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeCall {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub stable: bool,
    }
    ///Container type for the return parameters of the [`swapAerodrome(uint256,address,address,bool)`](swapAerodromeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeCall) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.stable)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        stable: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAerodromeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAerodromeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAerodrome(uint256,address,address,bool)";
            const SELECTOR: [u8; 4] = [136u8, 108u8, 220u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAll((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0xd1855626`.
```solidity
function swapAll(SwapData memory swapData) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllCall {
        pub swapData: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swapAll((address,uint256,(uint8,address,uint24,bool)[]))`](swapAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllCall) -> Self {
                    (value.swapData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAllCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAll((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [209u8, 133u8, 86u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.swapData),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV2(uint256,address,address)` and selector `0xf1a52592`.
```solidity
function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`swapUniswapV2(uint256,address,address)`](swapUniswapV2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV2(uint256,address,address)";
            const SELECTOR: [u8; 4] = [241u8, 165u8, 37u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV3(uint256,address,address,uint24)` and selector `0x0748b19b`.
```solidity
function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
    }
    ///Container type for the return parameters of the [`swapUniswapV3(uint256,address,address,uint24)`](swapUniswapV3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.feeTier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        feeTier: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV3(uint256,address,address,uint24)";
            const SELECTOR: [u8; 4] = [7u8, 72u8, 177u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicExecutor`](self) function calls.
    pub enum AtomicExecutorCalls {
        AGGREGATION_ROUTER_V5(AGGREGATION_ROUTER_V5Call),
        FEE_TIERS(FEE_TIERSCall),
        multicall(multicallCall),
        swap(swapCall),
        swapAerodrome(swapAerodromeCall),
        swapAll(swapAllCall),
        swapUniswapV2(swapUniswapV2Call),
        swapUniswapV3(swapUniswapV3Call),
    }
    #[automatically_derived]
    impl AtomicExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 72u8, 177u8, 155u8],
            [23u8, 73u8, 225u8, 227u8],
            [107u8, 27u8, 155u8, 32u8],
            [130u8, 49u8, 171u8, 11u8],
            [136u8, 108u8, 220u8, 156u8],
            [177u8, 29u8, 231u8, 227u8],
            [209u8, 133u8, 86u8, 38u8],
            [241u8, 165u8, 37u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicExecutorCalls {
        const NAME: &'static str = "AtomicExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATION_ROUTER_V5(_) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_TIERS(_) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapAerodrome(_) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapAll(_) => <swapAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapUniswapV2(_) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV3(_) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicExecutorCalls>] = &[
                {
                    fn swapUniswapV3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapUniswapV3)
                    }
                    swapUniswapV3
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::multicall)
                    }
                    multicall
                },
                {
                    fn FEE_TIERS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::FEE_TIERS)
                    }
                    FEE_TIERS
                },
                {
                    fn swap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swap)
                    }
                    swap
                },
                {
                    fn swapAerodrome(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapAerodromeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapAerodrome)
                    }
                    swapAerodrome
                },
                {
                    fn AGGREGATION_ROUTER_V5(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::AGGREGATION_ROUTER_V5)
                    }
                    AGGREGATION_ROUTER_V5
                },
                {
                    fn swapAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapAll)
                    }
                    swapAll
                },
                {
                    fn swapUniswapV2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapUniswapV2)
                    }
                    swapUniswapV2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicExecutor`](self) contract instance.

See the [wrapper's documentation](`AtomicExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicExecutorInstance<T, P, N> {
        AtomicExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicExecutorInstance<T, P, N>>,
    > {
        AtomicExecutorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _owner, _uniswapV3Router, _uniswapV2Router, _aerodromeRouter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AtomicExecutorInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _owner,
            _uniswapV3Router,
            _uniswapV2Router,
            _aerodromeRouter,
        )
    }
    /**A [`AtomicExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AtomicExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicExecutor`](self) contract instance.

See the [wrapper's documentation](`AtomicExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AtomicExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _owner,
                _uniswapV3Router,
                _uniswapV2Router,
                _aerodromeRouter,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _owner,
                            _uniswapV3Router,
                            _uniswapV2Router,
                            _aerodromeRouter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AtomicExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AtomicExecutorInstance<T, P, N> {
            AtomicExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATION_ROUTER_V5`] function.
        pub fn AGGREGATION_ROUTER_V5(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AGGREGATION_ROUTER_V5Call, N> {
            self.call_builder(&AGGREGATION_ROUTER_V5Call {})
        }
        ///Creates a new call builder for the [`FEE_TIERS`] function.
        pub fn FEE_TIERS(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_TIERSCall, N> {
            self.call_builder(&FEE_TIERSCall { _0 })
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { calls })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            data: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall { data })
        }
        ///Creates a new call builder for the [`swapAerodrome`] function.
        pub fn swapAerodrome(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            stable: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAerodromeCall, N> {
            self.call_builder(
                &swapAerodromeCall {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    stable,
                },
            )
        }
        ///Creates a new call builder for the [`swapAll`] function.
        pub fn swapAll(
            &self,
            swapData: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAllCall, N> {
            self.call_builder(&swapAllCall { swapData })
        }
        ///Creates a new call builder for the [`swapUniswapV2`] function.
        pub fn swapUniswapV2(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV2Call, N> {
            self.call_builder(
                &swapUniswapV2Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV3`] function.
        pub fn swapUniswapV3(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            feeTier: alloy::sol_types::private::primitives::aliases::U24,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV3Call, N> {
            self.call_builder(
                &swapUniswapV3Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    feeTier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
