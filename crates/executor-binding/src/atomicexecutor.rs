/**

Generated by the following Solidity interface...
```solidity
interface AtomicExecutor {
    struct Call {
        address target;
        uint256 value;
        bytes data;
    }
    struct Swap {
        uint8 swapType;
        address tokenOut;
        uint24 feeTier;
        bool stable;
    }
    struct SwapData {
        address tokenIn;
        uint256 amountIn;
        Swap[] swaps;
    }

    constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);

    receive() external payable;

    function AGGREGATION_ROUTER_V5() external view returns (address);
    function FEE_TIERS(uint256) external view returns (uint24);
    function multicall(Call[] memory calls) external payable;
    function swap(SwapData memory data) external returns (uint256);
    function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
    function swapAll(SwapData memory swapData) external returns (uint256);
    function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
    function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_aerodromeRouter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "AGGREGATION_ROUTER_V5",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_TIERS",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct AtomicExecutor.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct AtomicExecutor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct AtomicExecutor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAerodrome",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "stable",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAll",
    "inputs": [
      {
        "name": "swapData",
        "type": "tuple",
        "internalType": "struct AtomicExecutor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct AtomicExecutor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV2",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV3",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeTier",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod AtomicExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101006040523461006d5761001e61001561015a565b929190916104e8565b610026610072565b61233b610564823960805181610cbf015260a051818181610a560152610b3d015260c051818181611f710152611fd4015260e05181818161175c0152611841015261233b90f35b610078565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100a49061007c565b810190811060018060401b038211176100bc57604052565b610086565b906100d46100cd610072565b928361009a565b565b5f80fd5b60018060a01b031690565b6100ee906100da565b90565b6100fa816100e5565b0361010157565b5f80fd5b90505190610112826100f1565b565b6080818303126101555761012a825f8301610105565b9261015261013b8460208501610105565b936101498160408601610105565b93606001610105565b90565b6100d6565b61017861289f8038038061016d816100c1565b928339810190610114565b90919293565b60018060401b0381116101915760200290565b610086565b6101a26101a79161017e565b6100c1565b90565b90565b61ffff1690565b90565b6101cb6101c66101d0926101aa565b6101b4565b6101ad565b90565b906101dd906101ad565b9052565b90565b6101f86101f36101fd926101e1565b6101b4565b6101ad565b90565b90565b61021761021261021c92610200565b6101b4565b6101ad565b90565b90565b61023661023161023b9261021f565b6101b4565b6101ad565b90565b5490565b90565b600a9060018203010490565b5f5260205f2090565b1b90565b919060086102799102916102735f198461025a565b9261025a565b9181191691161790565b61029761029261029c92610242565b6101b4565b610242565b90565b90565b91906102b86102b36102c093610283565b61029f565b90835461025e565b9055565b5f90565b6102da916102d46102c4565b916102a2565b565b5b8181106102e8575050565b806102f55f6001936102c8565b016102dd565b1c90565b90610312905f19906020036008026102fb565b8154169055565b919091828210610329575b505050565b6003600a61033961036195610245565b61034b61034586610245565b94610251565b93840193019306025f8111610369575b506102dc565b5f8080610324565b61037690600183036102ff565b5f61035b565b906801000000000000000081116103a5578161039a6103a39361023e565b90828155610319565b565b610086565b50600490565b6103ba90516101ad565b90565b90565b919060086103dd9102916103d762ffffff8461025a565b9261025a565b9181191691161790565b90565b906103f4816103aa565b9060018060401b0382116104d75761041861041e91610413848661037c565b6103bd565b92610251565b600a8204915f5b83811061048e5750600a830290035f8111610441575b50505050565b925f935f5b81811061045b5750505001555f80808061043b565b90919460206104826001926104776104728a6103b0565b6103e7565b9085600302906103c0565b96019101919091610446565b5f805b600a81106104a85750906001918185015501610425565b959060206104ce6001926104c36104be866103b0565b6103e7565b908a600302906103c0565b92019601610491565b610086565b906104e6916103ea565b565b6105556104f56004610196565b61050a61050260646101b7565b5f83016101d3565b6105216105186101f46101e4565b602083016101d3565b61053861052f610bb8610203565b604083016101d3565b61054f610546612710610222565b606083016101d3565b5f6104dc565b60805260a05260c05260e05256fe60806040526004361015610015575b366107cd57005b61001f5f3561009e565b80630748b19b146100995780631749e1e3146100945780636b1b9b201461008f5780638231ab0b1461008a578063886cdc9c14610085578063b11de7e314610080578063d18556261461007b5763f1a525920361000e57610797565b610728565b6106f3565b610666565b6105c3565b610542565b61042c565b6101a9565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b90565b6100c2816100b6565b036100c957565b5f80fd5b905035906100da826100b9565b565b60018060a01b031690565b6100f0906100dc565b90565b6100fc816100e7565b0361010357565b5f80fd5b90503590610114826100f3565b565b62ffffff1690565b61012781610116565b0361012e57565b5f80fd5b9050359061013f8261011e565b565b60808183031261018257610157825f83016100cd565b9261017f6101688460208501610107565b936101768160408601610107565b93606001610132565b90565b6100ae565b610190906100b6565b9052565b91906101a7905f60208501940190610187565b565b346101dd576101d96101c86101bf366004610141565b92919091610a2e565b6101d06100a4565b91829182610194565b0390f35b6100aa565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061020e906101e6565b810190811067ffffffffffffffff82111761022857604052565b6101f0565b906102406102396100a4565b9283610204565b565b67ffffffffffffffff811161025a5760208091020190565b6101f0565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b67ffffffffffffffff811161028d576102896020916101e6565b0190565b6101f0565b90825f939282370152565b909291926102b26102ad8261026f565b61022d565b938185526020850190828401116102ce576102cc92610292565b565b61026b565b9080601f830112156102f1578160206102ee9335910161029d565b90565b6101e2565b91909160608184031261035a5761030d606061022d565b9261031a815f8401610107565b5f85015261032b81602084016100cd565b6020850152604082013567ffffffffffffffff81116103555761034e92016102d3565b6040830152565b610267565b610263565b92919061037361036e82610242565b61022d565b93818552602080860192028101918383116103ca5781905b838210610399575050505050565b813567ffffffffffffffff81116103c5576020916103ba87849387016102f6565b81520191019061038b565b6101e2565b61025f565b9080601f830112156103ed578160206103ea9335910161035f565b90565b6101e2565b90602082820312610422575f82013567ffffffffffffffff811161041d5761041a92016103cf565b90565b6100b2565b6100ae565b5f0190565b61043f61043a3660046103f2565b610cb3565b6104476100a4565b8061045181610427565b0390f35b9060208282031261046e5761046b915f016100cd565b90565b6100ae565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b9190916104a081610487565b8310156104be57600a6104b460039261048b565b8185040193060290565b610473565b1c90565b62ffffff1690565b6104df9060086104e493026104c3565b6104c7565b90565b906104f291546104cf565b90565b5f6104ff81610487565b82101561051c576105199161051391610494565b906104e7565b90565b5f80fd5b61052990610116565b9052565b9190610540905f60208501940190610520565b565b346105725761056e61055d610558366004610455565b6104f5565b6105656100a4565b9182918261052d565b0390f35b6100aa565b5f80fd5b908160609103126105895790565b610577565b906020828203126105be575f82013567ffffffffffffffff81116105b9576105b6920161057b565b90565b6100b2565b6100ae565b346105f3576105ef6105de6105d936600461058e565b610fb3565b6105e66100a4565b91829182610194565b0390f35b6100aa565b151590565b610606816105f8565b0361060d57565b5f80fd5b9050359061061e826105fd565b565b60808183031261066157610636825f83016100cd565b9261065e6106478460208501610107565b936106558160408601610107565b93606001610611565b90565b6100ae565b3461069a5761069661068561067c366004610620565b92919091611734565b61068d6100a4565b91829182610194565b0390f35b6100aa565b5f9103126106a957565b6100ae565b731111111254eeb25477b68fb85ed929f73a96058290565b6106ce6106ae565b90565b6106da906100e7565b9052565b91906106f1905f602085019401906106d1565b565b346107235761070336600461069f565b61071f61070e6106c6565b6107166100a4565b918291826106de565b0390f35b6100aa565b346107585761075461074361073e36600461058e565b611953565b61074b6100a4565b91829182610194565b0390f35b6100aa565b90916060828403126107925761078f610778845f85016100cd565b936107868160208601610107565b93604001610107565b90565b6100ae565b346107c8576107c46107b36107ad36600461075d565b91611ee7565b6107bb6100a4565b91829182610194565b0390f35b6100aa565b5f80fd5b5f90565b90565b6107ec6107e76107f1926100dc565b6107d5565b6100dc565b90565b6107fd906107d8565b90565b610809906107f4565b90565b610815906107d8565b90565b6108219061080c565b90565b60e01b90565b90505190610837826105fd565b565b906020828203126108525761084f915f0161082a565b90565b6100ae565b91602061087892949361087160408201965f8301906106d1565b0190610187565b565b6108826100a4565b3d5f823e3d90fd5b6108939061080c565b90565b6108a060e061022d565b90565b906108ad906100e7565b9052565b906108bb90610116565b9052565b906108c9906100b6565b9052565b90565b6108e46108df6108e9926108cd565b6107d5565b6100b6565b90565b6109006108fb610905926108cd565b6107d5565b6100dc565b90565b90610912906100dc565b9052565b61091f906107d8565b90565b61092b90610916565b90565b6109379061080c565b90565b90505190610947826100b9565b565b906020828203126109625761095f915f0161093a565b90565b6100ae565b610970906100e7565b9052565b61097d90610116565b9052565b61098a906100b6565b9052565b610997906100dc565b9052565b9060c080610a17936109b35f8201515f860190610967565b6109c560208201516020860190610967565b6109d760408201516040860190610974565b6109e960608201516060860190610967565b6109fb60808201516080860190610981565b610a0d60a082015160a0860190610981565b015191019061098e565b565b9190610a2c905f60e0850194019061099b565b565b90929192610a3a6107d1565b50610a4c610a4782610800565b610818565b602063095ea7b3917f000000000000000000000000000000000000000000000000000000000000000090610a935f8795610a9e610a876100a4565b97889687958694610824565b845260048401610857565b03925af18015610c1157610be5575b5092919030610abb9061088a565b5f925f94610ac7610896565b965f880190610ad5916108a3565b6020870190610ae3916108a3565b6040860190610af1916108b1565b6060850190610aff916108a3565b6080840190610b0d916108bf565b610b16906108d0565b60a0830190610b24916108bf565b610b2d906108ec565b60c0820190610b3b91610908565b7f0000000000000000000000000000000000000000000000000000000000000000610b6590610922565b610b6e9061092e565b6304e45aaf610b7b6100a4565b8093610b878293610824565b82526004820190610b9791610a19565b03815a6020945f91f1908115610be0575f91610bb2575b5090565b610bd3915060203d8111610bd9575b610bcb8183610204565b810190610949565b5f610bae565b503d610bc1565b61087a565b610c059060203d8111610c0a575b610bfd8183610204565b810190610839565b610aad565b503d610bf3565b61087a565b15610c1d57565b5f80fd5b6001610c2d91016100b6565b90565b5190565b90610c3e82610c30565b811015610c4f576020809102010190565b610473565b610c5e90516100e7565b90565b610c6b90516100b6565b90565b90610c80610c7b8361026f565b61022d565b918252565b606090565b3d5f14610ca557610c9a3d610c6e565b903d5f602084013e5b565b610cad610c85565b90610ca3565b610cef33610ce9610ce37f00000000000000000000000000000000000000000000000000000000000000006100e7565b916100e7565b14610c16565b610cf76107d1565b5b80610d13610d0d610d0885610c30565b6100b6565b916100b6565b1015610d8c575f80610d3181610d2a868690610c34565b5101610c54565b610d486020610d41878790610c34565b5101610c61565b6040610d55878790610c34565b51015190602082019151925af1610d74610d6d610c8a565b91156105f8565b610d875750610d8290610c21565b610cf8565b61218c565b5050565b35610d9a816100f3565b90565b35610da7816100b9565b90565b604090610dd3610dda9496959396610dc960608401985f8501906106d1565b60208301906106d1565b0190610187565b565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610e2a570180359067ffffffffffffffff8211610e2557602001916080820236038313610e2057565b610de4565b610de0565b610ddc565b5090565b9190811015610e43576080020190565b610473565b60ff1690565b610e5781610e48565b03610e5e57565b5f80fd5b35610e6c81610e4e565b90565b90565b610e86610e81610e8b92610e6f565b6107d5565b610e48565b90565b610ea2610e9d610ea7926108cd565b6107d5565b610e48565b90565b90565b610ec1610ebc610ec692610eaa565b6107d5565b610e48565b90565b35610ed3816105fd565b90565b35610ee08161011e565b90565b67ffffffffffffffff8111610f0157610efd6020916101e6565b0190565b6101f0565b90610f18610f1383610ee3565b61022d565b918252565b5f7f6f757470757420616d6f756e743a200000000000000000000000000000000000910152565b610f4e600f610f06565b90610f5b60208301610f1d565b565b610f65610f44565b90565b5f7f206f660000000000000000000000000000000000000000000000000000000000910152565b610f996003610f06565b90610fa660208301610f68565b565b610fb0610f8f565b90565b90610fbc6107d1565b50610fd8610fd3610fce5f8501610d90565b610800565b610818565b60206323b872dd9133906110125f610fef3061088a565b9561101d610ffe878b01610d9d565b6110066100a4565b98899788968795610824565b855260048501610daa565b03925af1801561133257611306575b5061103960208301610d9d565b6110445f8401610d90565b9061104d6107d1565b916110566107d1565b915b8261108161107b6110766110708a6040810190610de8565b90610e2f565b6100b6565b916100b6565b1015611279576110a95f6110a361109c896040810190610de8565b8791610e33565b01610e62565b6110bc6110b66001610e72565b91610e48565b145f1461116957611116929350906110ed60206110e76110e0896040810190610de8565b8891610e33565b01610d90565b90611110604061110a6111038a83810190610de8565b8991610e33565b01610ed6565b92610a2e565b905b8161116261113f6020611139611132896040810190610de8565b8791610e33565b01610d90565b9261115d83859061114e610f5d565b90611157610fa8565b91612247565b610c21565b9190611058565b61118b5f61118561117e896040810190610de8565b8791610e33565b01610e62565b61119d6111975f610e8e565b91610e48565b145f146111db576111d4929350906111ce60206111c86111c1896040810190610de8565b8891610e33565b01610d90565b91611ee7565b905b611118565b6111fd5f6111f76111f0896040810190610de8565b8791610e33565b01610e62565b61121061120a6002610ead565b91610e48565b1461121d575b50506111d6565b61127192935090611247602061124161123a896040810190610de8565b8891610e33565b01610d90565b9061126b606061126561125e8a6040810190610de8565b8991610e33565b01610ec9565b92611734565b905f80611216565b939450611290925061128b9150610800565b610818565b602063a9059cbb9133906112b75f86956112c26112ab6100a4565b97889687958694610824565b845260048401610857565b03925af18015611301576112d5575b5090565b6112f59060203d81116112fa575b6112ed8183610204565b810190610839565b6112d1565b503d6112e3565b61087a565b6113269060203d811161132b575b61131e8183610204565b810190610839565b61102c565b503d611314565b61087a565b61134b61134661135092610e6f565b6107d5565b6100b6565b90565b67ffffffffffffffff811161136b5760208091020190565b6101f0565b9061138261137d83611353565b61022d565b918252565b611391608061022d565b90565b5f90565b5f90565b6113a4611387565b906020808080856113b3611394565b8152016113be611394565b8152016113c9611398565b8152016113d4611394565b81525050565b6113e261139c565b90565b5f5b8281106113f357505050565b6020906113fe6113da565b81840152016113e7565b9061142d61141583611370565b926020806114238693611353565b92019103906113e5565b565b611438906108ec565b90565b611445608061022d565b90565b90611452906105f8565b9052565b5190565b9061146482611456565b811015611475576020809102010190565b610473565b611483906107d8565b90565b61148f9061147a565b90565b61149b9061080c565b90565b90565b6114b56114b06114ba9261149e565b6107d5565b6100b6565b90565b634e487b7160e01b5f52601160045260245ffd5b6114e06114e6919392936100b6565b926100b6565b82018092116114f157565b6114bd565b67ffffffffffffffff811161150e5760208091020190565b6101f0565b90929192611528611523826114f6565b61022d565b938185526020808601920283019281841161156557915b83831061154c5750505050565b6020809161155a848661093a565b81520192019161153f565b61025f565b9080601f830112156115885781602061158593519101611513565b90565b6101e2565b906020828203126115bd575f82015167ffffffffffffffff81116115b8576115b5920161156a565b90565b6100b2565b6100ae565b6115cb906108d0565b9052565b60209181520190565b60200190565b6115e7906105f8565b9052565b90606080611631936116035f8201515f860190610967565b61161560208201516020860190610967565b611627604082015160408601906115de565b0151910190610967565b565b90611640816080936115eb565b0190565b60200190565b9061166761166161165a84611456565b80936115cf565b926115d8565b905f5b8181106116775750505090565b90919261169061168a6001928651611633565b94611644565b910191909161166a565b906116d76116e2916116e9969897956116ca6080966116c060a08801945f890190610187565b60208701906115c2565b848203604086015261164a565b9660608301906106d1565b0190610187565b565b5190565b6116fe611704919392936100b6565b926100b6565b820391821161170f57565b6114bd565b9061171e826116eb565b81101561172f576020809102010190565b610473565b90929161173f6107d1565b5061175161174c85610800565b610818565b90602063095ea7b3927f0000000000000000000000000000000000000000000000000000000000000000906117995f87966117a461178d6100a4565b98899687958694610824565b845260048401610857565b03925af1801561194e575f946118379361181292611922575b506118096117d36117ce6001611337565b611408565b9793916118006117e28961142f565b936117f76117ee61143b565b978b89016108a3565b602087016108a3565b60408501611448565b606083016108a3565b6118318591859061182b611825836108d0565b8561145a565b526108d0565b9061145a565b515061186a6118657f0000000000000000000000000000000000000000000000000000000000000000611486565b611492565b6118ab8363cac88ea96118b682976118813061088a565b6118964261189061012c6114a1565b906114d1565b9161189f6100a4565b9a8b998a988997610824565b87526004870161169a565b03925af190811561191d576118f8916118f3915f916118fb575b506118ed6118dd826116eb565b6118e76001611337565b906116ef565b90611714565b610c61565b90565b61191791503d805f833e61190f8183610204565b81019061158d565b5f6118d0565b61087a565b6119429060203d8111611947575b61193a8183610204565b810190610839565b6117bd565b503d611930565b61087a565b9061195c6107d1565b5061197861197361196e5f8501610d90565b610800565b610818565b60206323b872dd9133906119b25f61198f3061088a565b956119bd61199e878b01610d9d565b6119a66100a4565b98899788968795610824565b855260048501610daa565b03925af18015611d4a57611d1e575b506119d960208301610d9d565b6119e45f8401610d90565b6119ec6107d1565b915b82611a17611a11611a0c611a06896040810190610de8565b90610e2f565b6100b6565b916100b6565b1015611c9257611ac1611abc611af393602093611a4c5f611a46611a3f8c6040810190610de8565b8b91610e33565b01610e62565b611a5f611a596001610e72565b91610e48565b145f14611b8957611ab5908983611aaf6040611aa98c611aa3611a998d611a93611a8c8a88810190610de8565b8691610e33565b01610d90565b9684810190610de8565b90610e33565b01610ed6565b92610a2e565b505b610800565b610818565b6370a0823190611ae8611ad33061088a565b92611adc6100a4565b95869485938493610824565b8352600483016106de565b03915afa908115611b84575f91611b56575b50611b4f611b2c6020611b26611b1f886040810190610de8565b8791610e33565b01610d90565b92611b4a838590611b3b610f5d565b90611b44610fa8565b91612247565b610c21565b91906119ee565b611b77915060203d8111611b7d575b611b6f8183610204565b810190610949565b5f611b05565b503d611b65565b61087a565b611bab5f611ba5611b9e8c6040810190610de8565b8b91610e33565b01610e62565b611bbd611bb75f610e8e565b91610e48565b145f14611bf957611bf29089611bec87611be6611bdf87946040810190610de8565b8d91610e33565b01610d90565b91611ee7565b505b611ab7565b611c1b5f611c15611c0e8c6040810190610de8565b8b91610e33565b01610e62565b611c2e611c286002610ead565b91610e48565b14611c3a575b50611bf4565b611c8b908983611c856060611c7f8c611c79611c6e8d611c68611c618a6040810190610de8565b8691610e33565b01610d90565b966040810190610de8565b90610e33565b01610ec9565b92611734565b505f611c34565b929350611ca89150611ca390610800565b610818565b602063a9059cbb913390611ccf5f8695611cda611cc36100a4565b97889687958694610824565b845260048401610857565b03925af18015611d1957611ced575b5090565b611d0d9060203d8111611d12575b611d058183610204565b810190610839565b611ce9565b503d611cfb565b61087a565b611d3e9060203d8111611d43575b611d368183610204565b810190610839565b6119cc565b503d611d2c565b61087a565b611d63611d5e611d6892610eaa565b6107d5565b6100b6565b90565b67ffffffffffffffff8111611d835760208091020190565b6101f0565b90611d9a611d9583611d6b565b61022d565b918252565b369037565b90611dc9611db183611d88565b92602080611dbf8693611d6b565b9201910390611d9f565b565b5190565b90611dd982611dcb565b811015611dea576020809102010190565b610473565b611df8906107d8565b90565b611e0490611def565b90565b611e109061080c565b90565b611e1c90611337565b9052565b60209181520190565b60200190565b90611e3c81602093610967565b0190565b60200190565b90611e63611e5d611e5684611dcb565b8093611e20565b92611e29565b905f5b818110611e735750505090565b909192611e8c611e866001928651611e2f565b94611e40565b9101919091611e66565b90611ed3611ede91611ee596989795611ec6608096611ebc60a08801945f890190610187565b6020870190611e13565b8482036040860152611e46565b9660608301906106d1565b0190610187565b565b90611ef06107d1565b5081611f04611efe5f6108d0565b916100b6565b146120e7575b611f61611f6691611f5c611f26611f216002611d4f565b611da4565b95611f4383611f3e89611f385f6108d0565b90611dcf565b6108a3565b611f5787611f516001611337565b90611dcf565b6108a3565b610800565b610818565b90602063095ea7b3927f000000000000000000000000000000000000000000000000000000000000000090611fae5f8596611fb9611fa26100a4565b98899687958694610824565b845260048401610857565b03925af19182156120e2575f926120b6575b50611ffd611ff87f0000000000000000000000000000000000000000000000000000000000000000611dfb565b611e07565b61203f836338ed173961204a6001976120153061088a565b61202a4261202461012c6114a1565b906114d1565b916120336100a4565b9a8b998a988997610824565b875260048701611e96565b03925af19081156120b15761208c91612087915f9161208f575b50612081612071826116eb565b61207b6001611337565b906116ef565b90611714565b610c61565b90565b6120ab91503d805f833e6120a38183610204565b81019061158d565b5f612064565b61087a565b6120d69060203d81116120db575b6120ce8183610204565b810190610839565b611fcb565b503d6120c4565b61087a565b905061213160206120ff6120fa84610800565b610818565b6370a08231906121266121113061088a565b9261211a6100a4565b95869485938493610824565b8352600483016106de565b03915afa90811561218357611f6691611f61915f91612155575b5092915050611f0a565b612176915060203d811161217c575b61216e8183610204565b810190610949565b5f61214b565b503d612164565b61087a565b5190565b61219581612188565b906121b2826121ac6121a65f6108d0565b916100b6565b11610c16565b602001fd5b5190565b60209181520190565b90825f9392825e0152565b6121ee6121f76020936121fc936121e5816121b7565b938480936121bb565b958691016121c4565b6101e6565b0190565b94939161223d906122459461223061222560609560808b01908b82035f8d01526121cf565b9260208a0190610187565b87820360408901526121cf565b9401906106d1565b565b9061227661228a9461228593929461225d6100a4565b95869460046020870163bb7235e960e01b815201612200565b60208201810382520382610204565b61228c565b565b61229f9061229a60016122d3565b6122f3565b565b6a636f6e736f6c652e6c6f6790565b5f80916122bc81612188565b9060206122c76122a1565b9101905afa50565b5f90565b6122db6122cf565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036122df57612303906122b0565b56fea2646970667358221220ccb60837c50df4d627d24072c503eee5e40d06a62fc4ee796abaafaa2520909b64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R4a\0mWa\0\x1Ea\0\x15a\x01ZV[\x92\x91\x90\x91a\x04\xE8V[a\0&a\0rV[a#;a\x05d\x829`\x80Q\x81a\x0C\xBF\x01R`\xA0Q\x81\x81\x81a\nV\x01Ra\x0B=\x01R`\xC0Q\x81\x81\x81a\x1Fq\x01Ra\x1F\xD4\x01R`\xE0Q\x81\x81\x81a\x17\\\x01Ra\x18A\x01Ra#;\x90\xF3[a\0xV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xA4\x90a\0|V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xBCW`@RV[a\0\x86V[\x90a\0\xD4a\0\xCDa\0rV[\x92\x83a\0\x9AV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xEE\x90a\0\xDAV[\x90V[a\0\xFA\x81a\0\xE5V[\x03a\x01\x01WV[_\x80\xFD[\x90PQ\x90a\x01\x12\x82a\0\xF1V[V[`\x80\x81\x83\x03\x12a\x01UWa\x01*\x82_\x83\x01a\x01\x05V[\x92a\x01Ra\x01;\x84` \x85\x01a\x01\x05V[\x93a\x01I\x81`@\x86\x01a\x01\x05V[\x93``\x01a\x01\x05V[\x90V[a\0\xD6V[a\x01xa(\x9F\x808\x03\x80a\x01m\x81a\0\xC1V[\x92\x839\x81\x01\x90a\x01\x14V[\x90\x91\x92\x93V[`\x01\x80`@\x1B\x03\x81\x11a\x01\x91W` \x02\x90V[a\0\x86V[a\x01\xA2a\x01\xA7\x91a\x01~V[a\0\xC1V[\x90V[\x90V[a\xFF\xFF\x16\x90V[\x90V[a\x01\xCBa\x01\xC6a\x01\xD0\x92a\x01\xAAV[a\x01\xB4V[a\x01\xADV[\x90V[\x90a\x01\xDD\x90a\x01\xADV[\x90RV[\x90V[a\x01\xF8a\x01\xF3a\x01\xFD\x92a\x01\xE1V[a\x01\xB4V[a\x01\xADV[\x90V[\x90V[a\x02\x17a\x02\x12a\x02\x1C\x92a\x02\0V[a\x01\xB4V[a\x01\xADV[\x90V[\x90V[a\x026a\x021a\x02;\x92a\x02\x1FV[a\x01\xB4V[a\x01\xADV[\x90V[T\x90V[\x90V[`\n\x90`\x01\x82\x03\x01\x04\x90V[_R` _ \x90V[\x1B\x90V[\x91\x90`\x08a\x02y\x91\x02\x91a\x02s_\x19\x84a\x02ZV[\x92a\x02ZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\x97a\x02\x92a\x02\x9C\x92a\x02BV[a\x01\xB4V[a\x02BV[\x90V[\x90V[\x91\x90a\x02\xB8a\x02\xB3a\x02\xC0\x93a\x02\x83V[a\x02\x9FV[\x90\x83Ta\x02^V[\x90UV[_\x90V[a\x02\xDA\x91a\x02\xD4a\x02\xC4V[\x91a\x02\xA2V[V[[\x81\x81\x10a\x02\xE8WPPV[\x80a\x02\xF5_`\x01\x93a\x02\xC8V[\x01a\x02\xDDV[\x1C\x90V[\x90a\x03\x12\x90_\x19\x90` \x03`\x08\x02a\x02\xFBV[\x81T\x16\x90UV[\x91\x90\x91\x82\x82\x10a\x03)W[PPPV[`\x03`\na\x039a\x03a\x95a\x02EV[a\x03Ka\x03E\x86a\x02EV[\x94a\x02QV[\x93\x84\x01\x93\x01\x93\x06\x02_\x81\x11a\x03iW[Pa\x02\xDCV[_\x80\x80a\x03$V[a\x03v\x90`\x01\x83\x03a\x02\xFFV[_a\x03[V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x03\xA5W\x81a\x03\x9Aa\x03\xA3\x93a\x02>V[\x90\x82\x81Ua\x03\x19V[V[a\0\x86V[P`\x04\x90V[a\x03\xBA\x90Qa\x01\xADV[\x90V[\x90V[\x91\x90`\x08a\x03\xDD\x91\x02\x91a\x03\xD7b\xFF\xFF\xFF\x84a\x02ZV[\x92a\x02ZV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x03\xF4\x81a\x03\xAAV[\x90`\x01\x80`@\x1B\x03\x82\x11a\x04\xD7Wa\x04\x18a\x04\x1E\x91a\x04\x13\x84\x86a\x03|V[a\x03\xBDV[\x92a\x02QV[`\n\x82\x04\x91_[\x83\x81\x10a\x04\x8EWP`\n\x83\x02\x90\x03_\x81\x11a\x04AW[PPPPV[\x92_\x93_[\x81\x81\x10a\x04[WPPP\x01U_\x80\x80\x80a\x04;V[\x90\x91\x94` a\x04\x82`\x01\x92a\x04wa\x04r\x8Aa\x03\xB0V[a\x03\xE7V[\x90\x85`\x03\x02\x90a\x03\xC0V[\x96\x01\x91\x01\x91\x90\x91a\x04FV[_\x80[`\n\x81\x10a\x04\xA8WP\x90`\x01\x91\x81\x85\x01U\x01a\x04%V[\x95\x90` a\x04\xCE`\x01\x92a\x04\xC3a\x04\xBE\x86a\x03\xB0V[a\x03\xE7V[\x90\x8A`\x03\x02\x90a\x03\xC0V[\x92\x01\x96\x01a\x04\x91V[a\0\x86V[\x90a\x04\xE6\x91a\x03\xEAV[V[a\x05Ua\x04\xF5`\x04a\x01\x96V[a\x05\na\x05\x02`da\x01\xB7V[_\x83\x01a\x01\xD3V[a\x05!a\x05\x18a\x01\xF4a\x01\xE4V[` \x83\x01a\x01\xD3V[a\x058a\x05/a\x0B\xB8a\x02\x03V[`@\x83\x01a\x01\xD3V[a\x05Oa\x05Fa'\x10a\x02\"V[``\x83\x01a\x01\xD3V[_a\x04\xDCV[`\x80R`\xA0R`\xC0R`\xE0RV\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x07\xCDW\0[a\0\x1F_5a\0\x9EV[\x80c\x07H\xB1\x9B\x14a\0\x99W\x80c\x17I\xE1\xE3\x14a\0\x94W\x80ck\x1B\x9B \x14a\0\x8FW\x80c\x821\xAB\x0B\x14a\0\x8AW\x80c\x88l\xDC\x9C\x14a\0\x85W\x80c\xB1\x1D\xE7\xE3\x14a\0\x80W\x80c\xD1\x85V&\x14a\0{Wc\xF1\xA5%\x92\x03a\0\x0EWa\x07\x97V[a\x07(V[a\x06\xF3V[a\x06fV[a\x05\xC3V[a\x05BV[a\x04,V[a\x01\xA9V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90V[a\0\xC2\x81a\0\xB6V[\x03a\0\xC9WV[_\x80\xFD[\x90P5\x90a\0\xDA\x82a\0\xB9V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF0\x90a\0\xDCV[\x90V[a\0\xFC\x81a\0\xE7V[\x03a\x01\x03WV[_\x80\xFD[\x90P5\x90a\x01\x14\x82a\0\xF3V[V[b\xFF\xFF\xFF\x16\x90V[a\x01'\x81a\x01\x16V[\x03a\x01.WV[_\x80\xFD[\x90P5\x90a\x01?\x82a\x01\x1EV[V[`\x80\x81\x83\x03\x12a\x01\x82Wa\x01W\x82_\x83\x01a\0\xCDV[\x92a\x01\x7Fa\x01h\x84` \x85\x01a\x01\x07V[\x93a\x01v\x81`@\x86\x01a\x01\x07V[\x93``\x01a\x012V[\x90V[a\0\xAEV[a\x01\x90\x90a\0\xB6V[\x90RV[\x91\x90a\x01\xA7\x90_` \x85\x01\x94\x01\x90a\x01\x87V[V[4a\x01\xDDWa\x01\xD9a\x01\xC8a\x01\xBF6`\x04a\x01AV[\x92\x91\x90\x91a\n.V[a\x01\xD0a\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x0E\x90a\x01\xE6V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02(W`@RV[a\x01\xF0V[\x90a\x02@a\x029a\0\xA4V[\x92\x83a\x02\x04V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02ZW` \x80\x91\x02\x01\x90V[a\x01\xF0V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8DWa\x02\x89` \x91a\x01\xE6V[\x01\x90V[a\x01\xF0V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02\xB2a\x02\xAD\x82a\x02oV[a\x02-V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02\xCEWa\x02\xCC\x92a\x02\x92V[V[a\x02kV[\x90\x80`\x1F\x83\x01\x12\x15a\x02\xF1W\x81` a\x02\xEE\x935\x91\x01a\x02\x9DV[\x90V[a\x01\xE2V[\x91\x90\x91``\x81\x84\x03\x12a\x03ZWa\x03\r``a\x02-V[\x92a\x03\x1A\x81_\x84\x01a\x01\x07V[_\x85\x01Ra\x03+\x81` \x84\x01a\0\xCDV[` \x85\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03UWa\x03N\x92\x01a\x02\xD3V[`@\x83\x01RV[a\x02gV[a\x02cV[\x92\x91\x90a\x03sa\x03n\x82a\x02BV[a\x02-V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x03\xCAW\x81\x90[\x83\x82\x10a\x03\x99WPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC5W` \x91a\x03\xBA\x87\x84\x93\x87\x01a\x02\xF6V[\x81R\x01\x91\x01\x90a\x03\x8BV[a\x01\xE2V[a\x02_V[\x90\x80`\x1F\x83\x01\x12\x15a\x03\xEDW\x81` a\x03\xEA\x935\x91\x01a\x03_V[\x90V[a\x01\xE2V[\x90` \x82\x82\x03\x12a\x04\"W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x1DWa\x04\x1A\x92\x01a\x03\xCFV[\x90V[a\0\xB2V[a\0\xAEV[_\x01\x90V[a\x04?a\x04:6`\x04a\x03\xF2V[a\x0C\xB3V[a\x04Ga\0\xA4V[\x80a\x04Q\x81a\x04'V[\x03\x90\xF3[\x90` \x82\x82\x03\x12a\x04nWa\x04k\x91_\x01a\0\xCDV[\x90V[a\0\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[\x91\x90\x91a\x04\xA0\x81a\x04\x87V[\x83\x10\x15a\x04\xBEW`\na\x04\xB4`\x03\x92a\x04\x8BV[\x81\x85\x04\x01\x93\x06\x02\x90V[a\x04sV[\x1C\x90V[b\xFF\xFF\xFF\x16\x90V[a\x04\xDF\x90`\x08a\x04\xE4\x93\x02a\x04\xC3V[a\x04\xC7V[\x90V[\x90a\x04\xF2\x91Ta\x04\xCFV[\x90V[_a\x04\xFF\x81a\x04\x87V[\x82\x10\x15a\x05\x1CWa\x05\x19\x91a\x05\x13\x91a\x04\x94V[\x90a\x04\xE7V[\x90V[_\x80\xFD[a\x05)\x90a\x01\x16V[\x90RV[\x91\x90a\x05@\x90_` \x85\x01\x94\x01\x90a\x05 V[V[4a\x05rWa\x05na\x05]a\x05X6`\x04a\x04UV[a\x04\xF5V[a\x05ea\0\xA4V[\x91\x82\x91\x82a\x05-V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[\x90\x81``\x91\x03\x12a\x05\x89W\x90V[a\x05wV[\x90` \x82\x82\x03\x12a\x05\xBEW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB9Wa\x05\xB6\x92\x01a\x05{V[\x90V[a\0\xB2V[a\0\xAEV[4a\x05\xF3Wa\x05\xEFa\x05\xDEa\x05\xD96`\x04a\x05\x8EV[a\x0F\xB3V[a\x05\xE6a\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[\x15\x15\x90V[a\x06\x06\x81a\x05\xF8V[\x03a\x06\rWV[_\x80\xFD[\x90P5\x90a\x06\x1E\x82a\x05\xFDV[V[`\x80\x81\x83\x03\x12a\x06aWa\x066\x82_\x83\x01a\0\xCDV[\x92a\x06^a\x06G\x84` \x85\x01a\x01\x07V[\x93a\x06U\x81`@\x86\x01a\x01\x07V[\x93``\x01a\x06\x11V[\x90V[a\0\xAEV[4a\x06\x9AWa\x06\x96a\x06\x85a\x06|6`\x04a\x06 V[\x92\x91\x90\x91a\x174V[a\x06\x8Da\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x91\x03\x12a\x06\xA9WV[a\0\xAEV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x90V[a\x06\xCEa\x06\xAEV[\x90V[a\x06\xDA\x90a\0\xE7V[\x90RV[\x91\x90a\x06\xF1\x90_` \x85\x01\x94\x01\x90a\x06\xD1V[V[4a\x07#Wa\x07\x036`\x04a\x06\x9FV[a\x07\x1Fa\x07\x0Ea\x06\xC6V[a\x07\x16a\0\xA4V[\x91\x82\x91\x82a\x06\xDEV[\x03\x90\xF3[a\0\xAAV[4a\x07XWa\x07Ta\x07Ca\x07>6`\x04a\x05\x8EV[a\x19SV[a\x07Ka\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[\x90\x91``\x82\x84\x03\x12a\x07\x92Wa\x07\x8Fa\x07x\x84_\x85\x01a\0\xCDV[\x93a\x07\x86\x81` \x86\x01a\x01\x07V[\x93`@\x01a\x01\x07V[\x90V[a\0\xAEV[4a\x07\xC8Wa\x07\xC4a\x07\xB3a\x07\xAD6`\x04a\x07]V[\x91a\x1E\xE7V[a\x07\xBBa\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[_\x90V[\x90V[a\x07\xECa\x07\xE7a\x07\xF1\x92a\0\xDCV[a\x07\xD5V[a\0\xDCV[\x90V[a\x07\xFD\x90a\x07\xD8V[\x90V[a\x08\t\x90a\x07\xF4V[\x90V[a\x08\x15\x90a\x07\xD8V[\x90V[a\x08!\x90a\x08\x0CV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x087\x82a\x05\xFDV[V[\x90` \x82\x82\x03\x12a\x08RWa\x08O\x91_\x01a\x08*V[\x90V[a\0\xAEV[\x91` a\x08x\x92\x94\x93a\x08q`@\x82\x01\x96_\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[a\x08\x82a\0\xA4V[=_\x82>=\x90\xFD[a\x08\x93\x90a\x08\x0CV[\x90V[a\x08\xA0`\xE0a\x02-V[\x90V[\x90a\x08\xAD\x90a\0\xE7V[\x90RV[\x90a\x08\xBB\x90a\x01\x16V[\x90RV[\x90a\x08\xC9\x90a\0\xB6V[\x90RV[\x90V[a\x08\xE4a\x08\xDFa\x08\xE9\x92a\x08\xCDV[a\x07\xD5V[a\0\xB6V[\x90V[a\t\0a\x08\xFBa\t\x05\x92a\x08\xCDV[a\x07\xD5V[a\0\xDCV[\x90V[\x90a\t\x12\x90a\0\xDCV[\x90RV[a\t\x1F\x90a\x07\xD8V[\x90V[a\t+\x90a\t\x16V[\x90V[a\t7\x90a\x08\x0CV[\x90V[\x90PQ\x90a\tG\x82a\0\xB9V[V[\x90` \x82\x82\x03\x12a\tbWa\t_\x91_\x01a\t:V[\x90V[a\0\xAEV[a\tp\x90a\0\xE7V[\x90RV[a\t}\x90a\x01\x16V[\x90RV[a\t\x8A\x90a\0\xB6V[\x90RV[a\t\x97\x90a\0\xDCV[\x90RV[\x90`\xC0\x80a\n\x17\x93a\t\xB3_\x82\x01Q_\x86\x01\x90a\tgV[a\t\xC5` \x82\x01Q` \x86\x01\x90a\tgV[a\t\xD7`@\x82\x01Q`@\x86\x01\x90a\ttV[a\t\xE9``\x82\x01Q``\x86\x01\x90a\tgV[a\t\xFB`\x80\x82\x01Q`\x80\x86\x01\x90a\t\x81V[a\n\r`\xA0\x82\x01Q`\xA0\x86\x01\x90a\t\x81V[\x01Q\x91\x01\x90a\t\x8EV[V[\x91\x90a\n,\x90_`\xE0\x85\x01\x94\x01\x90a\t\x9BV[V[\x90\x92\x91\x92a\n:a\x07\xD1V[Pa\nLa\nG\x82a\x08\0V[a\x08\x18V[` c\t^\xA7\xB3\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\n\x93_\x87\x95a\n\x9Ea\n\x87a\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x0C\x11Wa\x0B\xE5W[P\x92\x91\x900a\n\xBB\x90a\x08\x8AV[_\x92_\x94a\n\xC7a\x08\x96V[\x96_\x88\x01\x90a\n\xD5\x91a\x08\xA3V[` \x87\x01\x90a\n\xE3\x91a\x08\xA3V[`@\x86\x01\x90a\n\xF1\x91a\x08\xB1V[``\x85\x01\x90a\n\xFF\x91a\x08\xA3V[`\x80\x84\x01\x90a\x0B\r\x91a\x08\xBFV[a\x0B\x16\x90a\x08\xD0V[`\xA0\x83\x01\x90a\x0B$\x91a\x08\xBFV[a\x0B-\x90a\x08\xECV[`\xC0\x82\x01\x90a\x0B;\x91a\t\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0Be\x90a\t\"V[a\x0Bn\x90a\t.V[c\x04\xE4Z\xAFa\x0B{a\0\xA4V[\x80\x93a\x0B\x87\x82\x93a\x08$V[\x82R`\x04\x82\x01\x90a\x0B\x97\x91a\n\x19V[\x03\x81Z` \x94_\x91\xF1\x90\x81\x15a\x0B\xE0W_\x91a\x0B\xB2W[P\x90V[a\x0B\xD3\x91P` =\x81\x11a\x0B\xD9W[a\x0B\xCB\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a\x0B\xAEV[P=a\x0B\xC1V[a\x08zV[a\x0C\x05\x90` =\x81\x11a\x0C\nW[a\x0B\xFD\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\n\xADV[P=a\x0B\xF3V[a\x08zV[\x15a\x0C\x1DWV[_\x80\xFD[`\x01a\x0C-\x91\x01a\0\xB6V[\x90V[Q\x90V[\x90a\x0C>\x82a\x0C0V[\x81\x10\x15a\x0COW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x0C^\x90Qa\0\xE7V[\x90V[a\x0Ck\x90Qa\0\xB6V[\x90V[\x90a\x0C\x80a\x0C{\x83a\x02oV[a\x02-V[\x91\x82RV[``\x90V[=_\x14a\x0C\xA5Wa\x0C\x9A=a\x0CnV[\x90=_` \x84\x01>[V[a\x0C\xADa\x0C\x85V[\x90a\x0C\xA3V[a\x0C\xEF3a\x0C\xE9a\x0C\xE3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xE7V[\x91a\0\xE7V[\x14a\x0C\x16V[a\x0C\xF7a\x07\xD1V[[\x80a\r\x13a\r\ra\r\x08\x85a\x0C0V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\r\x8CW_\x80a\r1\x81a\r*\x86\x86\x90a\x0C4V[Q\x01a\x0CTV[a\rH` a\rA\x87\x87\x90a\x0C4V[Q\x01a\x0CaV[`@a\rU\x87\x87\x90a\x0C4V[Q\x01Q\x90` \x82\x01\x91Q\x92Z\xF1a\rta\rma\x0C\x8AV[\x91\x15a\x05\xF8V[a\r\x87WPa\r\x82\x90a\x0C!V[a\x0C\xF8V[a!\x8CV[PPV[5a\r\x9A\x81a\0\xF3V[\x90V[5a\r\xA7\x81a\0\xB9V[\x90V[`@\x90a\r\xD3a\r\xDA\x94\x96\x95\x93\x96a\r\xC9``\x84\x01\x98_\x85\x01\x90a\x06\xD1V[` \x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0E*W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E%W` \x01\x91`\x80\x82\x026\x03\x83\x13a\x0E WV[a\r\xE4V[a\r\xE0V[a\r\xDCV[P\x90V[\x91\x90\x81\x10\x15a\x0ECW`\x80\x02\x01\x90V[a\x04sV[`\xFF\x16\x90V[a\x0EW\x81a\x0EHV[\x03a\x0E^WV[_\x80\xFD[5a\x0El\x81a\x0ENV[\x90V[\x90V[a\x0E\x86a\x0E\x81a\x0E\x8B\x92a\x0EoV[a\x07\xD5V[a\x0EHV[\x90V[a\x0E\xA2a\x0E\x9Da\x0E\xA7\x92a\x08\xCDV[a\x07\xD5V[a\x0EHV[\x90V[\x90V[a\x0E\xC1a\x0E\xBCa\x0E\xC6\x92a\x0E\xAAV[a\x07\xD5V[a\x0EHV[\x90V[5a\x0E\xD3\x81a\x05\xFDV[\x90V[5a\x0E\xE0\x81a\x01\x1EV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0F\x01Wa\x0E\xFD` \x91a\x01\xE6V[\x01\x90V[a\x01\xF0V[\x90a\x0F\x18a\x0F\x13\x83a\x0E\xE3V[a\x02-V[\x91\x82RV[_\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0FN`\x0Fa\x0F\x06V[\x90a\x0F[` \x83\x01a\x0F\x1DV[V[a\x0Fea\x0FDV[\x90V[_\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\x99`\x03a\x0F\x06V[\x90a\x0F\xA6` \x83\x01a\x0FhV[V[a\x0F\xB0a\x0F\x8FV[\x90V[\x90a\x0F\xBCa\x07\xD1V[Pa\x0F\xD8a\x0F\xD3a\x0F\xCE_\x85\x01a\r\x90V[a\x08\0V[a\x08\x18V[` c#\xB8r\xDD\x913\x90a\x10\x12_a\x0F\xEF0a\x08\x8AV[\x95a\x10\x1Da\x0F\xFE\x87\x8B\x01a\r\x9DV[a\x10\x06a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\x08$V[\x85R`\x04\x85\x01a\r\xAAV[\x03\x92Z\xF1\x80\x15a\x132Wa\x13\x06W[Pa\x109` \x83\x01a\r\x9DV[a\x10D_\x84\x01a\r\x90V[\x90a\x10Ma\x07\xD1V[\x91a\x10Va\x07\xD1V[\x91[\x82a\x10\x81a\x10{a\x10va\x10p\x8A`@\x81\x01\x90a\r\xE8V[\x90a\x0E/V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\x12yWa\x10\xA9_a\x10\xA3a\x10\x9C\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x10\xBCa\x10\xB6`\x01a\x0ErV[\x91a\x0EHV[\x14_\x14a\x11iWa\x11\x16\x92\x93P\x90a\x10\xED` a\x10\xE7a\x10\xE0\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x90a\x11\x10`@a\x11\na\x11\x03\x8A\x83\x81\x01\x90a\r\xE8V[\x89\x91a\x0E3V[\x01a\x0E\xD6V[\x92a\n.V[\x90[\x81a\x11ba\x11?` a\x119a\x112\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\r\x90V[\x92a\x11]\x83\x85\x90a\x11Na\x0F]V[\x90a\x11Wa\x0F\xA8V[\x91a\"GV[a\x0C!V[\x91\x90a\x10XV[a\x11\x8B_a\x11\x85a\x11~\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x11\x9Da\x11\x97_a\x0E\x8EV[\x91a\x0EHV[\x14_\x14a\x11\xDBWa\x11\xD4\x92\x93P\x90a\x11\xCE` a\x11\xC8a\x11\xC1\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x91a\x1E\xE7V[\x90[a\x11\x18V[a\x11\xFD_a\x11\xF7a\x11\xF0\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x12\x10a\x12\n`\x02a\x0E\xADV[\x91a\x0EHV[\x14a\x12\x1DW[PPa\x11\xD6V[a\x12q\x92\x93P\x90a\x12G` a\x12Aa\x12:\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x90a\x12k``a\x12ea\x12^\x8A`@\x81\x01\x90a\r\xE8V[\x89\x91a\x0E3V[\x01a\x0E\xC9V[\x92a\x174V[\x90_\x80a\x12\x16V[\x93\x94Pa\x12\x90\x92Pa\x12\x8B\x91Pa\x08\0V[a\x08\x18V[` c\xA9\x05\x9C\xBB\x913\x90a\x12\xB7_\x86\x95a\x12\xC2a\x12\xABa\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x13\x01Wa\x12\xD5W[P\x90V[a\x12\xF5\x90` =\x81\x11a\x12\xFAW[a\x12\xED\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x12\xD1V[P=a\x12\xE3V[a\x08zV[a\x13&\x90` =\x81\x11a\x13+W[a\x13\x1E\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x10,V[P=a\x13\x14V[a\x08zV[a\x13Ka\x13Fa\x13P\x92a\x0EoV[a\x07\xD5V[a\0\xB6V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x13kW` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90a\x13\x82a\x13}\x83a\x13SV[a\x02-V[\x91\x82RV[a\x13\x91`\x80a\x02-V[\x90V[_\x90V[_\x90V[a\x13\xA4a\x13\x87V[\x90` \x80\x80\x80\x85a\x13\xB3a\x13\x94V[\x81R\x01a\x13\xBEa\x13\x94V[\x81R\x01a\x13\xC9a\x13\x98V[\x81R\x01a\x13\xD4a\x13\x94V[\x81RPPV[a\x13\xE2a\x13\x9CV[\x90V[_[\x82\x81\x10a\x13\xF3WPPPV[` \x90a\x13\xFEa\x13\xDAV[\x81\x84\x01R\x01a\x13\xE7V[\x90a\x14-a\x14\x15\x83a\x13pV[\x92` \x80a\x14#\x86\x93a\x13SV[\x92\x01\x91\x03\x90a\x13\xE5V[V[a\x148\x90a\x08\xECV[\x90V[a\x14E`\x80a\x02-V[\x90V[\x90a\x14R\x90a\x05\xF8V[\x90RV[Q\x90V[\x90a\x14d\x82a\x14VV[\x81\x10\x15a\x14uW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x14\x83\x90a\x07\xD8V[\x90V[a\x14\x8F\x90a\x14zV[\x90V[a\x14\x9B\x90a\x08\x0CV[\x90V[\x90V[a\x14\xB5a\x14\xB0a\x14\xBA\x92a\x14\x9EV[a\x07\xD5V[a\0\xB6V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x14\xE0a\x14\xE6\x91\x93\x92\x93a\0\xB6V[\x92a\0\xB6V[\x82\x01\x80\x92\x11a\x14\xF1WV[a\x14\xBDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x15\x0EW` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90\x92\x91\x92a\x15(a\x15#\x82a\x14\xF6V[a\x02-V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x15eW\x91[\x83\x83\x10a\x15LWPPPPV[` \x80\x91a\x15Z\x84\x86a\t:V[\x81R\x01\x92\x01\x91a\x15?V[a\x02_V[\x90\x80`\x1F\x83\x01\x12\x15a\x15\x88W\x81` a\x15\x85\x93Q\x91\x01a\x15\x13V[\x90V[a\x01\xE2V[\x90` \x82\x82\x03\x12a\x15\xBDW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x15\xB8Wa\x15\xB5\x92\x01a\x15jV[\x90V[a\0\xB2V[a\0\xAEV[a\x15\xCB\x90a\x08\xD0V[\x90RV[` \x91\x81R\x01\x90V[` \x01\x90V[a\x15\xE7\x90a\x05\xF8V[\x90RV[\x90``\x80a\x161\x93a\x16\x03_\x82\x01Q_\x86\x01\x90a\tgV[a\x16\x15` \x82\x01Q` \x86\x01\x90a\tgV[a\x16'`@\x82\x01Q`@\x86\x01\x90a\x15\xDEV[\x01Q\x91\x01\x90a\tgV[V[\x90a\x16@\x81`\x80\x93a\x15\xEBV[\x01\x90V[` \x01\x90V[\x90a\x16ga\x16aa\x16Z\x84a\x14VV[\x80\x93a\x15\xCFV[\x92a\x15\xD8V[\x90_[\x81\x81\x10a\x16wWPPP\x90V[\x90\x91\x92a\x16\x90a\x16\x8A`\x01\x92\x86Qa\x163V[\x94a\x16DV[\x91\x01\x91\x90\x91a\x16jV[\x90a\x16\xD7a\x16\xE2\x91a\x16\xE9\x96\x98\x97\x95a\x16\xCA`\x80\x96a\x16\xC0`\xA0\x88\x01\x94_\x89\x01\x90a\x01\x87V[` \x87\x01\x90a\x15\xC2V[\x84\x82\x03`@\x86\x01Ra\x16JV[\x96``\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[Q\x90V[a\x16\xFEa\x17\x04\x91\x93\x92\x93a\0\xB6V[\x92a\0\xB6V[\x82\x03\x91\x82\x11a\x17\x0FWV[a\x14\xBDV[\x90a\x17\x1E\x82a\x16\xEBV[\x81\x10\x15a\x17/W` \x80\x91\x02\x01\x01\x90V[a\x04sV[\x90\x92\x91a\x17?a\x07\xD1V[Pa\x17Qa\x17L\x85a\x08\0V[a\x08\x18V[\x90` c\t^\xA7\xB3\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x17\x99_\x87\x96a\x17\xA4a\x17\x8Da\0\xA4V[\x98\x89\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x19NW_\x94a\x187\x93a\x18\x12\x92a\x19\"W[Pa\x18\ta\x17\xD3a\x17\xCE`\x01a\x137V[a\x14\x08V[\x97\x93\x91a\x18\0a\x17\xE2\x89a\x14/V[\x93a\x17\xF7a\x17\xEEa\x14;V[\x97\x8B\x89\x01a\x08\xA3V[` \x87\x01a\x08\xA3V[`@\x85\x01a\x14HV[``\x83\x01a\x08\xA3V[a\x181\x85\x91\x85\x90a\x18+a\x18%\x83a\x08\xD0V[\x85a\x14ZV[Ra\x08\xD0V[\x90a\x14ZV[QPa\x18ja\x18e\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x14\x86V[a\x14\x92V[a\x18\xAB\x83c\xCA\xC8\x8E\xA9a\x18\xB6\x82\x97a\x18\x810a\x08\x8AV[a\x18\x96Ba\x18\x90a\x01,a\x14\xA1V[\x90a\x14\xD1V[\x91a\x18\x9Fa\0\xA4V[\x9A\x8B\x99\x8A\x98\x89\x97a\x08$V[\x87R`\x04\x87\x01a\x16\x9AV[\x03\x92Z\xF1\x90\x81\x15a\x19\x1DWa\x18\xF8\x91a\x18\xF3\x91_\x91a\x18\xFBW[Pa\x18\xEDa\x18\xDD\x82a\x16\xEBV[a\x18\xE7`\x01a\x137V[\x90a\x16\xEFV[\x90a\x17\x14V[a\x0CaV[\x90V[a\x19\x17\x91P=\x80_\x83>a\x19\x0F\x81\x83a\x02\x04V[\x81\x01\x90a\x15\x8DV[_a\x18\xD0V[a\x08zV[a\x19B\x90` =\x81\x11a\x19GW[a\x19:\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x17\xBDV[P=a\x190V[a\x08zV[\x90a\x19\\a\x07\xD1V[Pa\x19xa\x19sa\x19n_\x85\x01a\r\x90V[a\x08\0V[a\x08\x18V[` c#\xB8r\xDD\x913\x90a\x19\xB2_a\x19\x8F0a\x08\x8AV[\x95a\x19\xBDa\x19\x9E\x87\x8B\x01a\r\x9DV[a\x19\xA6a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\x08$V[\x85R`\x04\x85\x01a\r\xAAV[\x03\x92Z\xF1\x80\x15a\x1DJWa\x1D\x1EW[Pa\x19\xD9` \x83\x01a\r\x9DV[a\x19\xE4_\x84\x01a\r\x90V[a\x19\xECa\x07\xD1V[\x91[\x82a\x1A\x17a\x1A\x11a\x1A\x0Ca\x1A\x06\x89`@\x81\x01\x90a\r\xE8V[\x90a\x0E/V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\x1C\x92Wa\x1A\xC1a\x1A\xBCa\x1A\xF3\x93` \x93a\x1AL_a\x1AFa\x1A?\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1A_a\x1AY`\x01a\x0ErV[\x91a\x0EHV[\x14_\x14a\x1B\x89Wa\x1A\xB5\x90\x89\x83a\x1A\xAF`@a\x1A\xA9\x8Ca\x1A\xA3a\x1A\x99\x8Da\x1A\x93a\x1A\x8C\x8A\x88\x81\x01\x90a\r\xE8V[\x86\x91a\x0E3V[\x01a\r\x90V[\x96\x84\x81\x01\x90a\r\xE8V[\x90a\x0E3V[\x01a\x0E\xD6V[\x92a\n.V[P[a\x08\0V[a\x08\x18V[cp\xA0\x821\x90a\x1A\xE8a\x1A\xD30a\x08\x8AV[\x92a\x1A\xDCa\0\xA4V[\x95\x86\x94\x85\x93\x84\x93a\x08$V[\x83R`\x04\x83\x01a\x06\xDEV[\x03\x91Z\xFA\x90\x81\x15a\x1B\x84W_\x91a\x1BVW[Pa\x1BOa\x1B,` a\x1B&a\x1B\x1F\x88`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\r\x90V[\x92a\x1BJ\x83\x85\x90a\x1B;a\x0F]V[\x90a\x1BDa\x0F\xA8V[\x91a\"GV[a\x0C!V[\x91\x90a\x19\xEEV[a\x1Bw\x91P` =\x81\x11a\x1B}W[a\x1Bo\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a\x1B\x05V[P=a\x1BeV[a\x08zV[a\x1B\xAB_a\x1B\xA5a\x1B\x9E\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1B\xBDa\x1B\xB7_a\x0E\x8EV[\x91a\x0EHV[\x14_\x14a\x1B\xF9Wa\x1B\xF2\x90\x89a\x1B\xEC\x87a\x1B\xE6a\x1B\xDF\x87\x94`@\x81\x01\x90a\r\xE8V[\x8D\x91a\x0E3V[\x01a\r\x90V[\x91a\x1E\xE7V[P[a\x1A\xB7V[a\x1C\x1B_a\x1C\x15a\x1C\x0E\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1C.a\x1C(`\x02a\x0E\xADV[\x91a\x0EHV[\x14a\x1C:W[Pa\x1B\xF4V[a\x1C\x8B\x90\x89\x83a\x1C\x85``a\x1C\x7F\x8Ca\x1Cya\x1Cn\x8Da\x1Cha\x1Ca\x8A`@\x81\x01\x90a\r\xE8V[\x86\x91a\x0E3V[\x01a\r\x90V[\x96`@\x81\x01\x90a\r\xE8V[\x90a\x0E3V[\x01a\x0E\xC9V[\x92a\x174V[P_a\x1C4V[\x92\x93Pa\x1C\xA8\x91Pa\x1C\xA3\x90a\x08\0V[a\x08\x18V[` c\xA9\x05\x9C\xBB\x913\x90a\x1C\xCF_\x86\x95a\x1C\xDAa\x1C\xC3a\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x1D\x19Wa\x1C\xEDW[P\x90V[a\x1D\r\x90` =\x81\x11a\x1D\x12W[a\x1D\x05\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x1C\xE9V[P=a\x1C\xFBV[a\x08zV[a\x1D>\x90` =\x81\x11a\x1DCW[a\x1D6\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x19\xCCV[P=a\x1D,V[a\x08zV[a\x1Dca\x1D^a\x1Dh\x92a\x0E\xAAV[a\x07\xD5V[a\0\xB6V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1D\x83W` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90a\x1D\x9Aa\x1D\x95\x83a\x1DkV[a\x02-V[\x91\x82RV[6\x907V[\x90a\x1D\xC9a\x1D\xB1\x83a\x1D\x88V[\x92` \x80a\x1D\xBF\x86\x93a\x1DkV[\x92\x01\x91\x03\x90a\x1D\x9FV[V[Q\x90V[\x90a\x1D\xD9\x82a\x1D\xCBV[\x81\x10\x15a\x1D\xEAW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x1D\xF8\x90a\x07\xD8V[\x90V[a\x1E\x04\x90a\x1D\xEFV[\x90V[a\x1E\x10\x90a\x08\x0CV[\x90V[a\x1E\x1C\x90a\x137V[\x90RV[` \x91\x81R\x01\x90V[` \x01\x90V[\x90a\x1E<\x81` \x93a\tgV[\x01\x90V[` \x01\x90V[\x90a\x1Eca\x1E]a\x1EV\x84a\x1D\xCBV[\x80\x93a\x1E V[\x92a\x1E)V[\x90_[\x81\x81\x10a\x1EsWPPP\x90V[\x90\x91\x92a\x1E\x8Ca\x1E\x86`\x01\x92\x86Qa\x1E/V[\x94a\x1E@V[\x91\x01\x91\x90\x91a\x1EfV[\x90a\x1E\xD3a\x1E\xDE\x91a\x1E\xE5\x96\x98\x97\x95a\x1E\xC6`\x80\x96a\x1E\xBC`\xA0\x88\x01\x94_\x89\x01\x90a\x01\x87V[` \x87\x01\x90a\x1E\x13V[\x84\x82\x03`@\x86\x01Ra\x1EFV[\x96``\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[\x90a\x1E\xF0a\x07\xD1V[P\x81a\x1F\x04a\x1E\xFE_a\x08\xD0V[\x91a\0\xB6V[\x14a \xE7W[a\x1Faa\x1Ff\x91a\x1F\\a\x1F&a\x1F!`\x02a\x1DOV[a\x1D\xA4V[\x95a\x1FC\x83a\x1F>\x89a\x1F8_a\x08\xD0V[\x90a\x1D\xCFV[a\x08\xA3V[a\x1FW\x87a\x1FQ`\x01a\x137V[\x90a\x1D\xCFV[a\x08\xA3V[a\x08\0V[a\x08\x18V[\x90` c\t^\xA7\xB3\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x1F\xAE_\x85\x96a\x1F\xB9a\x1F\xA2a\0\xA4V[\x98\x89\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x91\x82\x15a \xE2W_\x92a \xB6W[Pa\x1F\xFDa\x1F\xF8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x1D\xFBV[a\x1E\x07V[a ?\x83c8\xED\x179a J`\x01\x97a \x150a\x08\x8AV[a *Ba $a\x01,a\x14\xA1V[\x90a\x14\xD1V[\x91a 3a\0\xA4V[\x9A\x8B\x99\x8A\x98\x89\x97a\x08$V[\x87R`\x04\x87\x01a\x1E\x96V[\x03\x92Z\xF1\x90\x81\x15a \xB1Wa \x8C\x91a \x87\x91_\x91a \x8FW[Pa \x81a q\x82a\x16\xEBV[a {`\x01a\x137V[\x90a\x16\xEFV[\x90a\x17\x14V[a\x0CaV[\x90V[a \xAB\x91P=\x80_\x83>a \xA3\x81\x83a\x02\x04V[\x81\x01\x90a\x15\x8DV[_a dV[a\x08zV[a \xD6\x90` =\x81\x11a \xDBW[a \xCE\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x1F\xCBV[P=a \xC4V[a\x08zV[\x90Pa!1` a \xFFa \xFA\x84a\x08\0V[a\x08\x18V[cp\xA0\x821\x90a!&a!\x110a\x08\x8AV[\x92a!\x1Aa\0\xA4V[\x95\x86\x94\x85\x93\x84\x93a\x08$V[\x83R`\x04\x83\x01a\x06\xDEV[\x03\x91Z\xFA\x90\x81\x15a!\x83Wa\x1Ff\x91a\x1Fa\x91_\x91a!UW[P\x92\x91PPa\x1F\nV[a!v\x91P` =\x81\x11a!|W[a!n\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a!KV[P=a!dV[a\x08zV[Q\x90V[a!\x95\x81a!\x88V[\x90a!\xB2\x82a!\xACa!\xA6_a\x08\xD0V[\x91a\0\xB6V[\x11a\x0C\x16V[` \x01\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a!\xEEa!\xF7` \x93a!\xFC\x93a!\xE5\x81a!\xB7V[\x93\x84\x80\x93a!\xBBV[\x95\x86\x91\x01a!\xC4V[a\x01\xE6V[\x01\x90V[\x94\x93\x91a\"=\x90a\"E\x94a\"0a\"%``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra!\xCFV[\x92` \x8A\x01\x90a\x01\x87V[\x87\x82\x03`@\x89\x01Ra!\xCFV[\x94\x01\x90a\x06\xD1V[V[\x90a\"va\"\x8A\x94a\"\x85\x93\x92\x94a\"]a\0\xA4V[\x95\x86\x94`\x04` \x87\x01c\xBBr5\xE9`\xE0\x1B\x81R\x01a\"\0V[` \x82\x01\x81\x03\x82R\x03\x82a\x02\x04V[a\"\x8CV[V[a\"\x9F\x90a\"\x9A`\x01a\"\xD3V[a\"\xF3V[V[jconsole.log\x90V[_\x80\x91a\"\xBC\x81a!\x88V[\x90` a\"\xC7a\"\xA1V[\x91\x01\x90Z\xFAPV[_\x90V[a\"\xDBa\"\xCFV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\"\xDFWa#\x03\x90a\"\xB0V[V\xFE\xA2dipfsX\"\x12 \xCC\xB6\x087\xC5\r\xF4\xD6'\xD2@r\xC5\x03\xEE\xE5\xE4\r\x06\xA6/\xC4\xEEyj\xBA\xAF\xAA% \x90\x9BdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b366107cd57005b61001f5f3561009e565b80630748b19b146100995780631749e1e3146100945780636b1b9b201461008f5780638231ab0b1461008a578063886cdc9c14610085578063b11de7e314610080578063d18556261461007b5763f1a525920361000e57610797565b610728565b6106f3565b610666565b6105c3565b610542565b61042c565b6101a9565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b90565b6100c2816100b6565b036100c957565b5f80fd5b905035906100da826100b9565b565b60018060a01b031690565b6100f0906100dc565b90565b6100fc816100e7565b0361010357565b5f80fd5b90503590610114826100f3565b565b62ffffff1690565b61012781610116565b0361012e57565b5f80fd5b9050359061013f8261011e565b565b60808183031261018257610157825f83016100cd565b9261017f6101688460208501610107565b936101768160408601610107565b93606001610132565b90565b6100ae565b610190906100b6565b9052565b91906101a7905f60208501940190610187565b565b346101dd576101d96101c86101bf366004610141565b92919091610a2e565b6101d06100a4565b91829182610194565b0390f35b6100aa565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061020e906101e6565b810190811067ffffffffffffffff82111761022857604052565b6101f0565b906102406102396100a4565b9283610204565b565b67ffffffffffffffff811161025a5760208091020190565b6101f0565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b67ffffffffffffffff811161028d576102896020916101e6565b0190565b6101f0565b90825f939282370152565b909291926102b26102ad8261026f565b61022d565b938185526020850190828401116102ce576102cc92610292565b565b61026b565b9080601f830112156102f1578160206102ee9335910161029d565b90565b6101e2565b91909160608184031261035a5761030d606061022d565b9261031a815f8401610107565b5f85015261032b81602084016100cd565b6020850152604082013567ffffffffffffffff81116103555761034e92016102d3565b6040830152565b610267565b610263565b92919061037361036e82610242565b61022d565b93818552602080860192028101918383116103ca5781905b838210610399575050505050565b813567ffffffffffffffff81116103c5576020916103ba87849387016102f6565b81520191019061038b565b6101e2565b61025f565b9080601f830112156103ed578160206103ea9335910161035f565b90565b6101e2565b90602082820312610422575f82013567ffffffffffffffff811161041d5761041a92016103cf565b90565b6100b2565b6100ae565b5f0190565b61043f61043a3660046103f2565b610cb3565b6104476100a4565b8061045181610427565b0390f35b9060208282031261046e5761046b915f016100cd565b90565b6100ae565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b9190916104a081610487565b8310156104be57600a6104b460039261048b565b8185040193060290565b610473565b1c90565b62ffffff1690565b6104df9060086104e493026104c3565b6104c7565b90565b906104f291546104cf565b90565b5f6104ff81610487565b82101561051c576105199161051391610494565b906104e7565b90565b5f80fd5b61052990610116565b9052565b9190610540905f60208501940190610520565b565b346105725761056e61055d610558366004610455565b6104f5565b6105656100a4565b9182918261052d565b0390f35b6100aa565b5f80fd5b908160609103126105895790565b610577565b906020828203126105be575f82013567ffffffffffffffff81116105b9576105b6920161057b565b90565b6100b2565b6100ae565b346105f3576105ef6105de6105d936600461058e565b610fb3565b6105e66100a4565b91829182610194565b0390f35b6100aa565b151590565b610606816105f8565b0361060d57565b5f80fd5b9050359061061e826105fd565b565b60808183031261066157610636825f83016100cd565b9261065e6106478460208501610107565b936106558160408601610107565b93606001610611565b90565b6100ae565b3461069a5761069661068561067c366004610620565b92919091611734565b61068d6100a4565b91829182610194565b0390f35b6100aa565b5f9103126106a957565b6100ae565b731111111254eeb25477b68fb85ed929f73a96058290565b6106ce6106ae565b90565b6106da906100e7565b9052565b91906106f1905f602085019401906106d1565b565b346107235761070336600461069f565b61071f61070e6106c6565b6107166100a4565b918291826106de565b0390f35b6100aa565b346107585761075461074361073e36600461058e565b611953565b61074b6100a4565b91829182610194565b0390f35b6100aa565b90916060828403126107925761078f610778845f85016100cd565b936107868160208601610107565b93604001610107565b90565b6100ae565b346107c8576107c46107b36107ad36600461075d565b91611ee7565b6107bb6100a4565b91829182610194565b0390f35b6100aa565b5f80fd5b5f90565b90565b6107ec6107e76107f1926100dc565b6107d5565b6100dc565b90565b6107fd906107d8565b90565b610809906107f4565b90565b610815906107d8565b90565b6108219061080c565b90565b60e01b90565b90505190610837826105fd565b565b906020828203126108525761084f915f0161082a565b90565b6100ae565b91602061087892949361087160408201965f8301906106d1565b0190610187565b565b6108826100a4565b3d5f823e3d90fd5b6108939061080c565b90565b6108a060e061022d565b90565b906108ad906100e7565b9052565b906108bb90610116565b9052565b906108c9906100b6565b9052565b90565b6108e46108df6108e9926108cd565b6107d5565b6100b6565b90565b6109006108fb610905926108cd565b6107d5565b6100dc565b90565b90610912906100dc565b9052565b61091f906107d8565b90565b61092b90610916565b90565b6109379061080c565b90565b90505190610947826100b9565b565b906020828203126109625761095f915f0161093a565b90565b6100ae565b610970906100e7565b9052565b61097d90610116565b9052565b61098a906100b6565b9052565b610997906100dc565b9052565b9060c080610a17936109b35f8201515f860190610967565b6109c560208201516020860190610967565b6109d760408201516040860190610974565b6109e960608201516060860190610967565b6109fb60808201516080860190610981565b610a0d60a082015160a0860190610981565b015191019061098e565b565b9190610a2c905f60e0850194019061099b565b565b90929192610a3a6107d1565b50610a4c610a4782610800565b610818565b602063095ea7b3917f000000000000000000000000000000000000000000000000000000000000000090610a935f8795610a9e610a876100a4565b97889687958694610824565b845260048401610857565b03925af18015610c1157610be5575b5092919030610abb9061088a565b5f925f94610ac7610896565b965f880190610ad5916108a3565b6020870190610ae3916108a3565b6040860190610af1916108b1565b6060850190610aff916108a3565b6080840190610b0d916108bf565b610b16906108d0565b60a0830190610b24916108bf565b610b2d906108ec565b60c0820190610b3b91610908565b7f0000000000000000000000000000000000000000000000000000000000000000610b6590610922565b610b6e9061092e565b6304e45aaf610b7b6100a4565b8093610b878293610824565b82526004820190610b9791610a19565b03815a6020945f91f1908115610be0575f91610bb2575b5090565b610bd3915060203d8111610bd9575b610bcb8183610204565b810190610949565b5f610bae565b503d610bc1565b61087a565b610c059060203d8111610c0a575b610bfd8183610204565b810190610839565b610aad565b503d610bf3565b61087a565b15610c1d57565b5f80fd5b6001610c2d91016100b6565b90565b5190565b90610c3e82610c30565b811015610c4f576020809102010190565b610473565b610c5e90516100e7565b90565b610c6b90516100b6565b90565b90610c80610c7b8361026f565b61022d565b918252565b606090565b3d5f14610ca557610c9a3d610c6e565b903d5f602084013e5b565b610cad610c85565b90610ca3565b610cef33610ce9610ce37f00000000000000000000000000000000000000000000000000000000000000006100e7565b916100e7565b14610c16565b610cf76107d1565b5b80610d13610d0d610d0885610c30565b6100b6565b916100b6565b1015610d8c575f80610d3181610d2a868690610c34565b5101610c54565b610d486020610d41878790610c34565b5101610c61565b6040610d55878790610c34565b51015190602082019151925af1610d74610d6d610c8a565b91156105f8565b610d875750610d8290610c21565b610cf8565b61218c565b5050565b35610d9a816100f3565b90565b35610da7816100b9565b90565b604090610dd3610dda9496959396610dc960608401985f8501906106d1565b60208301906106d1565b0190610187565b565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610e2a570180359067ffffffffffffffff8211610e2557602001916080820236038313610e2057565b610de4565b610de0565b610ddc565b5090565b9190811015610e43576080020190565b610473565b60ff1690565b610e5781610e48565b03610e5e57565b5f80fd5b35610e6c81610e4e565b90565b90565b610e86610e81610e8b92610e6f565b6107d5565b610e48565b90565b610ea2610e9d610ea7926108cd565b6107d5565b610e48565b90565b90565b610ec1610ebc610ec692610eaa565b6107d5565b610e48565b90565b35610ed3816105fd565b90565b35610ee08161011e565b90565b67ffffffffffffffff8111610f0157610efd6020916101e6565b0190565b6101f0565b90610f18610f1383610ee3565b61022d565b918252565b5f7f6f757470757420616d6f756e743a200000000000000000000000000000000000910152565b610f4e600f610f06565b90610f5b60208301610f1d565b565b610f65610f44565b90565b5f7f206f660000000000000000000000000000000000000000000000000000000000910152565b610f996003610f06565b90610fa660208301610f68565b565b610fb0610f8f565b90565b90610fbc6107d1565b50610fd8610fd3610fce5f8501610d90565b610800565b610818565b60206323b872dd9133906110125f610fef3061088a565b9561101d610ffe878b01610d9d565b6110066100a4565b98899788968795610824565b855260048501610daa565b03925af1801561133257611306575b5061103960208301610d9d565b6110445f8401610d90565b9061104d6107d1565b916110566107d1565b915b8261108161107b6110766110708a6040810190610de8565b90610e2f565b6100b6565b916100b6565b1015611279576110a95f6110a361109c896040810190610de8565b8791610e33565b01610e62565b6110bc6110b66001610e72565b91610e48565b145f1461116957611116929350906110ed60206110e76110e0896040810190610de8565b8891610e33565b01610d90565b90611110604061110a6111038a83810190610de8565b8991610e33565b01610ed6565b92610a2e565b905b8161116261113f6020611139611132896040810190610de8565b8791610e33565b01610d90565b9261115d83859061114e610f5d565b90611157610fa8565b91612247565b610c21565b9190611058565b61118b5f61118561117e896040810190610de8565b8791610e33565b01610e62565b61119d6111975f610e8e565b91610e48565b145f146111db576111d4929350906111ce60206111c86111c1896040810190610de8565b8891610e33565b01610d90565b91611ee7565b905b611118565b6111fd5f6111f76111f0896040810190610de8565b8791610e33565b01610e62565b61121061120a6002610ead565b91610e48565b1461121d575b50506111d6565b61127192935090611247602061124161123a896040810190610de8565b8891610e33565b01610d90565b9061126b606061126561125e8a6040810190610de8565b8991610e33565b01610ec9565b92611734565b905f80611216565b939450611290925061128b9150610800565b610818565b602063a9059cbb9133906112b75f86956112c26112ab6100a4565b97889687958694610824565b845260048401610857565b03925af18015611301576112d5575b5090565b6112f59060203d81116112fa575b6112ed8183610204565b810190610839565b6112d1565b503d6112e3565b61087a565b6113269060203d811161132b575b61131e8183610204565b810190610839565b61102c565b503d611314565b61087a565b61134b61134661135092610e6f565b6107d5565b6100b6565b90565b67ffffffffffffffff811161136b5760208091020190565b6101f0565b9061138261137d83611353565b61022d565b918252565b611391608061022d565b90565b5f90565b5f90565b6113a4611387565b906020808080856113b3611394565b8152016113be611394565b8152016113c9611398565b8152016113d4611394565b81525050565b6113e261139c565b90565b5f5b8281106113f357505050565b6020906113fe6113da565b81840152016113e7565b9061142d61141583611370565b926020806114238693611353565b92019103906113e5565b565b611438906108ec565b90565b611445608061022d565b90565b90611452906105f8565b9052565b5190565b9061146482611456565b811015611475576020809102010190565b610473565b611483906107d8565b90565b61148f9061147a565b90565b61149b9061080c565b90565b90565b6114b56114b06114ba9261149e565b6107d5565b6100b6565b90565b634e487b7160e01b5f52601160045260245ffd5b6114e06114e6919392936100b6565b926100b6565b82018092116114f157565b6114bd565b67ffffffffffffffff811161150e5760208091020190565b6101f0565b90929192611528611523826114f6565b61022d565b938185526020808601920283019281841161156557915b83831061154c5750505050565b6020809161155a848661093a565b81520192019161153f565b61025f565b9080601f830112156115885781602061158593519101611513565b90565b6101e2565b906020828203126115bd575f82015167ffffffffffffffff81116115b8576115b5920161156a565b90565b6100b2565b6100ae565b6115cb906108d0565b9052565b60209181520190565b60200190565b6115e7906105f8565b9052565b90606080611631936116035f8201515f860190610967565b61161560208201516020860190610967565b611627604082015160408601906115de565b0151910190610967565b565b90611640816080936115eb565b0190565b60200190565b9061166761166161165a84611456565b80936115cf565b926115d8565b905f5b8181106116775750505090565b90919261169061168a6001928651611633565b94611644565b910191909161166a565b906116d76116e2916116e9969897956116ca6080966116c060a08801945f890190610187565b60208701906115c2565b848203604086015261164a565b9660608301906106d1565b0190610187565b565b5190565b6116fe611704919392936100b6565b926100b6565b820391821161170f57565b6114bd565b9061171e826116eb565b81101561172f576020809102010190565b610473565b90929161173f6107d1565b5061175161174c85610800565b610818565b90602063095ea7b3927f0000000000000000000000000000000000000000000000000000000000000000906117995f87966117a461178d6100a4565b98899687958694610824565b845260048401610857565b03925af1801561194e575f946118379361181292611922575b506118096117d36117ce6001611337565b611408565b9793916118006117e28961142f565b936117f76117ee61143b565b978b89016108a3565b602087016108a3565b60408501611448565b606083016108a3565b6118318591859061182b611825836108d0565b8561145a565b526108d0565b9061145a565b515061186a6118657f0000000000000000000000000000000000000000000000000000000000000000611486565b611492565b6118ab8363cac88ea96118b682976118813061088a565b6118964261189061012c6114a1565b906114d1565b9161189f6100a4565b9a8b998a988997610824565b87526004870161169a565b03925af190811561191d576118f8916118f3915f916118fb575b506118ed6118dd826116eb565b6118e76001611337565b906116ef565b90611714565b610c61565b90565b61191791503d805f833e61190f8183610204565b81019061158d565b5f6118d0565b61087a565b6119429060203d8111611947575b61193a8183610204565b810190610839565b6117bd565b503d611930565b61087a565b9061195c6107d1565b5061197861197361196e5f8501610d90565b610800565b610818565b60206323b872dd9133906119b25f61198f3061088a565b956119bd61199e878b01610d9d565b6119a66100a4565b98899788968795610824565b855260048501610daa565b03925af18015611d4a57611d1e575b506119d960208301610d9d565b6119e45f8401610d90565b6119ec6107d1565b915b82611a17611a11611a0c611a06896040810190610de8565b90610e2f565b6100b6565b916100b6565b1015611c9257611ac1611abc611af393602093611a4c5f611a46611a3f8c6040810190610de8565b8b91610e33565b01610e62565b611a5f611a596001610e72565b91610e48565b145f14611b8957611ab5908983611aaf6040611aa98c611aa3611a998d611a93611a8c8a88810190610de8565b8691610e33565b01610d90565b9684810190610de8565b90610e33565b01610ed6565b92610a2e565b505b610800565b610818565b6370a0823190611ae8611ad33061088a565b92611adc6100a4565b95869485938493610824565b8352600483016106de565b03915afa908115611b84575f91611b56575b50611b4f611b2c6020611b26611b1f886040810190610de8565b8791610e33565b01610d90565b92611b4a838590611b3b610f5d565b90611b44610fa8565b91612247565b610c21565b91906119ee565b611b77915060203d8111611b7d575b611b6f8183610204565b810190610949565b5f611b05565b503d611b65565b61087a565b611bab5f611ba5611b9e8c6040810190610de8565b8b91610e33565b01610e62565b611bbd611bb75f610e8e565b91610e48565b145f14611bf957611bf29089611bec87611be6611bdf87946040810190610de8565b8d91610e33565b01610d90565b91611ee7565b505b611ab7565b611c1b5f611c15611c0e8c6040810190610de8565b8b91610e33565b01610e62565b611c2e611c286002610ead565b91610e48565b14611c3a575b50611bf4565b611c8b908983611c856060611c7f8c611c79611c6e8d611c68611c618a6040810190610de8565b8691610e33565b01610d90565b966040810190610de8565b90610e33565b01610ec9565b92611734565b505f611c34565b929350611ca89150611ca390610800565b610818565b602063a9059cbb913390611ccf5f8695611cda611cc36100a4565b97889687958694610824565b845260048401610857565b03925af18015611d1957611ced575b5090565b611d0d9060203d8111611d12575b611d058183610204565b810190610839565b611ce9565b503d611cfb565b61087a565b611d3e9060203d8111611d43575b611d368183610204565b810190610839565b6119cc565b503d611d2c565b61087a565b611d63611d5e611d6892610eaa565b6107d5565b6100b6565b90565b67ffffffffffffffff8111611d835760208091020190565b6101f0565b90611d9a611d9583611d6b565b61022d565b918252565b369037565b90611dc9611db183611d88565b92602080611dbf8693611d6b565b9201910390611d9f565b565b5190565b90611dd982611dcb565b811015611dea576020809102010190565b610473565b611df8906107d8565b90565b611e0490611def565b90565b611e109061080c565b90565b611e1c90611337565b9052565b60209181520190565b60200190565b90611e3c81602093610967565b0190565b60200190565b90611e63611e5d611e5684611dcb565b8093611e20565b92611e29565b905f5b818110611e735750505090565b909192611e8c611e866001928651611e2f565b94611e40565b9101919091611e66565b90611ed3611ede91611ee596989795611ec6608096611ebc60a08801945f890190610187565b6020870190611e13565b8482036040860152611e46565b9660608301906106d1565b0190610187565b565b90611ef06107d1565b5081611f04611efe5f6108d0565b916100b6565b146120e7575b611f61611f6691611f5c611f26611f216002611d4f565b611da4565b95611f4383611f3e89611f385f6108d0565b90611dcf565b6108a3565b611f5787611f516001611337565b90611dcf565b6108a3565b610800565b610818565b90602063095ea7b3927f000000000000000000000000000000000000000000000000000000000000000090611fae5f8596611fb9611fa26100a4565b98899687958694610824565b845260048401610857565b03925af19182156120e2575f926120b6575b50611ffd611ff87f0000000000000000000000000000000000000000000000000000000000000000611dfb565b611e07565b61203f836338ed173961204a6001976120153061088a565b61202a4261202461012c6114a1565b906114d1565b916120336100a4565b9a8b998a988997610824565b875260048701611e96565b03925af19081156120b15761208c91612087915f9161208f575b50612081612071826116eb565b61207b6001611337565b906116ef565b90611714565b610c61565b90565b6120ab91503d805f833e6120a38183610204565b81019061158d565b5f612064565b61087a565b6120d69060203d81116120db575b6120ce8183610204565b810190610839565b611fcb565b503d6120c4565b61087a565b905061213160206120ff6120fa84610800565b610818565b6370a08231906121266121113061088a565b9261211a6100a4565b95869485938493610824565b8352600483016106de565b03915afa90811561218357611f6691611f61915f91612155575b5092915050611f0a565b612176915060203d811161217c575b61216e8183610204565b810190610949565b5f61214b565b503d612164565b61087a565b5190565b61219581612188565b906121b2826121ac6121a65f6108d0565b916100b6565b11610c16565b602001fd5b5190565b60209181520190565b90825f9392825e0152565b6121ee6121f76020936121fc936121e5816121b7565b938480936121bb565b958691016121c4565b6101e6565b0190565b94939161223d906122459461223061222560609560808b01908b82035f8d01526121cf565b9260208a0190610187565b87820360408901526121cf565b9401906106d1565b565b9061227661228a9461228593929461225d6100a4565b95869460046020870163bb7235e960e01b815201612200565b60208201810382520382610204565b61228c565b565b61229f9061229a60016122d3565b6122f3565b565b6a636f6e736f6c652e6c6f6790565b5f80916122bc81612188565b9060206122c76122a1565b9101905afa50565b5f90565b6122db6122cf565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036122df57612303906122b0565b56fea2646970667358221220ccb60837c50df4d627d24072c503eee5e40d06a62fc4ee796abaafaa2520909b64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x07\xCDW\0[a\0\x1F_5a\0\x9EV[\x80c\x07H\xB1\x9B\x14a\0\x99W\x80c\x17I\xE1\xE3\x14a\0\x94W\x80ck\x1B\x9B \x14a\0\x8FW\x80c\x821\xAB\x0B\x14a\0\x8AW\x80c\x88l\xDC\x9C\x14a\0\x85W\x80c\xB1\x1D\xE7\xE3\x14a\0\x80W\x80c\xD1\x85V&\x14a\0{Wc\xF1\xA5%\x92\x03a\0\x0EWa\x07\x97V[a\x07(V[a\x06\xF3V[a\x06fV[a\x05\xC3V[a\x05BV[a\x04,V[a\x01\xA9V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90V[a\0\xC2\x81a\0\xB6V[\x03a\0\xC9WV[_\x80\xFD[\x90P5\x90a\0\xDA\x82a\0\xB9V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF0\x90a\0\xDCV[\x90V[a\0\xFC\x81a\0\xE7V[\x03a\x01\x03WV[_\x80\xFD[\x90P5\x90a\x01\x14\x82a\0\xF3V[V[b\xFF\xFF\xFF\x16\x90V[a\x01'\x81a\x01\x16V[\x03a\x01.WV[_\x80\xFD[\x90P5\x90a\x01?\x82a\x01\x1EV[V[`\x80\x81\x83\x03\x12a\x01\x82Wa\x01W\x82_\x83\x01a\0\xCDV[\x92a\x01\x7Fa\x01h\x84` \x85\x01a\x01\x07V[\x93a\x01v\x81`@\x86\x01a\x01\x07V[\x93``\x01a\x012V[\x90V[a\0\xAEV[a\x01\x90\x90a\0\xB6V[\x90RV[\x91\x90a\x01\xA7\x90_` \x85\x01\x94\x01\x90a\x01\x87V[V[4a\x01\xDDWa\x01\xD9a\x01\xC8a\x01\xBF6`\x04a\x01AV[\x92\x91\x90\x91a\n.V[a\x01\xD0a\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\x0E\x90a\x01\xE6V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02(W`@RV[a\x01\xF0V[\x90a\x02@a\x029a\0\xA4V[\x92\x83a\x02\x04V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02ZW` \x80\x91\x02\x01\x90V[a\x01\xF0V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8DWa\x02\x89` \x91a\x01\xE6V[\x01\x90V[a\x01\xF0V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x02\xB2a\x02\xAD\x82a\x02oV[a\x02-V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x02\xCEWa\x02\xCC\x92a\x02\x92V[V[a\x02kV[\x90\x80`\x1F\x83\x01\x12\x15a\x02\xF1W\x81` a\x02\xEE\x935\x91\x01a\x02\x9DV[\x90V[a\x01\xE2V[\x91\x90\x91``\x81\x84\x03\x12a\x03ZWa\x03\r``a\x02-V[\x92a\x03\x1A\x81_\x84\x01a\x01\x07V[_\x85\x01Ra\x03+\x81` \x84\x01a\0\xCDV[` \x85\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03UWa\x03N\x92\x01a\x02\xD3V[`@\x83\x01RV[a\x02gV[a\x02cV[\x92\x91\x90a\x03sa\x03n\x82a\x02BV[a\x02-V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x81\x01\x91\x83\x83\x11a\x03\xCAW\x81\x90[\x83\x82\x10a\x03\x99WPPPPPV[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC5W` \x91a\x03\xBA\x87\x84\x93\x87\x01a\x02\xF6V[\x81R\x01\x91\x01\x90a\x03\x8BV[a\x01\xE2V[a\x02_V[\x90\x80`\x1F\x83\x01\x12\x15a\x03\xEDW\x81` a\x03\xEA\x935\x91\x01a\x03_V[\x90V[a\x01\xE2V[\x90` \x82\x82\x03\x12a\x04\"W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\x1DWa\x04\x1A\x92\x01a\x03\xCFV[\x90V[a\0\xB2V[a\0\xAEV[_\x01\x90V[a\x04?a\x04:6`\x04a\x03\xF2V[a\x0C\xB3V[a\x04Ga\0\xA4V[\x80a\x04Q\x81a\x04'V[\x03\x90\xF3[\x90` \x82\x82\x03\x12a\x04nWa\x04k\x91_\x01a\0\xCDV[\x90V[a\0\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[\x91\x90\x91a\x04\xA0\x81a\x04\x87V[\x83\x10\x15a\x04\xBEW`\na\x04\xB4`\x03\x92a\x04\x8BV[\x81\x85\x04\x01\x93\x06\x02\x90V[a\x04sV[\x1C\x90V[b\xFF\xFF\xFF\x16\x90V[a\x04\xDF\x90`\x08a\x04\xE4\x93\x02a\x04\xC3V[a\x04\xC7V[\x90V[\x90a\x04\xF2\x91Ta\x04\xCFV[\x90V[_a\x04\xFF\x81a\x04\x87V[\x82\x10\x15a\x05\x1CWa\x05\x19\x91a\x05\x13\x91a\x04\x94V[\x90a\x04\xE7V[\x90V[_\x80\xFD[a\x05)\x90a\x01\x16V[\x90RV[\x91\x90a\x05@\x90_` \x85\x01\x94\x01\x90a\x05 V[V[4a\x05rWa\x05na\x05]a\x05X6`\x04a\x04UV[a\x04\xF5V[a\x05ea\0\xA4V[\x91\x82\x91\x82a\x05-V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[\x90\x81``\x91\x03\x12a\x05\x89W\x90V[a\x05wV[\x90` \x82\x82\x03\x12a\x05\xBEW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\xB9Wa\x05\xB6\x92\x01a\x05{V[\x90V[a\0\xB2V[a\0\xAEV[4a\x05\xF3Wa\x05\xEFa\x05\xDEa\x05\xD96`\x04a\x05\x8EV[a\x0F\xB3V[a\x05\xE6a\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[\x15\x15\x90V[a\x06\x06\x81a\x05\xF8V[\x03a\x06\rWV[_\x80\xFD[\x90P5\x90a\x06\x1E\x82a\x05\xFDV[V[`\x80\x81\x83\x03\x12a\x06aWa\x066\x82_\x83\x01a\0\xCDV[\x92a\x06^a\x06G\x84` \x85\x01a\x01\x07V[\x93a\x06U\x81`@\x86\x01a\x01\x07V[\x93``\x01a\x06\x11V[\x90V[a\0\xAEV[4a\x06\x9AWa\x06\x96a\x06\x85a\x06|6`\x04a\x06 V[\x92\x91\x90\x91a\x174V[a\x06\x8Da\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x91\x03\x12a\x06\xA9WV[a\0\xAEV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x90V[a\x06\xCEa\x06\xAEV[\x90V[a\x06\xDA\x90a\0\xE7V[\x90RV[\x91\x90a\x06\xF1\x90_` \x85\x01\x94\x01\x90a\x06\xD1V[V[4a\x07#Wa\x07\x036`\x04a\x06\x9FV[a\x07\x1Fa\x07\x0Ea\x06\xC6V[a\x07\x16a\0\xA4V[\x91\x82\x91\x82a\x06\xDEV[\x03\x90\xF3[a\0\xAAV[4a\x07XWa\x07Ta\x07Ca\x07>6`\x04a\x05\x8EV[a\x19SV[a\x07Ka\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[\x90\x91``\x82\x84\x03\x12a\x07\x92Wa\x07\x8Fa\x07x\x84_\x85\x01a\0\xCDV[\x93a\x07\x86\x81` \x86\x01a\x01\x07V[\x93`@\x01a\x01\x07V[\x90V[a\0\xAEV[4a\x07\xC8Wa\x07\xC4a\x07\xB3a\x07\xAD6`\x04a\x07]V[\x91a\x1E\xE7V[a\x07\xBBa\0\xA4V[\x91\x82\x91\x82a\x01\x94V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[_\x90V[\x90V[a\x07\xECa\x07\xE7a\x07\xF1\x92a\0\xDCV[a\x07\xD5V[a\0\xDCV[\x90V[a\x07\xFD\x90a\x07\xD8V[\x90V[a\x08\t\x90a\x07\xF4V[\x90V[a\x08\x15\x90a\x07\xD8V[\x90V[a\x08!\x90a\x08\x0CV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x087\x82a\x05\xFDV[V[\x90` \x82\x82\x03\x12a\x08RWa\x08O\x91_\x01a\x08*V[\x90V[a\0\xAEV[\x91` a\x08x\x92\x94\x93a\x08q`@\x82\x01\x96_\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[a\x08\x82a\0\xA4V[=_\x82>=\x90\xFD[a\x08\x93\x90a\x08\x0CV[\x90V[a\x08\xA0`\xE0a\x02-V[\x90V[\x90a\x08\xAD\x90a\0\xE7V[\x90RV[\x90a\x08\xBB\x90a\x01\x16V[\x90RV[\x90a\x08\xC9\x90a\0\xB6V[\x90RV[\x90V[a\x08\xE4a\x08\xDFa\x08\xE9\x92a\x08\xCDV[a\x07\xD5V[a\0\xB6V[\x90V[a\t\0a\x08\xFBa\t\x05\x92a\x08\xCDV[a\x07\xD5V[a\0\xDCV[\x90V[\x90a\t\x12\x90a\0\xDCV[\x90RV[a\t\x1F\x90a\x07\xD8V[\x90V[a\t+\x90a\t\x16V[\x90V[a\t7\x90a\x08\x0CV[\x90V[\x90PQ\x90a\tG\x82a\0\xB9V[V[\x90` \x82\x82\x03\x12a\tbWa\t_\x91_\x01a\t:V[\x90V[a\0\xAEV[a\tp\x90a\0\xE7V[\x90RV[a\t}\x90a\x01\x16V[\x90RV[a\t\x8A\x90a\0\xB6V[\x90RV[a\t\x97\x90a\0\xDCV[\x90RV[\x90`\xC0\x80a\n\x17\x93a\t\xB3_\x82\x01Q_\x86\x01\x90a\tgV[a\t\xC5` \x82\x01Q` \x86\x01\x90a\tgV[a\t\xD7`@\x82\x01Q`@\x86\x01\x90a\ttV[a\t\xE9``\x82\x01Q``\x86\x01\x90a\tgV[a\t\xFB`\x80\x82\x01Q`\x80\x86\x01\x90a\t\x81V[a\n\r`\xA0\x82\x01Q`\xA0\x86\x01\x90a\t\x81V[\x01Q\x91\x01\x90a\t\x8EV[V[\x91\x90a\n,\x90_`\xE0\x85\x01\x94\x01\x90a\t\x9BV[V[\x90\x92\x91\x92a\n:a\x07\xD1V[Pa\nLa\nG\x82a\x08\0V[a\x08\x18V[` c\t^\xA7\xB3\x91\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\n\x93_\x87\x95a\n\x9Ea\n\x87a\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x0C\x11Wa\x0B\xE5W[P\x92\x91\x900a\n\xBB\x90a\x08\x8AV[_\x92_\x94a\n\xC7a\x08\x96V[\x96_\x88\x01\x90a\n\xD5\x91a\x08\xA3V[` \x87\x01\x90a\n\xE3\x91a\x08\xA3V[`@\x86\x01\x90a\n\xF1\x91a\x08\xB1V[``\x85\x01\x90a\n\xFF\x91a\x08\xA3V[`\x80\x84\x01\x90a\x0B\r\x91a\x08\xBFV[a\x0B\x16\x90a\x08\xD0V[`\xA0\x83\x01\x90a\x0B$\x91a\x08\xBFV[a\x0B-\x90a\x08\xECV[`\xC0\x82\x01\x90a\x0B;\x91a\t\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x0Be\x90a\t\"V[a\x0Bn\x90a\t.V[c\x04\xE4Z\xAFa\x0B{a\0\xA4V[\x80\x93a\x0B\x87\x82\x93a\x08$V[\x82R`\x04\x82\x01\x90a\x0B\x97\x91a\n\x19V[\x03\x81Z` \x94_\x91\xF1\x90\x81\x15a\x0B\xE0W_\x91a\x0B\xB2W[P\x90V[a\x0B\xD3\x91P` =\x81\x11a\x0B\xD9W[a\x0B\xCB\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a\x0B\xAEV[P=a\x0B\xC1V[a\x08zV[a\x0C\x05\x90` =\x81\x11a\x0C\nW[a\x0B\xFD\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\n\xADV[P=a\x0B\xF3V[a\x08zV[\x15a\x0C\x1DWV[_\x80\xFD[`\x01a\x0C-\x91\x01a\0\xB6V[\x90V[Q\x90V[\x90a\x0C>\x82a\x0C0V[\x81\x10\x15a\x0COW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x0C^\x90Qa\0\xE7V[\x90V[a\x0Ck\x90Qa\0\xB6V[\x90V[\x90a\x0C\x80a\x0C{\x83a\x02oV[a\x02-V[\x91\x82RV[``\x90V[=_\x14a\x0C\xA5Wa\x0C\x9A=a\x0CnV[\x90=_` \x84\x01>[V[a\x0C\xADa\x0C\x85V[\x90a\x0C\xA3V[a\x0C\xEF3a\x0C\xE9a\x0C\xE3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\0\xE7V[\x91a\0\xE7V[\x14a\x0C\x16V[a\x0C\xF7a\x07\xD1V[[\x80a\r\x13a\r\ra\r\x08\x85a\x0C0V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\r\x8CW_\x80a\r1\x81a\r*\x86\x86\x90a\x0C4V[Q\x01a\x0CTV[a\rH` a\rA\x87\x87\x90a\x0C4V[Q\x01a\x0CaV[`@a\rU\x87\x87\x90a\x0C4V[Q\x01Q\x90` \x82\x01\x91Q\x92Z\xF1a\rta\rma\x0C\x8AV[\x91\x15a\x05\xF8V[a\r\x87WPa\r\x82\x90a\x0C!V[a\x0C\xF8V[a!\x8CV[PPV[5a\r\x9A\x81a\0\xF3V[\x90V[5a\r\xA7\x81a\0\xB9V[\x90V[`@\x90a\r\xD3a\r\xDA\x94\x96\x95\x93\x96a\r\xC9``\x84\x01\x98_\x85\x01\x90a\x06\xD1V[` \x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0E*W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0E%W` \x01\x91`\x80\x82\x026\x03\x83\x13a\x0E WV[a\r\xE4V[a\r\xE0V[a\r\xDCV[P\x90V[\x91\x90\x81\x10\x15a\x0ECW`\x80\x02\x01\x90V[a\x04sV[`\xFF\x16\x90V[a\x0EW\x81a\x0EHV[\x03a\x0E^WV[_\x80\xFD[5a\x0El\x81a\x0ENV[\x90V[\x90V[a\x0E\x86a\x0E\x81a\x0E\x8B\x92a\x0EoV[a\x07\xD5V[a\x0EHV[\x90V[a\x0E\xA2a\x0E\x9Da\x0E\xA7\x92a\x08\xCDV[a\x07\xD5V[a\x0EHV[\x90V[\x90V[a\x0E\xC1a\x0E\xBCa\x0E\xC6\x92a\x0E\xAAV[a\x07\xD5V[a\x0EHV[\x90V[5a\x0E\xD3\x81a\x05\xFDV[\x90V[5a\x0E\xE0\x81a\x01\x1EV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0F\x01Wa\x0E\xFD` \x91a\x01\xE6V[\x01\x90V[a\x01\xF0V[\x90a\x0F\x18a\x0F\x13\x83a\x0E\xE3V[a\x02-V[\x91\x82RV[_\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0FN`\x0Fa\x0F\x06V[\x90a\x0F[` \x83\x01a\x0F\x1DV[V[a\x0Fea\x0FDV[\x90V[_\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\x99`\x03a\x0F\x06V[\x90a\x0F\xA6` \x83\x01a\x0FhV[V[a\x0F\xB0a\x0F\x8FV[\x90V[\x90a\x0F\xBCa\x07\xD1V[Pa\x0F\xD8a\x0F\xD3a\x0F\xCE_\x85\x01a\r\x90V[a\x08\0V[a\x08\x18V[` c#\xB8r\xDD\x913\x90a\x10\x12_a\x0F\xEF0a\x08\x8AV[\x95a\x10\x1Da\x0F\xFE\x87\x8B\x01a\r\x9DV[a\x10\x06a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\x08$V[\x85R`\x04\x85\x01a\r\xAAV[\x03\x92Z\xF1\x80\x15a\x132Wa\x13\x06W[Pa\x109` \x83\x01a\r\x9DV[a\x10D_\x84\x01a\r\x90V[\x90a\x10Ma\x07\xD1V[\x91a\x10Va\x07\xD1V[\x91[\x82a\x10\x81a\x10{a\x10va\x10p\x8A`@\x81\x01\x90a\r\xE8V[\x90a\x0E/V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\x12yWa\x10\xA9_a\x10\xA3a\x10\x9C\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x10\xBCa\x10\xB6`\x01a\x0ErV[\x91a\x0EHV[\x14_\x14a\x11iWa\x11\x16\x92\x93P\x90a\x10\xED` a\x10\xE7a\x10\xE0\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x90a\x11\x10`@a\x11\na\x11\x03\x8A\x83\x81\x01\x90a\r\xE8V[\x89\x91a\x0E3V[\x01a\x0E\xD6V[\x92a\n.V[\x90[\x81a\x11ba\x11?` a\x119a\x112\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\r\x90V[\x92a\x11]\x83\x85\x90a\x11Na\x0F]V[\x90a\x11Wa\x0F\xA8V[\x91a\"GV[a\x0C!V[\x91\x90a\x10XV[a\x11\x8B_a\x11\x85a\x11~\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x11\x9Da\x11\x97_a\x0E\x8EV[\x91a\x0EHV[\x14_\x14a\x11\xDBWa\x11\xD4\x92\x93P\x90a\x11\xCE` a\x11\xC8a\x11\xC1\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x91a\x1E\xE7V[\x90[a\x11\x18V[a\x11\xFD_a\x11\xF7a\x11\xF0\x89`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\x0EbV[a\x12\x10a\x12\n`\x02a\x0E\xADV[\x91a\x0EHV[\x14a\x12\x1DW[PPa\x11\xD6V[a\x12q\x92\x93P\x90a\x12G` a\x12Aa\x12:\x89`@\x81\x01\x90a\r\xE8V[\x88\x91a\x0E3V[\x01a\r\x90V[\x90a\x12k``a\x12ea\x12^\x8A`@\x81\x01\x90a\r\xE8V[\x89\x91a\x0E3V[\x01a\x0E\xC9V[\x92a\x174V[\x90_\x80a\x12\x16V[\x93\x94Pa\x12\x90\x92Pa\x12\x8B\x91Pa\x08\0V[a\x08\x18V[` c\xA9\x05\x9C\xBB\x913\x90a\x12\xB7_\x86\x95a\x12\xC2a\x12\xABa\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x13\x01Wa\x12\xD5W[P\x90V[a\x12\xF5\x90` =\x81\x11a\x12\xFAW[a\x12\xED\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x12\xD1V[P=a\x12\xE3V[a\x08zV[a\x13&\x90` =\x81\x11a\x13+W[a\x13\x1E\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x10,V[P=a\x13\x14V[a\x08zV[a\x13Ka\x13Fa\x13P\x92a\x0EoV[a\x07\xD5V[a\0\xB6V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x13kW` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90a\x13\x82a\x13}\x83a\x13SV[a\x02-V[\x91\x82RV[a\x13\x91`\x80a\x02-V[\x90V[_\x90V[_\x90V[a\x13\xA4a\x13\x87V[\x90` \x80\x80\x80\x85a\x13\xB3a\x13\x94V[\x81R\x01a\x13\xBEa\x13\x94V[\x81R\x01a\x13\xC9a\x13\x98V[\x81R\x01a\x13\xD4a\x13\x94V[\x81RPPV[a\x13\xE2a\x13\x9CV[\x90V[_[\x82\x81\x10a\x13\xF3WPPPV[` \x90a\x13\xFEa\x13\xDAV[\x81\x84\x01R\x01a\x13\xE7V[\x90a\x14-a\x14\x15\x83a\x13pV[\x92` \x80a\x14#\x86\x93a\x13SV[\x92\x01\x91\x03\x90a\x13\xE5V[V[a\x148\x90a\x08\xECV[\x90V[a\x14E`\x80a\x02-V[\x90V[\x90a\x14R\x90a\x05\xF8V[\x90RV[Q\x90V[\x90a\x14d\x82a\x14VV[\x81\x10\x15a\x14uW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x14\x83\x90a\x07\xD8V[\x90V[a\x14\x8F\x90a\x14zV[\x90V[a\x14\x9B\x90a\x08\x0CV[\x90V[\x90V[a\x14\xB5a\x14\xB0a\x14\xBA\x92a\x14\x9EV[a\x07\xD5V[a\0\xB6V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x14\xE0a\x14\xE6\x91\x93\x92\x93a\0\xB6V[\x92a\0\xB6V[\x82\x01\x80\x92\x11a\x14\xF1WV[a\x14\xBDV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x15\x0EW` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90\x92\x91\x92a\x15(a\x15#\x82a\x14\xF6V[a\x02-V[\x93\x81\x85R` \x80\x86\x01\x92\x02\x83\x01\x92\x81\x84\x11a\x15eW\x91[\x83\x83\x10a\x15LWPPPPV[` \x80\x91a\x15Z\x84\x86a\t:V[\x81R\x01\x92\x01\x91a\x15?V[a\x02_V[\x90\x80`\x1F\x83\x01\x12\x15a\x15\x88W\x81` a\x15\x85\x93Q\x91\x01a\x15\x13V[\x90V[a\x01\xE2V[\x90` \x82\x82\x03\x12a\x15\xBDW_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x15\xB8Wa\x15\xB5\x92\x01a\x15jV[\x90V[a\0\xB2V[a\0\xAEV[a\x15\xCB\x90a\x08\xD0V[\x90RV[` \x91\x81R\x01\x90V[` \x01\x90V[a\x15\xE7\x90a\x05\xF8V[\x90RV[\x90``\x80a\x161\x93a\x16\x03_\x82\x01Q_\x86\x01\x90a\tgV[a\x16\x15` \x82\x01Q` \x86\x01\x90a\tgV[a\x16'`@\x82\x01Q`@\x86\x01\x90a\x15\xDEV[\x01Q\x91\x01\x90a\tgV[V[\x90a\x16@\x81`\x80\x93a\x15\xEBV[\x01\x90V[` \x01\x90V[\x90a\x16ga\x16aa\x16Z\x84a\x14VV[\x80\x93a\x15\xCFV[\x92a\x15\xD8V[\x90_[\x81\x81\x10a\x16wWPPP\x90V[\x90\x91\x92a\x16\x90a\x16\x8A`\x01\x92\x86Qa\x163V[\x94a\x16DV[\x91\x01\x91\x90\x91a\x16jV[\x90a\x16\xD7a\x16\xE2\x91a\x16\xE9\x96\x98\x97\x95a\x16\xCA`\x80\x96a\x16\xC0`\xA0\x88\x01\x94_\x89\x01\x90a\x01\x87V[` \x87\x01\x90a\x15\xC2V[\x84\x82\x03`@\x86\x01Ra\x16JV[\x96``\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[Q\x90V[a\x16\xFEa\x17\x04\x91\x93\x92\x93a\0\xB6V[\x92a\0\xB6V[\x82\x03\x91\x82\x11a\x17\x0FWV[a\x14\xBDV[\x90a\x17\x1E\x82a\x16\xEBV[\x81\x10\x15a\x17/W` \x80\x91\x02\x01\x01\x90V[a\x04sV[\x90\x92\x91a\x17?a\x07\xD1V[Pa\x17Qa\x17L\x85a\x08\0V[a\x08\x18V[\x90` c\t^\xA7\xB3\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x17\x99_\x87\x96a\x17\xA4a\x17\x8Da\0\xA4V[\x98\x89\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x19NW_\x94a\x187\x93a\x18\x12\x92a\x19\"W[Pa\x18\ta\x17\xD3a\x17\xCE`\x01a\x137V[a\x14\x08V[\x97\x93\x91a\x18\0a\x17\xE2\x89a\x14/V[\x93a\x17\xF7a\x17\xEEa\x14;V[\x97\x8B\x89\x01a\x08\xA3V[` \x87\x01a\x08\xA3V[`@\x85\x01a\x14HV[``\x83\x01a\x08\xA3V[a\x181\x85\x91\x85\x90a\x18+a\x18%\x83a\x08\xD0V[\x85a\x14ZV[Ra\x08\xD0V[\x90a\x14ZV[QPa\x18ja\x18e\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x14\x86V[a\x14\x92V[a\x18\xAB\x83c\xCA\xC8\x8E\xA9a\x18\xB6\x82\x97a\x18\x810a\x08\x8AV[a\x18\x96Ba\x18\x90a\x01,a\x14\xA1V[\x90a\x14\xD1V[\x91a\x18\x9Fa\0\xA4V[\x9A\x8B\x99\x8A\x98\x89\x97a\x08$V[\x87R`\x04\x87\x01a\x16\x9AV[\x03\x92Z\xF1\x90\x81\x15a\x19\x1DWa\x18\xF8\x91a\x18\xF3\x91_\x91a\x18\xFBW[Pa\x18\xEDa\x18\xDD\x82a\x16\xEBV[a\x18\xE7`\x01a\x137V[\x90a\x16\xEFV[\x90a\x17\x14V[a\x0CaV[\x90V[a\x19\x17\x91P=\x80_\x83>a\x19\x0F\x81\x83a\x02\x04V[\x81\x01\x90a\x15\x8DV[_a\x18\xD0V[a\x08zV[a\x19B\x90` =\x81\x11a\x19GW[a\x19:\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x17\xBDV[P=a\x190V[a\x08zV[\x90a\x19\\a\x07\xD1V[Pa\x19xa\x19sa\x19n_\x85\x01a\r\x90V[a\x08\0V[a\x08\x18V[` c#\xB8r\xDD\x913\x90a\x19\xB2_a\x19\x8F0a\x08\x8AV[\x95a\x19\xBDa\x19\x9E\x87\x8B\x01a\r\x9DV[a\x19\xA6a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\x08$V[\x85R`\x04\x85\x01a\r\xAAV[\x03\x92Z\xF1\x80\x15a\x1DJWa\x1D\x1EW[Pa\x19\xD9` \x83\x01a\r\x9DV[a\x19\xE4_\x84\x01a\r\x90V[a\x19\xECa\x07\xD1V[\x91[\x82a\x1A\x17a\x1A\x11a\x1A\x0Ca\x1A\x06\x89`@\x81\x01\x90a\r\xE8V[\x90a\x0E/V[a\0\xB6V[\x91a\0\xB6V[\x10\x15a\x1C\x92Wa\x1A\xC1a\x1A\xBCa\x1A\xF3\x93` \x93a\x1AL_a\x1AFa\x1A?\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1A_a\x1AY`\x01a\x0ErV[\x91a\x0EHV[\x14_\x14a\x1B\x89Wa\x1A\xB5\x90\x89\x83a\x1A\xAF`@a\x1A\xA9\x8Ca\x1A\xA3a\x1A\x99\x8Da\x1A\x93a\x1A\x8C\x8A\x88\x81\x01\x90a\r\xE8V[\x86\x91a\x0E3V[\x01a\r\x90V[\x96\x84\x81\x01\x90a\r\xE8V[\x90a\x0E3V[\x01a\x0E\xD6V[\x92a\n.V[P[a\x08\0V[a\x08\x18V[cp\xA0\x821\x90a\x1A\xE8a\x1A\xD30a\x08\x8AV[\x92a\x1A\xDCa\0\xA4V[\x95\x86\x94\x85\x93\x84\x93a\x08$V[\x83R`\x04\x83\x01a\x06\xDEV[\x03\x91Z\xFA\x90\x81\x15a\x1B\x84W_\x91a\x1BVW[Pa\x1BOa\x1B,` a\x1B&a\x1B\x1F\x88`@\x81\x01\x90a\r\xE8V[\x87\x91a\x0E3V[\x01a\r\x90V[\x92a\x1BJ\x83\x85\x90a\x1B;a\x0F]V[\x90a\x1BDa\x0F\xA8V[\x91a\"GV[a\x0C!V[\x91\x90a\x19\xEEV[a\x1Bw\x91P` =\x81\x11a\x1B}W[a\x1Bo\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a\x1B\x05V[P=a\x1BeV[a\x08zV[a\x1B\xAB_a\x1B\xA5a\x1B\x9E\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1B\xBDa\x1B\xB7_a\x0E\x8EV[\x91a\x0EHV[\x14_\x14a\x1B\xF9Wa\x1B\xF2\x90\x89a\x1B\xEC\x87a\x1B\xE6a\x1B\xDF\x87\x94`@\x81\x01\x90a\r\xE8V[\x8D\x91a\x0E3V[\x01a\r\x90V[\x91a\x1E\xE7V[P[a\x1A\xB7V[a\x1C\x1B_a\x1C\x15a\x1C\x0E\x8C`@\x81\x01\x90a\r\xE8V[\x8B\x91a\x0E3V[\x01a\x0EbV[a\x1C.a\x1C(`\x02a\x0E\xADV[\x91a\x0EHV[\x14a\x1C:W[Pa\x1B\xF4V[a\x1C\x8B\x90\x89\x83a\x1C\x85``a\x1C\x7F\x8Ca\x1Cya\x1Cn\x8Da\x1Cha\x1Ca\x8A`@\x81\x01\x90a\r\xE8V[\x86\x91a\x0E3V[\x01a\r\x90V[\x96`@\x81\x01\x90a\r\xE8V[\x90a\x0E3V[\x01a\x0E\xC9V[\x92a\x174V[P_a\x1C4V[\x92\x93Pa\x1C\xA8\x91Pa\x1C\xA3\x90a\x08\0V[a\x08\x18V[` c\xA9\x05\x9C\xBB\x913\x90a\x1C\xCF_\x86\x95a\x1C\xDAa\x1C\xC3a\0\xA4V[\x97\x88\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x80\x15a\x1D\x19Wa\x1C\xEDW[P\x90V[a\x1D\r\x90` =\x81\x11a\x1D\x12W[a\x1D\x05\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x1C\xE9V[P=a\x1C\xFBV[a\x08zV[a\x1D>\x90` =\x81\x11a\x1DCW[a\x1D6\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x19\xCCV[P=a\x1D,V[a\x08zV[a\x1Dca\x1D^a\x1Dh\x92a\x0E\xAAV[a\x07\xD5V[a\0\xB6V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1D\x83W` \x80\x91\x02\x01\x90V[a\x01\xF0V[\x90a\x1D\x9Aa\x1D\x95\x83a\x1DkV[a\x02-V[\x91\x82RV[6\x907V[\x90a\x1D\xC9a\x1D\xB1\x83a\x1D\x88V[\x92` \x80a\x1D\xBF\x86\x93a\x1DkV[\x92\x01\x91\x03\x90a\x1D\x9FV[V[Q\x90V[\x90a\x1D\xD9\x82a\x1D\xCBV[\x81\x10\x15a\x1D\xEAW` \x80\x91\x02\x01\x01\x90V[a\x04sV[a\x1D\xF8\x90a\x07\xD8V[\x90V[a\x1E\x04\x90a\x1D\xEFV[\x90V[a\x1E\x10\x90a\x08\x0CV[\x90V[a\x1E\x1C\x90a\x137V[\x90RV[` \x91\x81R\x01\x90V[` \x01\x90V[\x90a\x1E<\x81` \x93a\tgV[\x01\x90V[` \x01\x90V[\x90a\x1Eca\x1E]a\x1EV\x84a\x1D\xCBV[\x80\x93a\x1E V[\x92a\x1E)V[\x90_[\x81\x81\x10a\x1EsWPPP\x90V[\x90\x91\x92a\x1E\x8Ca\x1E\x86`\x01\x92\x86Qa\x1E/V[\x94a\x1E@V[\x91\x01\x91\x90\x91a\x1EfV[\x90a\x1E\xD3a\x1E\xDE\x91a\x1E\xE5\x96\x98\x97\x95a\x1E\xC6`\x80\x96a\x1E\xBC`\xA0\x88\x01\x94_\x89\x01\x90a\x01\x87V[` \x87\x01\x90a\x1E\x13V[\x84\x82\x03`@\x86\x01Ra\x1EFV[\x96``\x83\x01\x90a\x06\xD1V[\x01\x90a\x01\x87V[V[\x90a\x1E\xF0a\x07\xD1V[P\x81a\x1F\x04a\x1E\xFE_a\x08\xD0V[\x91a\0\xB6V[\x14a \xE7W[a\x1Faa\x1Ff\x91a\x1F\\a\x1F&a\x1F!`\x02a\x1DOV[a\x1D\xA4V[\x95a\x1FC\x83a\x1F>\x89a\x1F8_a\x08\xD0V[\x90a\x1D\xCFV[a\x08\xA3V[a\x1FW\x87a\x1FQ`\x01a\x137V[\x90a\x1D\xCFV[a\x08\xA3V[a\x08\0V[a\x08\x18V[\x90` c\t^\xA7\xB3\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x1F\xAE_\x85\x96a\x1F\xB9a\x1F\xA2a\0\xA4V[\x98\x89\x96\x87\x95\x86\x94a\x08$V[\x84R`\x04\x84\x01a\x08WV[\x03\x92Z\xF1\x91\x82\x15a \xE2W_\x92a \xB6W[Pa\x1F\xFDa\x1F\xF8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x1D\xFBV[a\x1E\x07V[a ?\x83c8\xED\x179a J`\x01\x97a \x150a\x08\x8AV[a *Ba $a\x01,a\x14\xA1V[\x90a\x14\xD1V[\x91a 3a\0\xA4V[\x9A\x8B\x99\x8A\x98\x89\x97a\x08$V[\x87R`\x04\x87\x01a\x1E\x96V[\x03\x92Z\xF1\x90\x81\x15a \xB1Wa \x8C\x91a \x87\x91_\x91a \x8FW[Pa \x81a q\x82a\x16\xEBV[a {`\x01a\x137V[\x90a\x16\xEFV[\x90a\x17\x14V[a\x0CaV[\x90V[a \xAB\x91P=\x80_\x83>a \xA3\x81\x83a\x02\x04V[\x81\x01\x90a\x15\x8DV[_a dV[a\x08zV[a \xD6\x90` =\x81\x11a \xDBW[a \xCE\x81\x83a\x02\x04V[\x81\x01\x90a\x089V[a\x1F\xCBV[P=a \xC4V[a\x08zV[\x90Pa!1` a \xFFa \xFA\x84a\x08\0V[a\x08\x18V[cp\xA0\x821\x90a!&a!\x110a\x08\x8AV[\x92a!\x1Aa\0\xA4V[\x95\x86\x94\x85\x93\x84\x93a\x08$V[\x83R`\x04\x83\x01a\x06\xDEV[\x03\x91Z\xFA\x90\x81\x15a!\x83Wa\x1Ff\x91a\x1Fa\x91_\x91a!UW[P\x92\x91PPa\x1F\nV[a!v\x91P` =\x81\x11a!|W[a!n\x81\x83a\x02\x04V[\x81\x01\x90a\tIV[_a!KV[P=a!dV[a\x08zV[Q\x90V[a!\x95\x81a!\x88V[\x90a!\xB2\x82a!\xACa!\xA6_a\x08\xD0V[\x91a\0\xB6V[\x11a\x0C\x16V[` \x01\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a!\xEEa!\xF7` \x93a!\xFC\x93a!\xE5\x81a!\xB7V[\x93\x84\x80\x93a!\xBBV[\x95\x86\x91\x01a!\xC4V[a\x01\xE6V[\x01\x90V[\x94\x93\x91a\"=\x90a\"E\x94a\"0a\"%``\x95`\x80\x8B\x01\x90\x8B\x82\x03_\x8D\x01Ra!\xCFV[\x92` \x8A\x01\x90a\x01\x87V[\x87\x82\x03`@\x89\x01Ra!\xCFV[\x94\x01\x90a\x06\xD1V[V[\x90a\"va\"\x8A\x94a\"\x85\x93\x92\x94a\"]a\0\xA4V[\x95\x86\x94`\x04` \x87\x01c\xBBr5\xE9`\xE0\x1B\x81R\x01a\"\0V[` \x82\x01\x81\x03\x82R\x03\x82a\x02\x04V[a\"\x8CV[V[a\"\x9F\x90a\"\x9A`\x01a\"\xD3V[a\"\xF3V[V[jconsole.log\x90V[_\x80\x91a\"\xBC\x81a!\x88V[\x90` a\"\xC7a\"\xA1V[\x91\x01\x90Z\xFAPV[_\x90V[a\"\xDBa\"\xCFV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\"\xDFWa#\x03\x90a\"\xB0V[V\xFE\xA2dipfsX\"\x12 \xCC\xB6\x087\xC5\r\xF4\xD6'\xD2@r\xC5\x03\xEE\xE5\xE4\r\x06\xA6/\xC4\xEEyj\xBA\xAF\xAA% \x90\x9BdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct Call { address target; uint256 value; bytes data; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call> for UnderlyingRustTuple<'_> {
            fn from(value: Call) -> Self {
                (value.target, value.value, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    value: tuple.1,
                    data: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call {
            const NAME: &'static str = "Call";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call(address target,uint256 value,bytes data)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Swap { uint8 swapType; address tokenOut; uint24 feeTier; bool stable; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Swap {
        pub swapType: u8,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
        pub stable: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Swap> for UnderlyingRustTuple<'_> {
            fn from(value: Swap) -> Self {
                (value.swapType, value.tokenOut, value.feeTier, value.stable)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Swap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    swapType: tuple.0,
                    tokenOut: tuple.1,
                    feeTier: tuple.2,
                    stable: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Swap {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Swap {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.swapType),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Swap {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Swap {
            const NAME: &'static str = "Swap";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Swap(uint8 swapType,address tokenOut,uint24 feeTier,bool stable)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swapType)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feeTier)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Swap {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.swapType,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeTier,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swapType,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeTier,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct SwapData { address tokenIn; uint256 amountIn; Swap[] swaps; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapData {
        pub tokenIn: alloy::sol_types::private::Address,
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub swaps: alloy::sol_types::private::Vec<
            <Swap as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<Swap>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<<Swap as alloy::sol_types::SolType>::RustType>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapData> for UnderlyingRustTuple<'_> {
            fn from(value: SwapData) -> Self {
                (value.tokenIn, value.amountIn, value.swaps)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenIn: tuple.0,
                    amountIn: tuple.1,
                    swaps: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::tokenize(&self.swaps),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapData {
            const NAME: &'static str = "SwapData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapData(address tokenIn,uint256 amountIn,Swap[] swaps)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Swap as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Swap as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountIn)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swaps)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountIn,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.swaps)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountIn,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    Swap,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swaps,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
        pub _uniswapV3Router: alloy::sol_types::private::Address,
        pub _uniswapV2Router: alloy::sol_types::private::Address,
        pub _aerodromeRouter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._owner,
                        value._uniswapV3Router,
                        value._uniswapV2Router,
                        value._aerodromeRouter,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _uniswapV3Router: tuple.1,
                        _uniswapV2Router: tuple.2,
                        _aerodromeRouter: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._aerodromeRouter,
                    ),
                )
            }
        }
    };
    /**Function with signature `AGGREGATION_ROUTER_V5()` and selector `0xb11de7e3`.
```solidity
function AGGREGATION_ROUTER_V5() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Call {}
    ///Container type for the return parameters of the [`AGGREGATION_ROUTER_V5()`](AGGREGATION_ROUTER_V5Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATION_ROUTER_V5Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AGGREGATION_ROUTER_V5Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATION_ROUTER_V5()";
            const SELECTOR: [u8; 4] = [177u8, 29u8, 231u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_TIERS(uint256)` and selector `0x6b1b9b20`.
```solidity
function FEE_TIERS(uint256) external view returns (uint24);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`FEE_TIERS(uint256)`](FEE_TIERSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_TIERSCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_TIERSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_TIERS(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 27u8, 155u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall((address,uint256,bytes)[])` and selector `0x1749e1e3`.
```solidity
function multicall(Call[] memory calls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`multicall((address,uint256,bytes)[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall((address,uint256,bytes)[])";
            const SELECTOR: [u8; 4] = [23u8, 73u8, 225u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swap((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0x8231ab0b`.
```solidity
function swap(SwapData memory data) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub data: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swap((address,uint256,(uint8,address,uint24,bool)[]))`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [130u8, 49u8, 171u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.data),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAerodrome(uint256,address,address,bool)` and selector `0x886cdc9c`.
```solidity
function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeCall {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub stable: bool,
    }
    ///Container type for the return parameters of the [`swapAerodrome(uint256,address,address,bool)`](swapAerodromeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeCall) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.stable)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        stable: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAerodromeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAerodromeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAerodrome(uint256,address,address,bool)";
            const SELECTOR: [u8; 4] = [136u8, 108u8, 220u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAll((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0xd1855626`.
```solidity
function swapAll(SwapData memory swapData) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllCall {
        pub swapData: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swapAll((address,uint256,(uint8,address,uint24,bool)[]))`](swapAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllCall) -> Self {
                    (value.swapData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAllCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAll((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [209u8, 133u8, 86u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.swapData),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV2(uint256,address,address)` and selector `0xf1a52592`.
```solidity
function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`swapUniswapV2(uint256,address,address)`](swapUniswapV2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV2(uint256,address,address)";
            const SELECTOR: [u8; 4] = [241u8, 165u8, 37u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV3(uint256,address,address,uint24)` and selector `0x0748b19b`.
```solidity
function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
    }
    ///Container type for the return parameters of the [`swapUniswapV3(uint256,address,address,uint24)`](swapUniswapV3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.feeTier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        feeTier: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV3(uint256,address,address,uint24)";
            const SELECTOR: [u8; 4] = [7u8, 72u8, 177u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AtomicExecutor`](self) function calls.
    pub enum AtomicExecutorCalls {
        AGGREGATION_ROUTER_V5(AGGREGATION_ROUTER_V5Call),
        FEE_TIERS(FEE_TIERSCall),
        multicall(multicallCall),
        swap(swapCall),
        swapAerodrome(swapAerodromeCall),
        swapAll(swapAllCall),
        swapUniswapV2(swapUniswapV2Call),
        swapUniswapV3(swapUniswapV3Call),
    }
    #[automatically_derived]
    impl AtomicExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 72u8, 177u8, 155u8],
            [23u8, 73u8, 225u8, 227u8],
            [107u8, 27u8, 155u8, 32u8],
            [130u8, 49u8, 171u8, 11u8],
            [136u8, 108u8, 220u8, 156u8],
            [177u8, 29u8, 231u8, 227u8],
            [209u8, 133u8, 86u8, 38u8],
            [241u8, 165u8, 37u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AtomicExecutorCalls {
        const NAME: &'static str = "AtomicExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATION_ROUTER_V5(_) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_TIERS(_) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapAerodrome(_) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapAll(_) => <swapAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapUniswapV2(_) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV3(_) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AtomicExecutorCalls>] = &[
                {
                    fn swapUniswapV3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapUniswapV3)
                    }
                    swapUniswapV3
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::multicall)
                    }
                    multicall
                },
                {
                    fn FEE_TIERS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::FEE_TIERS)
                    }
                    FEE_TIERS
                },
                {
                    fn swap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swap)
                    }
                    swap
                },
                {
                    fn swapAerodrome(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapAerodromeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapAerodrome)
                    }
                    swapAerodrome
                },
                {
                    fn AGGREGATION_ROUTER_V5(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::AGGREGATION_ROUTER_V5)
                    }
                    AGGREGATION_ROUTER_V5
                },
                {
                    fn swapAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapAll)
                    }
                    swapAll
                },
                {
                    fn swapUniswapV2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AtomicExecutorCalls> {
                        <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AtomicExecutorCalls::swapUniswapV2)
                    }
                    swapUniswapV2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AtomicExecutor`](self) contract instance.

See the [wrapper's documentation](`AtomicExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AtomicExecutorInstance<T, P, N> {
        AtomicExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AtomicExecutorInstance<T, P, N>>,
    > {
        AtomicExecutorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _owner, _uniswapV3Router, _uniswapV2Router, _aerodromeRouter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AtomicExecutorInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _owner,
            _uniswapV3Router,
            _uniswapV2Router,
            _aerodromeRouter,
        )
    }
    /**A [`AtomicExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AtomicExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AtomicExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AtomicExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AtomicExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AtomicExecutor`](self) contract instance.

See the [wrapper's documentation](`AtomicExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AtomicExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _owner,
                _uniswapV3Router,
                _uniswapV2Router,
                _aerodromeRouter,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _owner,
                            _uniswapV3Router,
                            _uniswapV2Router,
                            _aerodromeRouter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AtomicExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AtomicExecutorInstance<T, P, N> {
            AtomicExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATION_ROUTER_V5`] function.
        pub fn AGGREGATION_ROUTER_V5(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AGGREGATION_ROUTER_V5Call, N> {
            self.call_builder(&AGGREGATION_ROUTER_V5Call {})
        }
        ///Creates a new call builder for the [`FEE_TIERS`] function.
        pub fn FEE_TIERS(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_TIERSCall, N> {
            self.call_builder(&FEE_TIERSCall { _0 })
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { calls })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            data: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall { data })
        }
        ///Creates a new call builder for the [`swapAerodrome`] function.
        pub fn swapAerodrome(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            stable: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAerodromeCall, N> {
            self.call_builder(
                &swapAerodromeCall {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    stable,
                },
            )
        }
        ///Creates a new call builder for the [`swapAll`] function.
        pub fn swapAll(
            &self,
            swapData: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAllCall, N> {
            self.call_builder(&swapAllCall { swapData })
        }
        ///Creates a new call builder for the [`swapUniswapV2`] function.
        pub fn swapUniswapV2(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV2Call, N> {
            self.call_builder(
                &swapUniswapV2Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV3`] function.
        pub fn swapUniswapV3(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            feeTier: alloy::sol_types::private::primitives::aliases::U24,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV3Call, N> {
            self.call_builder(
                &swapUniswapV3Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    feeTier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AtomicExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
