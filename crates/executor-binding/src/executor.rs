/**

Generated by the following Solidity interface...
```solidity
interface Executor {
    struct Swap {
        uint8 swapType;
        address tokenOut;
        uint24 feeTier;
        bool stable;
    }
    struct SwapData {
        address tokenIn;
        uint256 amountIn;
        Swap[] swaps;
    }

    constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);

    function AGGREGATION_ROUTER_V5() external view returns (address);
    function FEE_TIERS(uint256) external view returns (uint24);
    function multicall(bytes[] memory data) external payable;
    function swap(SwapData memory data) external returns (uint256);
    function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
    function swapAll(bytes memory swapData) external returns (uint256);
    function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
    function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_aerodromeRouter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AGGREGATION_ROUTER_V5",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_TIERS",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct Executor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct Executor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAerodrome",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "stable",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAll",
    "inputs": [
      {
        "name": "swapData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV2",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV3",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeTier",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Executor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101006040526040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff16815250600090600461004d929190610155565b5034801561005a57600080fd5b506040516129b63803806129b6833981810160405281019061007c9190610281565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506102e8565b82805482825590600052602060002090600901600a900481019282156101f05791602002820160005b838211156101bf57835183826101000a81548162ffffff021916908361ffff160217905550926020019260030160208160020104928301926001030261017e565b80156101ee5782816101000a81549062ffffff02191690556003016020816002010492830192600103026101bf565b505b5090506101fd9190610201565b5090565b5b8082111561021a576000816000905550600101610202565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024e82610223565b9050919050565b61025e81610243565b811461026957600080fd5b50565b60008151905061027b81610255565b92915050565b6000806000806080858703121561029b5761029a61021e565b5b60006102a98782880161026c565b94505060206102ba8782880161026c565b93505060406102cb8782880161026c565b92505060606102dc8782880161026c565b91505092959194509250565b60805160a05160c05160e051612680610336600039600081816108ab0152610a0e015260008181610d050152610d8a015260008181610255015261037001526000610afb01526126806000f3fe60806040526004361061007b5760003560e01c8063ac9650d81161004e578063ac9650d814610174578063b11de7e314610190578063f1a52592146101bb578063f32551c3146101f85761007b565b80630748b19b146100805780636b1b9b20146100bd5780638231ab0b146100fa578063886cdc9c14610137575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061155f565b610235565b6040516100b491906115d5565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df91906115f0565b610419565b6040516100f1919061162c565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c919061166b565b610452565b60405161012e91906115d5565b60405180910390f35b34801561014357600080fd5b5061015e600480360381019061015991906116ec565b61088b565b60405161016b91906115d5565b60405180910390f35b61018e6004803603810190610189919061197f565b610af9565b005b34801561019c57600080fd5b506101a5610b5d565b6040516101b291906119d7565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd91906119f2565b610b75565b6040516101ef91906115d5565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a9190611aa0565b610e74565b60405161022c91906115d5565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610292929190611aed565b6020604051808303816000875af11580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190611b2b565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103c79190611c22565b6020604051808303816000875af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190611c52565b90508092505050949350505050565b6000818154811061042957600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008160000160208101906104679190611c7f565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b81526004016104a793929190611cac565b6020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190611b2b565b5060008260200135905060008360000160208101906105099190611c7f565b90506000805b85806040019061051f9190611cf2565b905081101561080057600186806040019061053a9190611cf2565b8381811061054b5761054a611d55565b5b90506080020160000160208101906105639190611dbd565b60ff16036105ee576105e784848880604001906105809190611cf2565b8581811061059157610590611d55565b5b90506080020160200160208101906105a99190611c7f565b8980604001906105b99190611cf2565b868181106105ca576105c9611d55565b5b90506080020160400160208101906105e29190611dea565b610235565b915061073f565b60008680604001906106009190611cf2565b8381811061061157610610611d55565b5b90506080020160000160208101906106299190611dbd565b60ff160361067b5761067484848880604001906106469190611cf2565b8581811061065757610656611d55565b5b905060800201602001602081019061066f9190611c7f565b610b75565b915061073e565b600286806040019061068d9190611cf2565b8381811061069e5761069d611d55565b5b90506080020160000160208101906106b69190611dbd565b60ff160361073d5761073a84848880604001906106d39190611cf2565b858181106106e4576106e3611d55565b5b90506080020160200160208101906106fc9190611c7f565b89806040019061070c9190611cf2565b8681811061071d5761071c611d55565b5b90506080020160600160208101906107359190611e17565b61088b565b91505b5b5b8193508580604001906107529190611cf2565b8281811061076357610762611d55565b5b905060800201602001602081019061077b9190611c7f565b92506107f36040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086611247565b808060010191505061050f565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161083c929190611aed565b6020604051808303816000875af115801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611b2b565b50829350505050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016108e8929190611aed565b6020604051808303816000875af1158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190611b2b565b506000600167ffffffffffffffff81111561094957610948611769565b5b60405190808252806020026020018201604052801561098257816020015b61096f611406565b8152602001906001900390816109675790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250816000815181106109ff576109fe611d55565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c42610a5b9190611e73565b6040518663ffffffff1660e01b8152600401610a7b959493929190611fff565b6000604051808303816000875af1158015610a9a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ac3919061211c565b90508060018251610ad49190612165565b81518110610ae557610ae4611d55565b5b602002602001015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5157600080fd5b610b5a816112e9565b50565b731111111254eeb25477b68fb85ed929f73a96058281565b6000808403610bfb578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb791906119d7565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190611c52565b93505b6000600267ffffffffffffffff811115610c1857610c17611769565b5b604051908082528060200260200182016040528015610c465781602001602082028036833780820191505090505b5090508381600081518110610c5e57610c5d611d55565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110610cad57610cac611d55565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610d42929190611aed565b6020604051808303816000875af1158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190611b2b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c42610dd79190611e73565b6040518663ffffffff1660e01b8152600401610df7959493929190612283565b6000604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e3f919061211c565b90508060018251610e509190612165565b81518110610e6157610e60611d55565b5b6020026020010151925050509392505050565b6000808383810190610e8691906124a2565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084602001516040518463ffffffff1660e01b8152600401610ecd93929190611cac565b6020604051808303816000875af1158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f109190611b2b565b5060008160200151905060008260000151905060005b8360400151518110156111bb57600184604001518281518110610f4c57610f4b611d55565b5b60200260200101516000015160ff1603610fb657610fb0838386604001518481518110610f7c57610f7b611d55565b5b60200260200101516020015187604001518581518110610f9f57610f9e611d55565b5b602002602001015160400151610235565b50611097565b600084604001518281518110610fcf57610fce611d55565b5b60200260200101516000015160ff160361101657611010838386604001518481518110610fff57610ffe611d55565b5b602002602001015160200151610b75565b50611096565b60028460400151828151811061102f5761102e611d55565b5b60200260200101516000015160ff16036110955761109383838660400151848151811061105f5761105e611d55565b5b6020026020010151602001518760400151858151811061108257611081611d55565b5b60200260200101516060015161088b565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110d091906119d7565b602060405180830381865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190611c52565b92508360400151818151811061112a57611129611d55565b5b60200260200101516020015191506111ae6040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525085611247565b8080600101915050610f26565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016111f7929190611aed565b6020604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a9190611b2b565b5081935050505092915050565b6112e384848484604051602401611261949392919061256a565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061139e565b50505050565b60005b815181101561139a576000803073ffffffffffffffffffffffffffffffffffffffff1684848151811061132257611321611d55565b5b60200260200101516040516113379190612604565b6000604051808303816000865af19150503d8060008114611374576040519150601f19603f3d011682016040523d82523d6000602084013e611379565b606091505b50915091508161138d5761138c816113b8565b5b50508060010190506112ec565b5050565b6113b5816113ad6113d26113fb565b63ffffffff16565b50565b600081519050600081116113cb57600080fd5b8082602001fd5b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b611472819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61147a61261b565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6114a381611490565b81146114ae57600080fd5b50565b6000813590506114c08161149a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114f1826114c6565b9050919050565b611501816114e6565b811461150c57600080fd5b50565b60008135905061151e816114f8565b92915050565b600062ffffff82169050919050565b61153c81611524565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b6000806000806080858703121561157957611578611486565b5b6000611587878288016114b1565b94505060206115988782880161150f565b93505060406115a98782880161150f565b92505060606115ba8782880161154a565b91505092959194509250565b6115cf81611490565b82525050565b60006020820190506115ea60008301846115c6565b92915050565b60006020828403121561160657611605611486565b5b6000611614848285016114b1565b91505092915050565b61162681611524565b82525050565b6000602082019050611641600083018461161d565b92915050565b600080fd5b60006060828403121561166257611661611647565b5b81905092915050565b60006020828403121561168157611680611486565b5b600082013567ffffffffffffffff81111561169f5761169e61148b565b5b6116ab8482850161164c565b91505092915050565b60008115159050919050565b6116c9816116b4565b81146116d457600080fd5b50565b6000813590506116e6816116c0565b92915050565b6000806000806080858703121561170657611705611486565b5b6000611714878288016114b1565b94505060206117258782880161150f565b93505060406117368782880161150f565b9250506060611747878288016116d7565b91505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117a182611758565b810181811067ffffffffffffffff821117156117c0576117bf611769565b5b80604052505050565b60006117d361147c565b90506117df8282611798565b919050565b600067ffffffffffffffff8211156117ff576117fe611769565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561183557611834611769565b5b61183e82611758565b9050602081019050919050565b82818337600083830152505050565b600061186d6118688461181a565b6117c9565b90508281526020810184848401111561188957611888611815565b5b61189484828561184b565b509392505050565b600082601f8301126118b1576118b0611753565b5b81356118c184826020860161185a565b91505092915050565b60006118dd6118d8846117e4565b6117c9565b90508083825260208201905060208402830185811115611900576118ff611810565b5b835b8181101561194757803567ffffffffffffffff81111561192557611924611753565b5b808601611932898261189c565b85526020850194505050602081019050611902565b5050509392505050565b600082601f83011261196657611965611753565b5b81356119768482602086016118ca565b91505092915050565b60006020828403121561199557611994611486565b5b600082013567ffffffffffffffff8111156119b3576119b261148b565b5b6119bf84828501611951565b91505092915050565b6119d1816114e6565b82525050565b60006020820190506119ec60008301846119c8565b92915050565b600080600060608486031215611a0b57611a0a611486565b5b6000611a19868287016114b1565b9350506020611a2a8682870161150f565b9250506040611a3b8682870161150f565b9150509250925092565b600080fd5b60008083601f840112611a6057611a5f611753565b5b8235905067ffffffffffffffff811115611a7d57611a7c611a45565b5b602083019150836001820283011115611a9957611a98611810565b5b9250929050565b60008060208385031215611ab757611ab6611486565b5b600083013567ffffffffffffffff811115611ad557611ad461148b565b5b611ae185828601611a4a565b92509250509250929050565b6000604082019050611b0260008301856119c8565b611b0f60208301846115c6565b9392505050565b600081519050611b25816116c0565b92915050565b600060208284031215611b4157611b40611486565b5b6000611b4f84828501611b16565b91505092915050565b611b61816114e6565b82525050565b611b7081611524565b82525050565b611b7f81611490565b82525050565b611b8e816114c6565b82525050565b60e082016000820151611baa6000850182611b58565b506020820151611bbd6020850182611b58565b506040820151611bd06040850182611b67565b506060820151611be36060850182611b58565b506080820151611bf66080850182611b76565b5060a0820151611c0960a0850182611b76565b5060c0820151611c1c60c0850182611b85565b50505050565b600060e082019050611c376000830184611b94565b92915050565b600081519050611c4c8161149a565b92915050565b600060208284031215611c6857611c67611486565b5b6000611c7684828501611c3d565b91505092915050565b600060208284031215611c9557611c94611486565b5b6000611ca38482850161150f565b91505092915050565b6000606082019050611cc160008301866119c8565b611cce60208301856119c8565b611cdb60408301846115c6565b949350505050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611d0f57611d0e611ce3565b5b80840192508235915067ffffffffffffffff821115611d3157611d30611ce8565b5b602083019250608082023603831315611d4d57611d4c611ced565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b611d9a81611d84565b8114611da557600080fd5b50565b600081359050611db781611d91565b92915050565b600060208284031215611dd357611dd2611486565b5b6000611de184828501611da8565b91505092915050565b600060208284031215611e0057611dff611486565b5b6000611e0e8482850161154a565b91505092915050565b600060208284031215611e2d57611e2c611486565b5b6000611e3b848285016116d7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e7e82611490565b9150611e8983611490565b9250828201905080821115611ea157611ea0611e44565b5b92915050565b6000819050919050565b6000819050919050565b6000611ed6611ed1611ecc84611ea7565b611eb1565b611490565b9050919050565b611ee681611ebb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f21816116b4565b82525050565b608082016000820151611f3d6000850182611b58565b506020820151611f506020850182611b58565b506040820151611f636040850182611f18565b506060820151611f766060850182611b58565b50505050565b6000611f888383611f27565b60808301905092915050565b6000602082019050919050565b6000611fac82611eec565b611fb68185611ef7565b9350611fc183611f08565b8060005b83811015611ff2578151611fd98882611f7c565b9750611fe483611f94565b925050600181019050611fc5565b5085935050505092915050565b600060a08201905061201460008301886115c6565b6120216020830187611edd565b81810360408301526120338186611fa1565b905061204260608301856119c8565b61204f60808301846115c6565b9695505050505050565b600067ffffffffffffffff82111561207457612073611769565b5b602082029050602081019050919050565b600061209861209384612059565b6117c9565b905080838252602082019050602084028301858111156120bb576120ba611810565b5b835b818110156120e457806120d08882611c3d565b8452602084019350506020810190506120bd565b5050509392505050565b600082601f83011261210357612102611753565b5b8151612113848260208601612085565b91505092915050565b60006020828403121561213257612131611486565b5b600082015167ffffffffffffffff8111156121505761214f61148b565b5b61215c848285016120ee565b91505092915050565b600061217082611490565b915061217b83611490565b925082820390508181111561219357612192611e44565b5b92915050565b6000819050919050565b60006121be6121b96121b484612199565b611eb1565b611490565b9050919050565b6121ce816121a3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061220c8383611b58565b60208301905092915050565b6000602082019050919050565b6000612230826121d4565b61223a81856121df565b9350612245836121f0565b8060005b8381101561227657815161225d8882612200565b975061226883612218565b925050600181019050612249565b5085935050505092915050565b600060a08201905061229860008301886115c6565b6122a560208301876121c5565b81810360408301526122b78186612225565b90506122c660608301856119c8565b6122d360808301846115c6565b9695505050505050565b600080fd5b600080fd5b600067ffffffffffffffff82111561230257612301611769565b5b602082029050602081019050919050565b600060808284031215612329576123286122dd565b5b61233360806117c9565b9050600061234384828501611da8565b60008301525060206123578482850161150f565b602083015250604061236b8482850161154a565b604083015250606061237f848285016116d7565b60608301525092915050565b600061239e612399846122e7565b6117c9565b905080838252602082019050608084028301858111156123c1576123c0611810565b5b835b818110156123ea57806123d68882612313565b8452602084019350506080810190506123c3565b5050509392505050565b600082601f83011261240957612408611753565b5b813561241984826020860161238b565b91505092915050565b600060608284031215612438576124376122dd565b5b61244260606117c9565b905060006124528482850161150f565b6000830152506020612466848285016114b1565b602083015250604082013567ffffffffffffffff81111561248a576124896122e2565b5b612496848285016123f4565b60408301525092915050565b6000602082840312156124b8576124b7611486565b5b600082013567ffffffffffffffff8111156124d6576124d561148b565b5b6124e284828501612422565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561252557808201518184015260208101905061250a565b60008484015250505050565b600061253c826124eb565b61254681856124f6565b9350612556818560208601612507565b61255f81611758565b840191505092915050565b600060808201905081810360008301526125848187612531565b905061259360208301866115c6565b81810360408301526125a58185612531565b90506125b460608301846119c8565b95945050505050565b600081519050919050565b600081905092915050565b60006125de826125bd565b6125e881856125c8565b93506125f8818560208601612507565b80840191505092915050565b600061261082846125d3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122018a7a7b6def7967e57ac3d584e4a66669d274ffd9b75ac6e82fc9ef3d253f98f64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R`@Q\x80`\x80\x01`@R\x80`da\xFF\xFF\x16\x81R` \x01a\x01\xF4a\xFF\xFF\x16\x81R` \x01a\x0B\xB8a\xFF\xFF\x16\x81R` \x01a'\x10a\xFF\xFF\x16\x81RP`\0\x90`\x04a\0M\x92\x91\x90a\x01UV[P4\x80\x15a\0ZW`\0\x80\xFD[P`@Qa)\xB68\x03\x80a)\xB6\x839\x81\x81\x01`@R\x81\x01\x90a\0|\x91\x90a\x02\x81V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPPPPa\x02\xE8V[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90`\t\x01`\n\x90\x04\x81\x01\x92\x82\x15a\x01\xF0W\x91` \x02\x82\x01`\0[\x83\x82\x11\x15a\x01\xBFW\x83Q\x83\x82a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83a\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01~V[\x80\x15a\x01\xEEW\x82\x81a\x01\0\n\x81T\x90b\xFF\xFF\xFF\x02\x19\x16\x90U`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01\xBFV[P[P\x90Pa\x01\xFD\x91\x90a\x02\x01V[P\x90V[[\x80\x82\x11\x15a\x02\x1AW`\0\x81`\0\x90UP`\x01\x01a\x02\x02V[P\x90V[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x02N\x82a\x02#V[\x90P\x91\x90PV[a\x02^\x81a\x02CV[\x81\x14a\x02iW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x02{\x81a\x02UV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x02\x9BWa\x02\x9Aa\x02\x1EV[[`\0a\x02\xA9\x87\x82\x88\x01a\x02lV[\x94PP` a\x02\xBA\x87\x82\x88\x01a\x02lV[\x93PP`@a\x02\xCB\x87\x82\x88\x01a\x02lV[\x92PP``a\x02\xDC\x87\x82\x88\x01a\x02lV[\x91PP\x92\x95\x91\x94P\x92PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa&\x80a\x036`\09`\0\x81\x81a\x08\xAB\x01Ra\n\x0E\x01R`\0\x81\x81a\r\x05\x01Ra\r\x8A\x01R`\0\x81\x81a\x02U\x01Ra\x03p\x01R`\0a\n\xFB\x01Ra&\x80`\0\xF3\xFE`\x80`@R`\x046\x10a\0{W`\x005`\xE0\x1C\x80c\xAC\x96P\xD8\x11a\0NW\x80c\xAC\x96P\xD8\x14a\x01tW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x90W\x80c\xF1\xA5%\x92\x14a\x01\xBBW\x80c\xF3%Q\xC3\x14a\x01\xF8Wa\0{V[\x80c\x07H\xB1\x9B\x14a\0\x80W\x80ck\x1B\x9B \x14a\0\xBDW\x80c\x821\xAB\x0B\x14a\0\xFAW\x80c\x88l\xDC\x9C\x14a\x017W[`\0\x80\xFD[4\x80\x15a\0\x8CW`\0\x80\xFD[Pa\0\xA7`\x04\x806\x03\x81\x01\x90a\0\xA2\x91\x90a\x15_V[a\x025V[`@Qa\0\xB4\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC9W`\0\x80\xFD[Pa\0\xE4`\x04\x806\x03\x81\x01\x90a\0\xDF\x91\x90a\x15\xF0V[a\x04\x19V[`@Qa\0\xF1\x91\x90a\x16,V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x06W`\0\x80\xFD[Pa\x01!`\x04\x806\x03\x81\x01\x90a\x01\x1C\x91\x90a\x16kV[a\x04RV[`@Qa\x01.\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01CW`\0\x80\xFD[Pa\x01^`\x04\x806\x03\x81\x01\x90a\x01Y\x91\x90a\x16\xECV[a\x08\x8BV[`@Qa\x01k\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[a\x01\x8E`\x04\x806\x03\x81\x01\x90a\x01\x89\x91\x90a\x19\x7FV[a\n\xF9V[\0[4\x80\x15a\x01\x9CW`\0\x80\xFD[Pa\x01\xA5a\x0B]V[`@Qa\x01\xB2\x91\x90a\x19\xD7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xC7W`\0\x80\xFD[Pa\x01\xE2`\x04\x806\x03\x81\x01\x90a\x01\xDD\x91\x90a\x19\xF2V[a\x0BuV[`@Qa\x01\xEF\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x04W`\0\x80\xFD[Pa\x02\x1F`\x04\x806\x03\x81\x01\x90a\x02\x1A\x91\x90a\x1A\xA0V[a\x0EtV[`@Qa\x02,\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x92\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02\xB1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xD5\x91\x90a\x1B+V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xC7\x91\x90a\x1C\"V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xE6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\n\x91\x90a\x1CRV[\x90P\x80\x92PPP\x94\x93PPPPV[`\0\x81\x81T\x81\x10a\x04)W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x04g\x91\x90a\x1C\x7FV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xA7\x93\x92\x91\x90a\x1C\xACV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04\xC6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xEA\x91\x90a\x1B+V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\x05\t\x91\x90a\x1C\x7FV[\x90P`\0\x80[\x85\x80`@\x01\x90a\x05\x1F\x91\x90a\x1C\xF2V[\x90P\x81\x10\x15a\x08\0W`\x01\x86\x80`@\x01\x90a\x05:\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x05KWa\x05Ja\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x05c\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x05\xEEWa\x05\xE7\x84\x84\x88\x80`@\x01\x90a\x05\x80\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x05\x91Wa\x05\x90a\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x05\xA9\x91\x90a\x1C\x7FV[\x89\x80`@\x01\x90a\x05\xB9\x91\x90a\x1C\xF2V[\x86\x81\x81\x10a\x05\xCAWa\x05\xC9a\x1DUV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x05\xE2\x91\x90a\x1D\xEAV[a\x025V[\x91Pa\x07?V[`\0\x86\x80`@\x01\x90a\x06\0\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x06\x11Wa\x06\x10a\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06)\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x06{Wa\x06t\x84\x84\x88\x80`@\x01\x90a\x06F\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x06WWa\x06Va\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06o\x91\x90a\x1C\x7FV[a\x0BuV[\x91Pa\x07>V[`\x02\x86\x80`@\x01\x90a\x06\x8D\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x06\x9EWa\x06\x9Da\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06\xB6\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x07=Wa\x07:\x84\x84\x88\x80`@\x01\x90a\x06\xD3\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x06\xE4Wa\x06\xE3a\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06\xFC\x91\x90a\x1C\x7FV[\x89\x80`@\x01\x90a\x07\x0C\x91\x90a\x1C\xF2V[\x86\x81\x81\x10a\x07\x1DWa\x07\x1Ca\x1DUV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x075\x91\x90a\x1E\x17V[a\x08\x8BV[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x07R\x91\x90a\x1C\xF2V[\x82\x81\x81\x10a\x07cWa\x07ba\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07{\x91\x90a\x1C\x7FV[\x92Pa\x07\xF3`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x12GV[\x80\x80`\x01\x01\x91PPa\x05\x0FV[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08<\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08[W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x7F\x91\x90a\x1B+V[P\x82\x93PPPP\x91\x90PV[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\xE8\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\x07W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t+\x91\x90a\x1B+V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tIWa\tHa\x17iV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\t\x82W\x81` \x01[a\toa\x14\x06V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\tgW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\t\xFFWa\t\xFEa\x1DUV[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\n[\x91\x90a\x1EsV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n{\x95\x94\x93\x92\x91\x90a\x1F\xFFV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\n\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xC3\x91\x90a!\x1CV[\x90P\x80`\x01\x82Qa\n\xD4\x91\x90a!eV[\x81Q\x81\x10a\n\xE5Wa\n\xE4a\x1DUV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0BQW`\0\x80\xFD[a\x0BZ\x81a\x12\xE9V[PV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x80\x84\x03a\x0B\xFBW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\xB7\x91\x90a\x19\xD7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B\xD4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xF8\x91\x90a\x1CRV[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\x18Wa\x0C\x17a\x17iV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0CFW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x0C^Wa\x0C]a\x1DUV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x0C\xADWa\x0C\xACa\x1DUV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\rB\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\raW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x85\x91\x90a\x1B+V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\r\xD7\x91\x90a\x1EsV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\xF7\x95\x94\x93\x92\x91\x90a\"\x83V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\x16W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E?\x91\x90a!\x1CV[\x90P\x80`\x01\x82Qa\x0EP\x91\x90a!eV[\x81Q\x81\x10a\x0EaWa\x0E`a\x1DUV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[`\0\x80\x83\x83\x81\x01\x90a\x0E\x86\x91\x90a$\xA2V[\x90P\x80`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x84` \x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\xCD\x93\x92\x91\x90a\x1C\xACV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\xECW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\x10\x91\x90a\x1B+V[P`\0\x81` \x01Q\x90P`\0\x82`\0\x01Q\x90P`\0[\x83`@\x01QQ\x81\x10\x15a\x11\xBBW`\x01\x84`@\x01Q\x82\x81Q\x81\x10a\x0FLWa\x0FKa\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x0F\xB6Wa\x0F\xB0\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x0F|Wa\x0F{a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x87`@\x01Q\x85\x81Q\x81\x10a\x0F\x9FWa\x0F\x9Ea\x1DUV[[` \x02` \x01\x01Q`@\x01Qa\x025V[Pa\x10\x97V[`\0\x84`@\x01Q\x82\x81Q\x81\x10a\x0F\xCFWa\x0F\xCEa\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x10\x16Wa\x10\x10\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x0F\xFFWa\x0F\xFEa\x1DUV[[` \x02` \x01\x01Q` \x01Qa\x0BuV[Pa\x10\x96V[`\x02\x84`@\x01Q\x82\x81Q\x81\x10a\x10/Wa\x10.a\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x10\x95Wa\x10\x93\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x10_Wa\x10^a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x87`@\x01Q\x85\x81Q\x81\x10a\x10\x82Wa\x10\x81a\x1DUV[[` \x02` \x01\x01Q``\x01Qa\x08\x8BV[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10\xD0\x91\x90a\x19\xD7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xEDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x11\x91\x90a\x1CRV[\x92P\x83`@\x01Q\x81\x81Q\x81\x10a\x11*Wa\x11)a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x91Pa\x11\xAE`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x12GV[\x80\x80`\x01\x01\x91PPa\x0F&V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\xF7\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x12\x16W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12:\x91\x90a\x1B+V[P\x81\x93PPPP\x92\x91PPV[a\x12\xE3\x84\x84\x84\x84`@Q`$\x01a\x12a\x94\x93\x92\x91\x90a%jV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x13\x9EV[PPPPV[`\0[\x81Q\x81\x10\x15a\x13\x9AW`\0\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x13\"Wa\x13!a\x1DUV[[` \x02` \x01\x01Q`@Qa\x137\x91\x90a&\x04V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x13tW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x13yV[``\x91P[P\x91P\x91P\x81a\x13\x8DWa\x13\x8C\x81a\x13\xB8V[[PP\x80`\x01\x01\x90Pa\x12\xECV[PPV[a\x13\xB5\x81a\x13\xADa\x13\xD2a\x13\xFBV[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0\x81\x11a\x13\xCBW`\0\x80\xFD[\x80\x82` \x01\xFD[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x14r\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x14za&\x1BV[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x14\xA3\x81a\x14\x90V[\x81\x14a\x14\xAEW`\0\x80\xFD[PV[`\0\x815\x90Pa\x14\xC0\x81a\x14\x9AV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x14\xF1\x82a\x14\xC6V[\x90P\x91\x90PV[a\x15\x01\x81a\x14\xE6V[\x81\x14a\x15\x0CW`\0\x80\xFD[PV[`\0\x815\x90Pa\x15\x1E\x81a\x14\xF8V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x15<\x81a\x15$V[\x81\x14a\x15GW`\0\x80\xFD[PV[`\0\x815\x90Pa\x15Y\x81a\x153V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x15yWa\x15xa\x14\x86V[[`\0a\x15\x87\x87\x82\x88\x01a\x14\xB1V[\x94PP` a\x15\x98\x87\x82\x88\x01a\x15\x0FV[\x93PP`@a\x15\xA9\x87\x82\x88\x01a\x15\x0FV[\x92PP``a\x15\xBA\x87\x82\x88\x01a\x15JV[\x91PP\x92\x95\x91\x94P\x92PV[a\x15\xCF\x81a\x14\x90V[\x82RPPV[`\0` \x82\x01\x90Pa\x15\xEA`\0\x83\x01\x84a\x15\xC6V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x16\x06Wa\x16\x05a\x14\x86V[[`\0a\x16\x14\x84\x82\x85\x01a\x14\xB1V[\x91PP\x92\x91PPV[a\x16&\x81a\x15$V[\x82RPPV[`\0` \x82\x01\x90Pa\x16A`\0\x83\x01\x84a\x16\x1DV[\x92\x91PPV[`\0\x80\xFD[`\0``\x82\x84\x03\x12\x15a\x16bWa\x16aa\x16GV[[\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x16\x81Wa\x16\x80a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\x9FWa\x16\x9Ea\x14\x8BV[[a\x16\xAB\x84\x82\x85\x01a\x16LV[\x91PP\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x16\xC9\x81a\x16\xB4V[\x81\x14a\x16\xD4W`\0\x80\xFD[PV[`\0\x815\x90Pa\x16\xE6\x81a\x16\xC0V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x17\x06Wa\x17\x05a\x14\x86V[[`\0a\x17\x14\x87\x82\x88\x01a\x14\xB1V[\x94PP` a\x17%\x87\x82\x88\x01a\x15\x0FV[\x93PP`@a\x176\x87\x82\x88\x01a\x15\x0FV[\x92PP``a\x17G\x87\x82\x88\x01a\x16\xD7V[\x91PP\x92\x95\x91\x94P\x92PV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x17\xA1\x82a\x17XV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x17\xC0Wa\x17\xBFa\x17iV[[\x80`@RPPPV[`\0a\x17\xD3a\x14|V[\x90Pa\x17\xDF\x82\x82a\x17\x98V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xFFWa\x17\xFEa\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x185Wa\x184a\x17iV[[a\x18>\x82a\x17XV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x18ma\x18h\x84a\x18\x1AV[a\x17\xC9V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x18\x89Wa\x18\x88a\x18\x15V[[a\x18\x94\x84\x82\x85a\x18KV[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18\xB1Wa\x18\xB0a\x17SV[[\x815a\x18\xC1\x84\x82` \x86\x01a\x18ZV[\x91PP\x92\x91PPV[`\0a\x18\xDDa\x18\xD8\x84a\x17\xE4V[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x19\0Wa\x18\xFFa\x18\x10V[[\x83[\x81\x81\x10\x15a\x19GW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19%Wa\x19$a\x17SV[[\x80\x86\x01a\x192\x89\x82a\x18\x9CV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x19\x02V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x19fWa\x19ea\x17SV[[\x815a\x19v\x84\x82` \x86\x01a\x18\xCAV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x19\x95Wa\x19\x94a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xB3Wa\x19\xB2a\x14\x8BV[[a\x19\xBF\x84\x82\x85\x01a\x19QV[\x91PP\x92\x91PPV[a\x19\xD1\x81a\x14\xE6V[\x82RPPV[`\0` \x82\x01\x90Pa\x19\xEC`\0\x83\x01\x84a\x19\xC8V[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1A\x0BWa\x1A\na\x14\x86V[[`\0a\x1A\x19\x86\x82\x87\x01a\x14\xB1V[\x93PP` a\x1A*\x86\x82\x87\x01a\x15\x0FV[\x92PP`@a\x1A;\x86\x82\x87\x01a\x15\x0FV[\x91PP\x92P\x92P\x92V[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x1A`Wa\x1A_a\x17SV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A}Wa\x1A|a\x1AEV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x1A\x99Wa\x1A\x98a\x18\x10V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x1A\xB7Wa\x1A\xB6a\x14\x86V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xD5Wa\x1A\xD4a\x14\x8BV[[a\x1A\xE1\x85\x82\x86\x01a\x1AJV[\x92P\x92PP\x92P\x92\x90PV[`\0`@\x82\x01\x90Pa\x1B\x02`\0\x83\x01\x85a\x19\xC8V[a\x1B\x0F` \x83\x01\x84a\x15\xC6V[\x93\x92PPPV[`\0\x81Q\x90Pa\x1B%\x81a\x16\xC0V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1BAWa\x1B@a\x14\x86V[[`\0a\x1BO\x84\x82\x85\x01a\x1B\x16V[\x91PP\x92\x91PPV[a\x1Ba\x81a\x14\xE6V[\x82RPPV[a\x1Bp\x81a\x15$V[\x82RPPV[a\x1B\x7F\x81a\x14\x90V[\x82RPPV[a\x1B\x8E\x81a\x14\xC6V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x1B\xAA`\0\x85\x01\x82a\x1BXV[P` \x82\x01Qa\x1B\xBD` \x85\x01\x82a\x1BXV[P`@\x82\x01Qa\x1B\xD0`@\x85\x01\x82a\x1BgV[P``\x82\x01Qa\x1B\xE3``\x85\x01\x82a\x1BXV[P`\x80\x82\x01Qa\x1B\xF6`\x80\x85\x01\x82a\x1BvV[P`\xA0\x82\x01Qa\x1C\t`\xA0\x85\x01\x82a\x1BvV[P`\xC0\x82\x01Qa\x1C\x1C`\xC0\x85\x01\x82a\x1B\x85V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x1C7`\0\x83\x01\x84a\x1B\x94V[\x92\x91PPV[`\0\x81Q\x90Pa\x1CL\x81a\x14\x9AV[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1ChWa\x1Cga\x14\x86V[[`\0a\x1Cv\x84\x82\x85\x01a\x1C=V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C\x95Wa\x1C\x94a\x14\x86V[[`\0a\x1C\xA3\x84\x82\x85\x01a\x15\x0FV[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x1C\xC1`\0\x83\x01\x86a\x19\xC8V[a\x1C\xCE` \x83\x01\x85a\x19\xC8V[a\x1C\xDB`@\x83\x01\x84a\x15\xC6V[\x94\x93PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1D\x0FWa\x1D\x0Ea\x1C\xE3V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1D1Wa\x1D0a\x1C\xE8V[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1DMWa\x1DLa\x1C\xEDV[[P\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x1D\x9A\x81a\x1D\x84V[\x81\x14a\x1D\xA5W`\0\x80\xFD[PV[`\0\x815\x90Pa\x1D\xB7\x81a\x1D\x91V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1D\xD3Wa\x1D\xD2a\x14\x86V[[`\0a\x1D\xE1\x84\x82\x85\x01a\x1D\xA8V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1E\0Wa\x1D\xFFa\x14\x86V[[`\0a\x1E\x0E\x84\x82\x85\x01a\x15JV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1E-Wa\x1E,a\x14\x86V[[`\0a\x1E;\x84\x82\x85\x01a\x16\xD7V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x1E~\x82a\x14\x90V[\x91Pa\x1E\x89\x83a\x14\x90V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\xA1Wa\x1E\xA0a\x1EDV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x1E\xD6a\x1E\xD1a\x1E\xCC\x84a\x1E\xA7V[a\x1E\xB1V[a\x14\x90V[\x90P\x91\x90PV[a\x1E\xE6\x81a\x1E\xBBV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1F!\x81a\x16\xB4V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x1F=`\0\x85\x01\x82a\x1BXV[P` \x82\x01Qa\x1FP` \x85\x01\x82a\x1BXV[P`@\x82\x01Qa\x1Fc`@\x85\x01\x82a\x1F\x18V[P``\x82\x01Qa\x1Fv``\x85\x01\x82a\x1BXV[PPPPV[`\0a\x1F\x88\x83\x83a\x1F'V[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1F\xAC\x82a\x1E\xECV[a\x1F\xB6\x81\x85a\x1E\xF7V[\x93Pa\x1F\xC1\x83a\x1F\x08V[\x80`\0[\x83\x81\x10\x15a\x1F\xF2W\x81Qa\x1F\xD9\x88\x82a\x1F|V[\x97Pa\x1F\xE4\x83a\x1F\x94V[\x92PP`\x01\x81\x01\x90Pa\x1F\xC5V[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa \x14`\0\x83\x01\x88a\x15\xC6V[a !` \x83\x01\x87a\x1E\xDDV[\x81\x81\x03`@\x83\x01Ra 3\x81\x86a\x1F\xA1V[\x90Pa B``\x83\x01\x85a\x19\xC8V[a O`\x80\x83\x01\x84a\x15\xC6V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a tWa sa\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a \x98a \x93\x84a YV[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a \xBBWa \xBAa\x18\x10V[[\x83[\x81\x81\x10\x15a \xE4W\x80a \xD0\x88\x82a\x1C=V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa \xBDV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a!\x03Wa!\x02a\x17SV[[\x81Qa!\x13\x84\x82` \x86\x01a \x85V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a!2Wa!1a\x14\x86V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!PWa!Oa\x14\x8BV[[a!\\\x84\x82\x85\x01a \xEEV[\x91PP\x92\x91PPV[`\0a!p\x82a\x14\x90V[\x91Pa!{\x83a\x14\x90V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a!\x93Wa!\x92a\x1EDV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a!\xBEa!\xB9a!\xB4\x84a!\x99V[a\x1E\xB1V[a\x14\x90V[\x90P\x91\x90PV[a!\xCE\x81a!\xA3V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\"\x0C\x83\x83a\x1BXV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\"0\x82a!\xD4V[a\":\x81\x85a!\xDFV[\x93Pa\"E\x83a!\xF0V[\x80`\0[\x83\x81\x10\x15a\"vW\x81Qa\"]\x88\x82a\"\0V[\x97Pa\"h\x83a\"\x18V[\x92PP`\x01\x81\x01\x90Pa\"IV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\"\x98`\0\x83\x01\x88a\x15\xC6V[a\"\xA5` \x83\x01\x87a!\xC5V[\x81\x81\x03`@\x83\x01Ra\"\xB7\x81\x86a\"%V[\x90Pa\"\xC6``\x83\x01\x85a\x19\xC8V[a\"\xD3`\x80\x83\x01\x84a\x15\xC6V[\x96\x95PPPPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a#\x02Wa#\x01a\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0`\x80\x82\x84\x03\x12\x15a#)Wa#(a\"\xDDV[[a#3`\x80a\x17\xC9V[\x90P`\0a#C\x84\x82\x85\x01a\x1D\xA8V[`\0\x83\x01RP` a#W\x84\x82\x85\x01a\x15\x0FV[` \x83\x01RP`@a#k\x84\x82\x85\x01a\x15JV[`@\x83\x01RP``a#\x7F\x84\x82\x85\x01a\x16\xD7V[``\x83\x01RP\x92\x91PPV[`\0a#\x9Ea#\x99\x84a\"\xE7V[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P`\x80\x84\x02\x83\x01\x85\x81\x11\x15a#\xC1Wa#\xC0a\x18\x10V[[\x83[\x81\x81\x10\x15a#\xEAW\x80a#\xD6\x88\x82a#\x13V[\x84R` \x84\x01\x93PP`\x80\x81\x01\x90Pa#\xC3V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a$\tWa$\x08a\x17SV[[\x815a$\x19\x84\x82` \x86\x01a#\x8BV[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a$8Wa$7a\"\xDDV[[a$B``a\x17\xC9V[\x90P`\0a$R\x84\x82\x85\x01a\x15\x0FV[`\0\x83\x01RP` a$f\x84\x82\x85\x01a\x14\xB1V[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a$\x8AWa$\x89a\"\xE2V[[a$\x96\x84\x82\x85\x01a#\xF4V[`@\x83\x01RP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a$\xB8Wa$\xB7a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a$\xD6Wa$\xD5a\x14\x8BV[[a$\xE2\x84\x82\x85\x01a$\"V[\x91PP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a%%W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa%\nV[`\0\x84\x84\x01RPPPPV[`\0a%<\x82a$\xEBV[a%F\x81\x85a$\xF6V[\x93Pa%V\x81\x85` \x86\x01a%\x07V[a%_\x81a\x17XV[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra%\x84\x81\x87a%1V[\x90Pa%\x93` \x83\x01\x86a\x15\xC6V[\x81\x81\x03`@\x83\x01Ra%\xA5\x81\x85a%1V[\x90Pa%\xB4``\x83\x01\x84a\x19\xC8V[\x95\x94PPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0a%\xDE\x82a%\xBDV[a%\xE8\x81\x85a%\xC8V[\x93Pa%\xF8\x81\x85` \x86\x01a%\x07V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a&\x10\x82\x84a%\xD3V[\x91P\x81\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \x18\xA7\xA7\xB6\xDE\xF7\x96~W\xAC=XNJff\x9D'O\xFD\x9Bu\xACn\x82\xFC\x9E\xF3\xD2S\xF9\x8FdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061007b5760003560e01c8063ac9650d81161004e578063ac9650d814610174578063b11de7e314610190578063f1a52592146101bb578063f32551c3146101f85761007b565b80630748b19b146100805780636b1b9b20146100bd5780638231ab0b146100fa578063886cdc9c14610137575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061155f565b610235565b6040516100b491906115d5565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df91906115f0565b610419565b6040516100f1919061162c565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c919061166b565b610452565b60405161012e91906115d5565b60405180910390f35b34801561014357600080fd5b5061015e600480360381019061015991906116ec565b61088b565b60405161016b91906115d5565b60405180910390f35b61018e6004803603810190610189919061197f565b610af9565b005b34801561019c57600080fd5b506101a5610b5d565b6040516101b291906119d7565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd91906119f2565b610b75565b6040516101ef91906115d5565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a9190611aa0565b610e74565b60405161022c91906115d5565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610292929190611aed565b6020604051808303816000875af11580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190611b2b565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103c79190611c22565b6020604051808303816000875af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190611c52565b90508092505050949350505050565b6000818154811061042957600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008160000160208101906104679190611c7f565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b81526004016104a793929190611cac565b6020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190611b2b565b5060008260200135905060008360000160208101906105099190611c7f565b90506000805b85806040019061051f9190611cf2565b905081101561080057600186806040019061053a9190611cf2565b8381811061054b5761054a611d55565b5b90506080020160000160208101906105639190611dbd565b60ff16036105ee576105e784848880604001906105809190611cf2565b8581811061059157610590611d55565b5b90506080020160200160208101906105a99190611c7f565b8980604001906105b99190611cf2565b868181106105ca576105c9611d55565b5b90506080020160400160208101906105e29190611dea565b610235565b915061073f565b60008680604001906106009190611cf2565b8381811061061157610610611d55565b5b90506080020160000160208101906106299190611dbd565b60ff160361067b5761067484848880604001906106469190611cf2565b8581811061065757610656611d55565b5b905060800201602001602081019061066f9190611c7f565b610b75565b915061073e565b600286806040019061068d9190611cf2565b8381811061069e5761069d611d55565b5b90506080020160000160208101906106b69190611dbd565b60ff160361073d5761073a84848880604001906106d39190611cf2565b858181106106e4576106e3611d55565b5b90506080020160200160208101906106fc9190611c7f565b89806040019061070c9190611cf2565b8681811061071d5761071c611d55565b5b90506080020160600160208101906107359190611e17565b61088b565b91505b5b5b8193508580604001906107529190611cf2565b8281811061076357610762611d55565b5b905060800201602001602081019061077b9190611c7f565b92506107f36040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086611247565b808060010191505061050f565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161083c929190611aed565b6020604051808303816000875af115801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190611b2b565b50829350505050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016108e8929190611aed565b6020604051808303816000875af1158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b9190611b2b565b506000600167ffffffffffffffff81111561094957610948611769565b5b60405190808252806020026020018201604052801561098257816020015b61096f611406565b8152602001906001900390816109675790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250816000815181106109ff576109fe611d55565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c42610a5b9190611e73565b6040518663ffffffff1660e01b8152600401610a7b959493929190611fff565b6000604051808303816000875af1158015610a9a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ac3919061211c565b90508060018251610ad49190612165565b81518110610ae557610ae4611d55565b5b602002602001015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5157600080fd5b610b5a816112e9565b50565b731111111254eeb25477b68fb85ed929f73a96058281565b6000808403610bfb578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb791906119d7565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190611c52565b93505b6000600267ffffffffffffffff811115610c1857610c17611769565b5b604051908082528060200260200182016040528015610c465781602001602082028036833780820191505090505b5090508381600081518110610c5e57610c5d611d55565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110610cad57610cac611d55565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610d42929190611aed565b6020604051808303816000875af1158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190611b2b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c42610dd79190611e73565b6040518663ffffffff1660e01b8152600401610df7959493929190612283565b6000604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e3f919061211c565b90508060018251610e509190612165565b81518110610e6157610e60611d55565b5b6020026020010151925050509392505050565b6000808383810190610e8691906124a2565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084602001516040518463ffffffff1660e01b8152600401610ecd93929190611cac565b6020604051808303816000875af1158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f109190611b2b565b5060008160200151905060008260000151905060005b8360400151518110156111bb57600184604001518281518110610f4c57610f4b611d55565b5b60200260200101516000015160ff1603610fb657610fb0838386604001518481518110610f7c57610f7b611d55565b5b60200260200101516020015187604001518581518110610f9f57610f9e611d55565b5b602002602001015160400151610235565b50611097565b600084604001518281518110610fcf57610fce611d55565b5b60200260200101516000015160ff160361101657611010838386604001518481518110610fff57610ffe611d55565b5b602002602001015160200151610b75565b50611096565b60028460400151828151811061102f5761102e611d55565b5b60200260200101516000015160ff16036110955761109383838660400151848151811061105f5761105e611d55565b5b6020026020010151602001518760400151858151811061108257611081611d55565b5b60200260200101516060015161088b565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110d091906119d7565b602060405180830381865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190611c52565b92508360400151818151811061112a57611129611d55565b5b60200260200101516020015191506111ae6040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525085611247565b8080600101915050610f26565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016111f7929190611aed565b6020604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a9190611b2b565b5081935050505092915050565b6112e384848484604051602401611261949392919061256a565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061139e565b50505050565b60005b815181101561139a576000803073ffffffffffffffffffffffffffffffffffffffff1684848151811061132257611321611d55565b5b60200260200101516040516113379190612604565b6000604051808303816000865af19150503d8060008114611374576040519150601f19603f3d011682016040523d82523d6000602084013e611379565b606091505b50915091508161138d5761138c816113b8565b5b50508060010190506112ec565b5050565b6113b5816113ad6113d26113fb565b63ffffffff16565b50565b600081519050600081116113cb57600080fd5b8082602001fd5b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b611472819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61147a61261b565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6114a381611490565b81146114ae57600080fd5b50565b6000813590506114c08161149a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114f1826114c6565b9050919050565b611501816114e6565b811461150c57600080fd5b50565b60008135905061151e816114f8565b92915050565b600062ffffff82169050919050565b61153c81611524565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b6000806000806080858703121561157957611578611486565b5b6000611587878288016114b1565b94505060206115988782880161150f565b93505060406115a98782880161150f565b92505060606115ba8782880161154a565b91505092959194509250565b6115cf81611490565b82525050565b60006020820190506115ea60008301846115c6565b92915050565b60006020828403121561160657611605611486565b5b6000611614848285016114b1565b91505092915050565b61162681611524565b82525050565b6000602082019050611641600083018461161d565b92915050565b600080fd5b60006060828403121561166257611661611647565b5b81905092915050565b60006020828403121561168157611680611486565b5b600082013567ffffffffffffffff81111561169f5761169e61148b565b5b6116ab8482850161164c565b91505092915050565b60008115159050919050565b6116c9816116b4565b81146116d457600080fd5b50565b6000813590506116e6816116c0565b92915050565b6000806000806080858703121561170657611705611486565b5b6000611714878288016114b1565b94505060206117258782880161150f565b93505060406117368782880161150f565b9250506060611747878288016116d7565b91505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117a182611758565b810181811067ffffffffffffffff821117156117c0576117bf611769565b5b80604052505050565b60006117d361147c565b90506117df8282611798565b919050565b600067ffffffffffffffff8211156117ff576117fe611769565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561183557611834611769565b5b61183e82611758565b9050602081019050919050565b82818337600083830152505050565b600061186d6118688461181a565b6117c9565b90508281526020810184848401111561188957611888611815565b5b61189484828561184b565b509392505050565b600082601f8301126118b1576118b0611753565b5b81356118c184826020860161185a565b91505092915050565b60006118dd6118d8846117e4565b6117c9565b90508083825260208201905060208402830185811115611900576118ff611810565b5b835b8181101561194757803567ffffffffffffffff81111561192557611924611753565b5b808601611932898261189c565b85526020850194505050602081019050611902565b5050509392505050565b600082601f83011261196657611965611753565b5b81356119768482602086016118ca565b91505092915050565b60006020828403121561199557611994611486565b5b600082013567ffffffffffffffff8111156119b3576119b261148b565b5b6119bf84828501611951565b91505092915050565b6119d1816114e6565b82525050565b60006020820190506119ec60008301846119c8565b92915050565b600080600060608486031215611a0b57611a0a611486565b5b6000611a19868287016114b1565b9350506020611a2a8682870161150f565b9250506040611a3b8682870161150f565b9150509250925092565b600080fd5b60008083601f840112611a6057611a5f611753565b5b8235905067ffffffffffffffff811115611a7d57611a7c611a45565b5b602083019150836001820283011115611a9957611a98611810565b5b9250929050565b60008060208385031215611ab757611ab6611486565b5b600083013567ffffffffffffffff811115611ad557611ad461148b565b5b611ae185828601611a4a565b92509250509250929050565b6000604082019050611b0260008301856119c8565b611b0f60208301846115c6565b9392505050565b600081519050611b25816116c0565b92915050565b600060208284031215611b4157611b40611486565b5b6000611b4f84828501611b16565b91505092915050565b611b61816114e6565b82525050565b611b7081611524565b82525050565b611b7f81611490565b82525050565b611b8e816114c6565b82525050565b60e082016000820151611baa6000850182611b58565b506020820151611bbd6020850182611b58565b506040820151611bd06040850182611b67565b506060820151611be36060850182611b58565b506080820151611bf66080850182611b76565b5060a0820151611c0960a0850182611b76565b5060c0820151611c1c60c0850182611b85565b50505050565b600060e082019050611c376000830184611b94565b92915050565b600081519050611c4c8161149a565b92915050565b600060208284031215611c6857611c67611486565b5b6000611c7684828501611c3d565b91505092915050565b600060208284031215611c9557611c94611486565b5b6000611ca38482850161150f565b91505092915050565b6000606082019050611cc160008301866119c8565b611cce60208301856119c8565b611cdb60408301846115c6565b949350505050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611d0f57611d0e611ce3565b5b80840192508235915067ffffffffffffffff821115611d3157611d30611ce8565b5b602083019250608082023603831315611d4d57611d4c611ced565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b611d9a81611d84565b8114611da557600080fd5b50565b600081359050611db781611d91565b92915050565b600060208284031215611dd357611dd2611486565b5b6000611de184828501611da8565b91505092915050565b600060208284031215611e0057611dff611486565b5b6000611e0e8482850161154a565b91505092915050565b600060208284031215611e2d57611e2c611486565b5b6000611e3b848285016116d7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e7e82611490565b9150611e8983611490565b9250828201905080821115611ea157611ea0611e44565b5b92915050565b6000819050919050565b6000819050919050565b6000611ed6611ed1611ecc84611ea7565b611eb1565b611490565b9050919050565b611ee681611ebb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f21816116b4565b82525050565b608082016000820151611f3d6000850182611b58565b506020820151611f506020850182611b58565b506040820151611f636040850182611f18565b506060820151611f766060850182611b58565b50505050565b6000611f888383611f27565b60808301905092915050565b6000602082019050919050565b6000611fac82611eec565b611fb68185611ef7565b9350611fc183611f08565b8060005b83811015611ff2578151611fd98882611f7c565b9750611fe483611f94565b925050600181019050611fc5565b5085935050505092915050565b600060a08201905061201460008301886115c6565b6120216020830187611edd565b81810360408301526120338186611fa1565b905061204260608301856119c8565b61204f60808301846115c6565b9695505050505050565b600067ffffffffffffffff82111561207457612073611769565b5b602082029050602081019050919050565b600061209861209384612059565b6117c9565b905080838252602082019050602084028301858111156120bb576120ba611810565b5b835b818110156120e457806120d08882611c3d565b8452602084019350506020810190506120bd565b5050509392505050565b600082601f83011261210357612102611753565b5b8151612113848260208601612085565b91505092915050565b60006020828403121561213257612131611486565b5b600082015167ffffffffffffffff8111156121505761214f61148b565b5b61215c848285016120ee565b91505092915050565b600061217082611490565b915061217b83611490565b925082820390508181111561219357612192611e44565b5b92915050565b6000819050919050565b60006121be6121b96121b484612199565b611eb1565b611490565b9050919050565b6121ce816121a3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061220c8383611b58565b60208301905092915050565b6000602082019050919050565b6000612230826121d4565b61223a81856121df565b9350612245836121f0565b8060005b8381101561227657815161225d8882612200565b975061226883612218565b925050600181019050612249565b5085935050505092915050565b600060a08201905061229860008301886115c6565b6122a560208301876121c5565b81810360408301526122b78186612225565b90506122c660608301856119c8565b6122d360808301846115c6565b9695505050505050565b600080fd5b600080fd5b600067ffffffffffffffff82111561230257612301611769565b5b602082029050602081019050919050565b600060808284031215612329576123286122dd565b5b61233360806117c9565b9050600061234384828501611da8565b60008301525060206123578482850161150f565b602083015250604061236b8482850161154a565b604083015250606061237f848285016116d7565b60608301525092915050565b600061239e612399846122e7565b6117c9565b905080838252602082019050608084028301858111156123c1576123c0611810565b5b835b818110156123ea57806123d68882612313565b8452602084019350506080810190506123c3565b5050509392505050565b600082601f83011261240957612408611753565b5b813561241984826020860161238b565b91505092915050565b600060608284031215612438576124376122dd565b5b61244260606117c9565b905060006124528482850161150f565b6000830152506020612466848285016114b1565b602083015250604082013567ffffffffffffffff81111561248a576124896122e2565b5b612496848285016123f4565b60408301525092915050565b6000602082840312156124b8576124b7611486565b5b600082013567ffffffffffffffff8111156124d6576124d561148b565b5b6124e284828501612422565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561252557808201518184015260208101905061250a565b60008484015250505050565b600061253c826124eb565b61254681856124f6565b9350612556818560208601612507565b61255f81611758565b840191505092915050565b600060808201905081810360008301526125848187612531565b905061259360208301866115c6565b81810360408301526125a58185612531565b90506125b460608301846119c8565b95945050505050565b600081519050919050565b600081905092915050565b60006125de826125bd565b6125e881856125c8565b93506125f8818560208601612507565b80840191505092915050565b600061261082846125d3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122018a7a7b6def7967e57ac3d584e4a66669d274ffd9b75ac6e82fc9ef3d253f98f64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0{W`\x005`\xE0\x1C\x80c\xAC\x96P\xD8\x11a\0NW\x80c\xAC\x96P\xD8\x14a\x01tW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x90W\x80c\xF1\xA5%\x92\x14a\x01\xBBW\x80c\xF3%Q\xC3\x14a\x01\xF8Wa\0{V[\x80c\x07H\xB1\x9B\x14a\0\x80W\x80ck\x1B\x9B \x14a\0\xBDW\x80c\x821\xAB\x0B\x14a\0\xFAW\x80c\x88l\xDC\x9C\x14a\x017W[`\0\x80\xFD[4\x80\x15a\0\x8CW`\0\x80\xFD[Pa\0\xA7`\x04\x806\x03\x81\x01\x90a\0\xA2\x91\x90a\x15_V[a\x025V[`@Qa\0\xB4\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xC9W`\0\x80\xFD[Pa\0\xE4`\x04\x806\x03\x81\x01\x90a\0\xDF\x91\x90a\x15\xF0V[a\x04\x19V[`@Qa\0\xF1\x91\x90a\x16,V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x06W`\0\x80\xFD[Pa\x01!`\x04\x806\x03\x81\x01\x90a\x01\x1C\x91\x90a\x16kV[a\x04RV[`@Qa\x01.\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01CW`\0\x80\xFD[Pa\x01^`\x04\x806\x03\x81\x01\x90a\x01Y\x91\x90a\x16\xECV[a\x08\x8BV[`@Qa\x01k\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[a\x01\x8E`\x04\x806\x03\x81\x01\x90a\x01\x89\x91\x90a\x19\x7FV[a\n\xF9V[\0[4\x80\x15a\x01\x9CW`\0\x80\xFD[Pa\x01\xA5a\x0B]V[`@Qa\x01\xB2\x91\x90a\x19\xD7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xC7W`\0\x80\xFD[Pa\x01\xE2`\x04\x806\x03\x81\x01\x90a\x01\xDD\x91\x90a\x19\xF2V[a\x0BuV[`@Qa\x01\xEF\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x04W`\0\x80\xFD[Pa\x02\x1F`\x04\x806\x03\x81\x01\x90a\x02\x1A\x91\x90a\x1A\xA0V[a\x0EtV[`@Qa\x02,\x91\x90a\x15\xD5V[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x92\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02\xB1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xD5\x91\x90a\x1B+V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xC7\x91\x90a\x1C\"V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xE6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\n\x91\x90a\x1CRV[\x90P\x80\x92PPP\x94\x93PPPPV[`\0\x81\x81T\x81\x10a\x04)W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x04g\x91\x90a\x1C\x7FV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xA7\x93\x92\x91\x90a\x1C\xACV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04\xC6W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xEA\x91\x90a\x1B+V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\x05\t\x91\x90a\x1C\x7FV[\x90P`\0\x80[\x85\x80`@\x01\x90a\x05\x1F\x91\x90a\x1C\xF2V[\x90P\x81\x10\x15a\x08\0W`\x01\x86\x80`@\x01\x90a\x05:\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x05KWa\x05Ja\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x05c\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x05\xEEWa\x05\xE7\x84\x84\x88\x80`@\x01\x90a\x05\x80\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x05\x91Wa\x05\x90a\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x05\xA9\x91\x90a\x1C\x7FV[\x89\x80`@\x01\x90a\x05\xB9\x91\x90a\x1C\xF2V[\x86\x81\x81\x10a\x05\xCAWa\x05\xC9a\x1DUV[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x05\xE2\x91\x90a\x1D\xEAV[a\x025V[\x91Pa\x07?V[`\0\x86\x80`@\x01\x90a\x06\0\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x06\x11Wa\x06\x10a\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06)\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x06{Wa\x06t\x84\x84\x88\x80`@\x01\x90a\x06F\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x06WWa\x06Va\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06o\x91\x90a\x1C\x7FV[a\x0BuV[\x91Pa\x07>V[`\x02\x86\x80`@\x01\x90a\x06\x8D\x91\x90a\x1C\xF2V[\x83\x81\x81\x10a\x06\x9EWa\x06\x9Da\x1DUV[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06\xB6\x91\x90a\x1D\xBDV[`\xFF\x16\x03a\x07=Wa\x07:\x84\x84\x88\x80`@\x01\x90a\x06\xD3\x91\x90a\x1C\xF2V[\x85\x81\x81\x10a\x06\xE4Wa\x06\xE3a\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x06\xFC\x91\x90a\x1C\x7FV[\x89\x80`@\x01\x90a\x07\x0C\x91\x90a\x1C\xF2V[\x86\x81\x81\x10a\x07\x1DWa\x07\x1Ca\x1DUV[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x075\x91\x90a\x1E\x17V[a\x08\x8BV[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x07R\x91\x90a\x1C\xF2V[\x82\x81\x81\x10a\x07cWa\x07ba\x1DUV[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07{\x91\x90a\x1C\x7FV[\x92Pa\x07\xF3`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x12GV[\x80\x80`\x01\x01\x91PPa\x05\x0FV[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08<\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08[W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x7F\x91\x90a\x1B+V[P\x82\x93PPPP\x91\x90PV[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\xE8\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\x07W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t+\x91\x90a\x1B+V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tIWa\tHa\x17iV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\t\x82W\x81` \x01[a\toa\x14\x06V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\tgW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\t\xFFWa\t\xFEa\x1DUV[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\n[\x91\x90a\x1EsV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n{\x95\x94\x93\x92\x91\x90a\x1F\xFFV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\n\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xC3\x91\x90a!\x1CV[\x90P\x80`\x01\x82Qa\n\xD4\x91\x90a!eV[\x81Q\x81\x10a\n\xE5Wa\n\xE4a\x1DUV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0BQW`\0\x80\xFD[a\x0BZ\x81a\x12\xE9V[PV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x80\x84\x03a\x0B\xFBW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\xB7\x91\x90a\x19\xD7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B\xD4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xF8\x91\x90a\x1CRV[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\x18Wa\x0C\x17a\x17iV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0CFW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x0C^Wa\x0C]a\x1DUV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x0C\xADWa\x0C\xACa\x1DUV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\rB\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\raW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x85\x91\x90a\x1B+V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\r\xD7\x91\x90a\x1EsV[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r\xF7\x95\x94\x93\x92\x91\x90a\"\x83V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\x16W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E?\x91\x90a!\x1CV[\x90P\x80`\x01\x82Qa\x0EP\x91\x90a!eV[\x81Q\x81\x10a\x0EaWa\x0E`a\x1DUV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[`\0\x80\x83\x83\x81\x01\x90a\x0E\x86\x91\x90a$\xA2V[\x90P\x80`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x84` \x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\xCD\x93\x92\x91\x90a\x1C\xACV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\xECW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\x10\x91\x90a\x1B+V[P`\0\x81` \x01Q\x90P`\0\x82`\0\x01Q\x90P`\0[\x83`@\x01QQ\x81\x10\x15a\x11\xBBW`\x01\x84`@\x01Q\x82\x81Q\x81\x10a\x0FLWa\x0FKa\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x0F\xB6Wa\x0F\xB0\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x0F|Wa\x0F{a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x87`@\x01Q\x85\x81Q\x81\x10a\x0F\x9FWa\x0F\x9Ea\x1DUV[[` \x02` \x01\x01Q`@\x01Qa\x025V[Pa\x10\x97V[`\0\x84`@\x01Q\x82\x81Q\x81\x10a\x0F\xCFWa\x0F\xCEa\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x10\x16Wa\x10\x10\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x0F\xFFWa\x0F\xFEa\x1DUV[[` \x02` \x01\x01Q` \x01Qa\x0BuV[Pa\x10\x96V[`\x02\x84`@\x01Q\x82\x81Q\x81\x10a\x10/Wa\x10.a\x1DUV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x10\x95Wa\x10\x93\x83\x83\x86`@\x01Q\x84\x81Q\x81\x10a\x10_Wa\x10^a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x87`@\x01Q\x85\x81Q\x81\x10a\x10\x82Wa\x10\x81a\x1DUV[[` \x02` \x01\x01Q``\x01Qa\x08\x8BV[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10\xD0\x91\x90a\x19\xD7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10\xEDW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x11\x91\x90a\x1CRV[\x92P\x83`@\x01Q\x81\x81Q\x81\x10a\x11*Wa\x11)a\x1DUV[[` \x02` \x01\x01Q` \x01Q\x91Pa\x11\xAE`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x12GV[\x80\x80`\x01\x01\x91PPa\x0F&V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\xF7\x92\x91\x90a\x1A\xEDV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x12\x16W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12:\x91\x90a\x1B+V[P\x81\x93PPPP\x92\x91PPV[a\x12\xE3\x84\x84\x84\x84`@Q`$\x01a\x12a\x94\x93\x92\x91\x90a%jV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x13\x9EV[PPPPV[`\0[\x81Q\x81\x10\x15a\x13\x9AW`\0\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x13\"Wa\x13!a\x1DUV[[` \x02` \x01\x01Q`@Qa\x137\x91\x90a&\x04V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x13tW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x13yV[``\x91P[P\x91P\x91P\x81a\x13\x8DWa\x13\x8C\x81a\x13\xB8V[[PP\x80`\x01\x01\x90Pa\x12\xECV[PPV[a\x13\xB5\x81a\x13\xADa\x13\xD2a\x13\xFBV[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0\x81\x11a\x13\xCBW`\0\x80\xFD[\x80\x82` \x01\xFD[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x14r\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x14za&\x1BV[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x14\xA3\x81a\x14\x90V[\x81\x14a\x14\xAEW`\0\x80\xFD[PV[`\0\x815\x90Pa\x14\xC0\x81a\x14\x9AV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x14\xF1\x82a\x14\xC6V[\x90P\x91\x90PV[a\x15\x01\x81a\x14\xE6V[\x81\x14a\x15\x0CW`\0\x80\xFD[PV[`\0\x815\x90Pa\x15\x1E\x81a\x14\xF8V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x15<\x81a\x15$V[\x81\x14a\x15GW`\0\x80\xFD[PV[`\0\x815\x90Pa\x15Y\x81a\x153V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x15yWa\x15xa\x14\x86V[[`\0a\x15\x87\x87\x82\x88\x01a\x14\xB1V[\x94PP` a\x15\x98\x87\x82\x88\x01a\x15\x0FV[\x93PP`@a\x15\xA9\x87\x82\x88\x01a\x15\x0FV[\x92PP``a\x15\xBA\x87\x82\x88\x01a\x15JV[\x91PP\x92\x95\x91\x94P\x92PV[a\x15\xCF\x81a\x14\x90V[\x82RPPV[`\0` \x82\x01\x90Pa\x15\xEA`\0\x83\x01\x84a\x15\xC6V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x16\x06Wa\x16\x05a\x14\x86V[[`\0a\x16\x14\x84\x82\x85\x01a\x14\xB1V[\x91PP\x92\x91PPV[a\x16&\x81a\x15$V[\x82RPPV[`\0` \x82\x01\x90Pa\x16A`\0\x83\x01\x84a\x16\x1DV[\x92\x91PPV[`\0\x80\xFD[`\0``\x82\x84\x03\x12\x15a\x16bWa\x16aa\x16GV[[\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x16\x81Wa\x16\x80a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\x9FWa\x16\x9Ea\x14\x8BV[[a\x16\xAB\x84\x82\x85\x01a\x16LV[\x91PP\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x16\xC9\x81a\x16\xB4V[\x81\x14a\x16\xD4W`\0\x80\xFD[PV[`\0\x815\x90Pa\x16\xE6\x81a\x16\xC0V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x17\x06Wa\x17\x05a\x14\x86V[[`\0a\x17\x14\x87\x82\x88\x01a\x14\xB1V[\x94PP` a\x17%\x87\x82\x88\x01a\x15\x0FV[\x93PP`@a\x176\x87\x82\x88\x01a\x15\x0FV[\x92PP``a\x17G\x87\x82\x88\x01a\x16\xD7V[\x91PP\x92\x95\x91\x94P\x92PV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x17\xA1\x82a\x17XV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x17\xC0Wa\x17\xBFa\x17iV[[\x80`@RPPPV[`\0a\x17\xD3a\x14|V[\x90Pa\x17\xDF\x82\x82a\x17\x98V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xFFWa\x17\xFEa\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x185Wa\x184a\x17iV[[a\x18>\x82a\x17XV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x18ma\x18h\x84a\x18\x1AV[a\x17\xC9V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x18\x89Wa\x18\x88a\x18\x15V[[a\x18\x94\x84\x82\x85a\x18KV[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18\xB1Wa\x18\xB0a\x17SV[[\x815a\x18\xC1\x84\x82` \x86\x01a\x18ZV[\x91PP\x92\x91PPV[`\0a\x18\xDDa\x18\xD8\x84a\x17\xE4V[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x19\0Wa\x18\xFFa\x18\x10V[[\x83[\x81\x81\x10\x15a\x19GW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19%Wa\x19$a\x17SV[[\x80\x86\x01a\x192\x89\x82a\x18\x9CV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x19\x02V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x19fWa\x19ea\x17SV[[\x815a\x19v\x84\x82` \x86\x01a\x18\xCAV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x19\x95Wa\x19\x94a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xB3Wa\x19\xB2a\x14\x8BV[[a\x19\xBF\x84\x82\x85\x01a\x19QV[\x91PP\x92\x91PPV[a\x19\xD1\x81a\x14\xE6V[\x82RPPV[`\0` \x82\x01\x90Pa\x19\xEC`\0\x83\x01\x84a\x19\xC8V[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1A\x0BWa\x1A\na\x14\x86V[[`\0a\x1A\x19\x86\x82\x87\x01a\x14\xB1V[\x93PP` a\x1A*\x86\x82\x87\x01a\x15\x0FV[\x92PP`@a\x1A;\x86\x82\x87\x01a\x15\x0FV[\x91PP\x92P\x92P\x92V[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x1A`Wa\x1A_a\x17SV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A}Wa\x1A|a\x1AEV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x1A\x99Wa\x1A\x98a\x18\x10V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x1A\xB7Wa\x1A\xB6a\x14\x86V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xD5Wa\x1A\xD4a\x14\x8BV[[a\x1A\xE1\x85\x82\x86\x01a\x1AJV[\x92P\x92PP\x92P\x92\x90PV[`\0`@\x82\x01\x90Pa\x1B\x02`\0\x83\x01\x85a\x19\xC8V[a\x1B\x0F` \x83\x01\x84a\x15\xC6V[\x93\x92PPPV[`\0\x81Q\x90Pa\x1B%\x81a\x16\xC0V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1BAWa\x1B@a\x14\x86V[[`\0a\x1BO\x84\x82\x85\x01a\x1B\x16V[\x91PP\x92\x91PPV[a\x1Ba\x81a\x14\xE6V[\x82RPPV[a\x1Bp\x81a\x15$V[\x82RPPV[a\x1B\x7F\x81a\x14\x90V[\x82RPPV[a\x1B\x8E\x81a\x14\xC6V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x1B\xAA`\0\x85\x01\x82a\x1BXV[P` \x82\x01Qa\x1B\xBD` \x85\x01\x82a\x1BXV[P`@\x82\x01Qa\x1B\xD0`@\x85\x01\x82a\x1BgV[P``\x82\x01Qa\x1B\xE3``\x85\x01\x82a\x1BXV[P`\x80\x82\x01Qa\x1B\xF6`\x80\x85\x01\x82a\x1BvV[P`\xA0\x82\x01Qa\x1C\t`\xA0\x85\x01\x82a\x1BvV[P`\xC0\x82\x01Qa\x1C\x1C`\xC0\x85\x01\x82a\x1B\x85V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x1C7`\0\x83\x01\x84a\x1B\x94V[\x92\x91PPV[`\0\x81Q\x90Pa\x1CL\x81a\x14\x9AV[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1ChWa\x1Cga\x14\x86V[[`\0a\x1Cv\x84\x82\x85\x01a\x1C=V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C\x95Wa\x1C\x94a\x14\x86V[[`\0a\x1C\xA3\x84\x82\x85\x01a\x15\x0FV[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x1C\xC1`\0\x83\x01\x86a\x19\xC8V[a\x1C\xCE` \x83\x01\x85a\x19\xC8V[a\x1C\xDB`@\x83\x01\x84a\x15\xC6V[\x94\x93PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1D\x0FWa\x1D\x0Ea\x1C\xE3V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1D1Wa\x1D0a\x1C\xE8V[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1DMWa\x1DLa\x1C\xEDV[[P\x92P\x92\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x1D\x9A\x81a\x1D\x84V[\x81\x14a\x1D\xA5W`\0\x80\xFD[PV[`\0\x815\x90Pa\x1D\xB7\x81a\x1D\x91V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1D\xD3Wa\x1D\xD2a\x14\x86V[[`\0a\x1D\xE1\x84\x82\x85\x01a\x1D\xA8V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1E\0Wa\x1D\xFFa\x14\x86V[[`\0a\x1E\x0E\x84\x82\x85\x01a\x15JV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1E-Wa\x1E,a\x14\x86V[[`\0a\x1E;\x84\x82\x85\x01a\x16\xD7V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x1E~\x82a\x14\x90V[\x91Pa\x1E\x89\x83a\x14\x90V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1E\xA1Wa\x1E\xA0a\x1EDV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x1E\xD6a\x1E\xD1a\x1E\xCC\x84a\x1E\xA7V[a\x1E\xB1V[a\x14\x90V[\x90P\x91\x90PV[a\x1E\xE6\x81a\x1E\xBBV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1F!\x81a\x16\xB4V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x1F=`\0\x85\x01\x82a\x1BXV[P` \x82\x01Qa\x1FP` \x85\x01\x82a\x1BXV[P`@\x82\x01Qa\x1Fc`@\x85\x01\x82a\x1F\x18V[P``\x82\x01Qa\x1Fv``\x85\x01\x82a\x1BXV[PPPPV[`\0a\x1F\x88\x83\x83a\x1F'V[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1F\xAC\x82a\x1E\xECV[a\x1F\xB6\x81\x85a\x1E\xF7V[\x93Pa\x1F\xC1\x83a\x1F\x08V[\x80`\0[\x83\x81\x10\x15a\x1F\xF2W\x81Qa\x1F\xD9\x88\x82a\x1F|V[\x97Pa\x1F\xE4\x83a\x1F\x94V[\x92PP`\x01\x81\x01\x90Pa\x1F\xC5V[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa \x14`\0\x83\x01\x88a\x15\xC6V[a !` \x83\x01\x87a\x1E\xDDV[\x81\x81\x03`@\x83\x01Ra 3\x81\x86a\x1F\xA1V[\x90Pa B``\x83\x01\x85a\x19\xC8V[a O`\x80\x83\x01\x84a\x15\xC6V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a tWa sa\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a \x98a \x93\x84a YV[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a \xBBWa \xBAa\x18\x10V[[\x83[\x81\x81\x10\x15a \xE4W\x80a \xD0\x88\x82a\x1C=V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa \xBDV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a!\x03Wa!\x02a\x17SV[[\x81Qa!\x13\x84\x82` \x86\x01a \x85V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a!2Wa!1a\x14\x86V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!PWa!Oa\x14\x8BV[[a!\\\x84\x82\x85\x01a \xEEV[\x91PP\x92\x91PPV[`\0a!p\x82a\x14\x90V[\x91Pa!{\x83a\x14\x90V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a!\x93Wa!\x92a\x1EDV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a!\xBEa!\xB9a!\xB4\x84a!\x99V[a\x1E\xB1V[a\x14\x90V[\x90P\x91\x90PV[a!\xCE\x81a!\xA3V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\"\x0C\x83\x83a\x1BXV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\"0\x82a!\xD4V[a\":\x81\x85a!\xDFV[\x93Pa\"E\x83a!\xF0V[\x80`\0[\x83\x81\x10\x15a\"vW\x81Qa\"]\x88\x82a\"\0V[\x97Pa\"h\x83a\"\x18V[\x92PP`\x01\x81\x01\x90Pa\"IV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\"\x98`\0\x83\x01\x88a\x15\xC6V[a\"\xA5` \x83\x01\x87a!\xC5V[\x81\x81\x03`@\x83\x01Ra\"\xB7\x81\x86a\"%V[\x90Pa\"\xC6``\x83\x01\x85a\x19\xC8V[a\"\xD3`\x80\x83\x01\x84a\x15\xC6V[\x96\x95PPPPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a#\x02Wa#\x01a\x17iV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0`\x80\x82\x84\x03\x12\x15a#)Wa#(a\"\xDDV[[a#3`\x80a\x17\xC9V[\x90P`\0a#C\x84\x82\x85\x01a\x1D\xA8V[`\0\x83\x01RP` a#W\x84\x82\x85\x01a\x15\x0FV[` \x83\x01RP`@a#k\x84\x82\x85\x01a\x15JV[`@\x83\x01RP``a#\x7F\x84\x82\x85\x01a\x16\xD7V[``\x83\x01RP\x92\x91PPV[`\0a#\x9Ea#\x99\x84a\"\xE7V[a\x17\xC9V[\x90P\x80\x83\x82R` \x82\x01\x90P`\x80\x84\x02\x83\x01\x85\x81\x11\x15a#\xC1Wa#\xC0a\x18\x10V[[\x83[\x81\x81\x10\x15a#\xEAW\x80a#\xD6\x88\x82a#\x13V[\x84R` \x84\x01\x93PP`\x80\x81\x01\x90Pa#\xC3V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a$\tWa$\x08a\x17SV[[\x815a$\x19\x84\x82` \x86\x01a#\x8BV[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a$8Wa$7a\"\xDDV[[a$B``a\x17\xC9V[\x90P`\0a$R\x84\x82\x85\x01a\x15\x0FV[`\0\x83\x01RP` a$f\x84\x82\x85\x01a\x14\xB1V[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a$\x8AWa$\x89a\"\xE2V[[a$\x96\x84\x82\x85\x01a#\xF4V[`@\x83\x01RP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a$\xB8Wa$\xB7a\x14\x86V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a$\xD6Wa$\xD5a\x14\x8BV[[a$\xE2\x84\x82\x85\x01a$\"V[\x91PP\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a%%W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa%\nV[`\0\x84\x84\x01RPPPPV[`\0a%<\x82a$\xEBV[a%F\x81\x85a$\xF6V[\x93Pa%V\x81\x85` \x86\x01a%\x07V[a%_\x81a\x17XV[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra%\x84\x81\x87a%1V[\x90Pa%\x93` \x83\x01\x86a\x15\xC6V[\x81\x81\x03`@\x83\x01Ra%\xA5\x81\x85a%1V[\x90Pa%\xB4``\x83\x01\x84a\x19\xC8V[\x95\x94PPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0a%\xDE\x82a%\xBDV[a%\xE8\x81\x85a%\xC8V[\x93Pa%\xF8\x81\x85` \x86\x01a%\x07V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a&\x10\x82\x84a%\xD3V[\x91P\x81\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \x18\xA7\xA7\xB6\xDE\xF7\x96~W\xAC=XNJff\x9D'O\xFD\x9Bu\xACn\x82\xFC\x9E\xF3\xD2S\xF9\x8FdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct Swap { uint8 swapType; address tokenOut; uint24 feeTier; bool stable; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Swap {
        pub swapType: u8,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
        pub stable: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Swap> for UnderlyingRustTuple<'_> {
            fn from(value: Swap) -> Self {
                (value.swapType, value.tokenOut, value.feeTier, value.stable)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Swap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    swapType: tuple.0,
                    tokenOut: tuple.1,
                    feeTier: tuple.2,
                    stable: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Swap {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Swap {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.swapType),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Swap {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Swap {
            const NAME: &'static str = "Swap";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Swap(uint8 swapType,address tokenOut,uint24 feeTier,bool stable)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swapType)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feeTier)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Swap {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.swapType,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeTier,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swapType,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeTier,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct SwapData { address tokenIn; uint256 amountIn; Swap[] swaps; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapData {
        pub tokenIn: alloy::sol_types::private::Address,
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub swaps: alloy::sol_types::private::Vec<
            <Swap as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<Swap>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<<Swap as alloy::sol_types::SolType>::RustType>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapData> for UnderlyingRustTuple<'_> {
            fn from(value: SwapData) -> Self {
                (value.tokenIn, value.amountIn, value.swaps)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenIn: tuple.0,
                    amountIn: tuple.1,
                    swaps: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::tokenize(&self.swaps),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapData {
            const NAME: &'static str = "SwapData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapData(address tokenIn,uint256 amountIn,Swap[] swaps)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Swap as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Swap as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountIn)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swaps)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountIn,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.swaps)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountIn,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    Swap,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swaps,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
        pub _uniswapV3Router: alloy::sol_types::private::Address,
        pub _uniswapV2Router: alloy::sol_types::private::Address,
        pub _aerodromeRouter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._owner,
                        value._uniswapV3Router,
                        value._uniswapV2Router,
                        value._aerodromeRouter,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _uniswapV3Router: tuple.1,
                        _uniswapV2Router: tuple.2,
                        _aerodromeRouter: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._aerodromeRouter,
                    ),
                )
            }
        }
    };
    /**Function with signature `AGGREGATION_ROUTER_V5()` and selector `0xb11de7e3`.
```solidity
function AGGREGATION_ROUTER_V5() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Call {}
    ///Container type for the return parameters of the [`AGGREGATION_ROUTER_V5()`](AGGREGATION_ROUTER_V5Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATION_ROUTER_V5Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AGGREGATION_ROUTER_V5Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATION_ROUTER_V5()";
            const SELECTOR: [u8; 4] = [177u8, 29u8, 231u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_TIERS(uint256)` and selector `0x6b1b9b20`.
```solidity
function FEE_TIERS(uint256) external view returns (uint24);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`FEE_TIERS(uint256)`](FEE_TIERSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_TIERSCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_TIERSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_TIERS(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 27u8, 155u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall(bytes[])` and selector `0xac9650d8`.
```solidity
function multicall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`multicall(bytes[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall(bytes[])";
            const SELECTOR: [u8; 4] = [172u8, 150u8, 80u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swap((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0x8231ab0b`.
```solidity
function swap(SwapData memory data) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub data: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swap((address,uint256,(uint8,address,uint24,bool)[]))`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [130u8, 49u8, 171u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.data),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAerodrome(uint256,address,address,bool)` and selector `0x886cdc9c`.
```solidity
function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeCall {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub stable: bool,
    }
    ///Container type for the return parameters of the [`swapAerodrome(uint256,address,address,bool)`](swapAerodromeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeCall) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.stable)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        stable: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAerodromeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAerodromeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAerodrome(uint256,address,address,bool)";
            const SELECTOR: [u8; 4] = [136u8, 108u8, 220u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAll(bytes)` and selector `0xf32551c3`.
```solidity
function swapAll(bytes memory swapData) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllCall {
        pub swapData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`swapAll(bytes)`](swapAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllCall) -> Self {
                    (value.swapData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAllCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAll(bytes)";
            const SELECTOR: [u8; 4] = [243u8, 37u8, 81u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.swapData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV2(uint256,address,address)` and selector `0xf1a52592`.
```solidity
function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`swapUniswapV2(uint256,address,address)`](swapUniswapV2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV2(uint256,address,address)";
            const SELECTOR: [u8; 4] = [241u8, 165u8, 37u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV3(uint256,address,address,uint24)` and selector `0x0748b19b`.
```solidity
function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
    }
    ///Container type for the return parameters of the [`swapUniswapV3(uint256,address,address,uint24)`](swapUniswapV3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.feeTier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        feeTier: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV3(uint256,address,address,uint24)";
            const SELECTOR: [u8; 4] = [7u8, 72u8, 177u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Executor`](self) function calls.
    pub enum ExecutorCalls {
        AGGREGATION_ROUTER_V5(AGGREGATION_ROUTER_V5Call),
        FEE_TIERS(FEE_TIERSCall),
        multicall(multicallCall),
        swap(swapCall),
        swapAerodrome(swapAerodromeCall),
        swapAll(swapAllCall),
        swapUniswapV2(swapUniswapV2Call),
        swapUniswapV3(swapUniswapV3Call),
    }
    #[automatically_derived]
    impl ExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 72u8, 177u8, 155u8],
            [107u8, 27u8, 155u8, 32u8],
            [130u8, 49u8, 171u8, 11u8],
            [136u8, 108u8, 220u8, 156u8],
            [172u8, 150u8, 80u8, 216u8],
            [177u8, 29u8, 231u8, 227u8],
            [241u8, 165u8, 37u8, 146u8],
            [243u8, 37u8, 81u8, 195u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ExecutorCalls {
        const NAME: &'static str = "ExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATION_ROUTER_V5(_) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_TIERS(_) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapAerodrome(_) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapAll(_) => <swapAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapUniswapV2(_) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV3(_) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ExecutorCalls>] = &[
                {
                    fn swapUniswapV3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV3)
                    }
                    swapUniswapV3
                },
                {
                    fn FEE_TIERS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::FEE_TIERS)
                    }
                    FEE_TIERS
                },
                {
                    fn swap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swap)
                    }
                    swap
                },
                {
                    fn swapAerodrome(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapAerodromeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapAerodrome)
                    }
                    swapAerodrome
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::multicall)
                    }
                    multicall
                },
                {
                    fn AGGREGATION_ROUTER_V5(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::AGGREGATION_ROUTER_V5)
                    }
                    AGGREGATION_ROUTER_V5
                },
                {
                    fn swapUniswapV2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV2)
                    }
                    swapUniswapV2
                },
                {
                    fn swapAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapAll)
                    }
                    swapAll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ExecutorInstance<T, P, N> {
        ExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ExecutorInstance<T, P, N>>,
    > {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _owner, _uniswapV3Router, _uniswapV2Router, _aerodromeRouter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _owner,
            _uniswapV3Router,
            _uniswapV2Router,
            _aerodromeRouter,
        )
    }
    /**A [`Executor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Executor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _owner,
                _uniswapV3Router,
                _uniswapV2Router,
                _aerodromeRouter,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _owner,
                            _uniswapV3Router,
                            _uniswapV2Router,
                            _aerodromeRouter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ExecutorInstance<T, P, N> {
            ExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATION_ROUTER_V5`] function.
        pub fn AGGREGATION_ROUTER_V5(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AGGREGATION_ROUTER_V5Call, N> {
            self.call_builder(&AGGREGATION_ROUTER_V5Call {})
        }
        ///Creates a new call builder for the [`FEE_TIERS`] function.
        pub fn FEE_TIERS(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_TIERSCall, N> {
            self.call_builder(&FEE_TIERSCall { _0 })
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { data })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            data: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall { data })
        }
        ///Creates a new call builder for the [`swapAerodrome`] function.
        pub fn swapAerodrome(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            stable: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAerodromeCall, N> {
            self.call_builder(
                &swapAerodromeCall {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    stable,
                },
            )
        }
        ///Creates a new call builder for the [`swapAll`] function.
        pub fn swapAll(
            &self,
            swapData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAllCall, N> {
            self.call_builder(&swapAllCall { swapData })
        }
        ///Creates a new call builder for the [`swapUniswapV2`] function.
        pub fn swapUniswapV2(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV2Call, N> {
            self.call_builder(
                &swapUniswapV2Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV3`] function.
        pub fn swapUniswapV3(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            feeTier: alloy::sol_types::private::primitives::aliases::U24,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV3Call, N> {
            self.call_builder(
                &swapUniswapV3Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    feeTier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
