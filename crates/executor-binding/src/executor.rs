/**

Generated by the following Solidity interface...
```solidity
interface Executor {
    struct Call {
        address target;
        uint256 value;
        bytes data;
    }
    struct Swap {
        uint8 swapType;
        address tokenOut;
        uint24 feeTier;
        bool stable;
    }
    struct SwapData {
        address tokenIn;
        uint256 amountIn;
        Swap[] swaps;
    }

    constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);

    receive() external payable;

    function AGGREGATION_ROUTER_V5() external view returns (address);
    function FEE_TIERS(uint256) external view returns (uint24);
    function multicall(Call[] memory calls) external payable;
    function swap(SwapData memory data) external returns (uint256);
    function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
    function swapAll(SwapData memory swapData) external returns (uint256);
    function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
    function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_aerodromeRouter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "AGGREGATION_ROUTER_V5",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_TIERS",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Executor.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct Executor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct Executor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAerodrome",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "stable",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAll",
    "inputs": [
      {
        "name": "swapData",
        "type": "tuple",
        "internalType": "struct Executor.SwapData",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swaps",
            "type": "tuple[]",
            "internalType": "struct Executor.Swap[]",
            "components": [
              {
                "name": "swapType",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "tokenOut",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "feeTier",
                "type": "uint24",
                "internalType": "uint24"
              },
              {
                "name": "stable",
                "type": "bool",
                "internalType": "bool"
              }
            ]
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV2",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV3",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeTier",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Executor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101006040526040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff16815250600090600461004d929190610155565b5034801561005a57600080fd5b506040516128a43803806128a4833981810160405281019061007c9190610281565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506102e8565b82805482825590600052602060002090600901600a900481019282156101f05791602002820160005b838211156101bf57835183826101000a81548162ffffff021916908361ffff160217905550926020019260030160208160020104928301926001030261017e565b80156101ee5782816101000a81549062ffffff02191690556003016020816002010492830192600103026101bf565b505b5090506101fd9190610201565b5090565b5b8082111561021a576000816000905550600101610202565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024e82610223565b9050919050565b61025e81610243565b811461026957600080fd5b50565b60008151905061027b81610255565b92915050565b6000806000806080858703121561029b5761029a61021e565b5b60006102a98782880161026c565b94505060206102ba8782880161026c565b93505060406102cb8782880161026c565b92505060606102dc8782880161026c565b91505092959194509250565b60805160a05160c05160e05161256e61033660003960008181610a040152610b670152600081816112a7015261132c015260008181610260015261037b01526000610426015261256e6000f3fe60806040526004361061007f5760003560e01c8063886cdc9c1161004e578063886cdc9c1461015e578063b11de7e31461019b578063d1855626146101c6578063f1a525921461020357610086565b80630748b19b1461008b5780631749e1e3146100c85780636b1b9b20146100e45780638231ab0b1461012157610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611679565b610240565b6040516100bf91906116ef565b60405180910390f35b6100e260048036038101906100dd91906119c0565b610424565b005b3480156100f057600080fd5b5061010b60048036038101906101069190611a09565b610572565b6040516101189190611a45565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190611a84565b6105ab565b60405161015591906116ef565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190611b05565b6109e4565b60405161019291906116ef565b60405180910390f35b3480156101a757600080fd5b506101b0610c52565b6040516101bd9190611b7b565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611a84565b610c6a565b6040516101fa91906116ef565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190611b96565b611117565b60405161023791906116ef565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161029d929190611be9565b6020604051808303816000875af11580156102bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e09190611c27565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103d29190611d1e565b6020604051808303816000875af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104159190611d4e565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047c57600080fd5b60005b815181101561056e5760008083838151811061049e5761049d611d7b565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168484815181106104d3576104d2611d7b565b5b6020026020010151602001518585815181106104f2576104f1611d7b565b5b60200260200101516040015160405161050b9190611e1b565b60006040518083038185875af1925050503d8060008114610548576040519150601f19603f3d011682016040523d82523d6000602084013e61054d565b606091505b5091509150816105615761056081611416565b5b505080600101905061047f565b5050565b6000818154811061058257600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008160000160208101906105c09190611e32565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b815260040161060093929190611e5f565b6020604051808303816000875af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190611c27565b5060008260200135905060008360000160208101906106629190611e32565b90506000805b8580604001906106789190611ea5565b90508110156109595760018680604001906106939190611ea5565b838181106106a4576106a3611d7b565b5b90506080020160000160208101906106bc9190611f41565b60ff16036107475761074084848880604001906106d99190611ea5565b858181106106ea576106e9611d7b565b5b90506080020160200160208101906107029190611e32565b8980604001906107129190611ea5565b8681811061072357610722611d7b565b5b905060800201604001602081019061073b9190611f6e565b610240565b9150610898565b60008680604001906107599190611ea5565b8381811061076a57610769611d7b565b5b90506080020160000160208101906107829190611f41565b60ff16036107d4576107cd848488806040019061079f9190611ea5565b858181106107b0576107af611d7b565b5b90506080020160200160208101906107c89190611e32565b611117565b9150610897565b60028680604001906107e69190611ea5565b838181106107f7576107f6611d7b565b5b905060800201600001602081019061080f9190611f41565b60ff160361089657610893848488806040019061082c9190611ea5565b8581811061083d5761083c611d7b565b5b90506080020160200160208101906108559190611e32565b8980604001906108659190611ea5565b8681811061087657610875611d7b565b5b905060800201606001602081019061088e9190611f9b565b6109e4565b91505b5b5b8193508580604001906108ab9190611ea5565b828181106108bc576108bb611d7b565b5b90506080020160200160208101906108d49190611e32565b925061094c6040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086611430565b8080600101915050610668565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610995929190611be9565b6020604051808303816000875af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190611c27565b50829350505050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610a41929190611be9565b6020604051808303816000875af1158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190611c27565b506000600167ffffffffffffffff811115610aa257610aa1611720565b5b604051908082528060200260200182016040528015610adb57816020015b610ac8611520565b815260200190600190039081610ac05790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525081600081518110610b5857610b57611d7b565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c42610bb49190611ff7565b6040518663ffffffff1660e01b8152600401610bd4959493929190612183565b6000604051808303816000875af1158015610bf3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c1c91906122a0565b90508060018251610c2d91906122e9565b81518110610c3e57610c3d611d7b565b5b602002602001015192505050949350505050565b731111111254eeb25477b68fb85ed929f73a96058281565b6000816000016020810190610c7f9190611e32565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b8152600401610cbf93929190611e5f565b6020604051808303816000875af1158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d029190611c27565b506000826020013590506000836000016020810190610d219190611e32565b905060005b848060400190610d369190611ea5565b905081101561108d576001858060400190610d519190611ea5565b83818110610d6257610d61611d7b565b5b9050608002016000016020810190610d7a9190611f41565b60ff1603610e0457610dfe8383878060400190610d979190611ea5565b85818110610da857610da7611d7b565b5b9050608002016020016020810190610dc09190611e32565b888060400190610dd09190611ea5565b86818110610de157610de0611d7b565b5b9050608002016040016020810190610df99190611f6e565b610240565b50610f53565b6000858060400190610e169190611ea5565b83818110610e2757610e26611d7b565b5b9050608002016000016020810190610e3f9190611f41565b60ff1603610e9057610e8a8383878060400190610e5c9190611ea5565b85818110610e6d57610e6c611d7b565b5b9050608002016020016020810190610e859190611e32565b611117565b50610f52565b6002858060400190610ea29190611ea5565b83818110610eb357610eb2611d7b565b5b9050608002016000016020810190610ecb9190611f41565b60ff1603610f5157610f4f8383878060400190610ee89190611ea5565b85818110610ef957610ef8611d7b565b5b9050608002016020016020810190610f119190611e32565b888060400190610f219190611ea5565b86818110610f3257610f31611d7b565b5b9050608002016060016020810190610f4a9190611f9b565b6109e4565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f8c9190611b7b565b602060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190611d4e565b9250848060400190610fdf9190611ea5565b82818110610ff057610fef611d7b565b5b90506080020160200160208101906110089190611e32565b91506110806040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525085611430565b8080600101915050610d26565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016110c9929190611be9565b6020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190611c27565b508192505050919050565b600080840361119d578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111599190611b7b565b602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190611d4e565b93505b6000600267ffffffffffffffff8111156111ba576111b9611720565b5b6040519080825280602002602001820160405280156111e85781602001602082028036833780820191505090505b5090508381600081518110611200576111ff611d7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061124f5761124e611d7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016112e4929190611be9565b6020604051808303816000875af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113279190611c27565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c426113799190611ff7565b6040518663ffffffff1660e01b8152600401611399959493929190612407565b6000604051808303816000875af11580156113b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113e191906122a0565b905080600182516113f291906122e9565b8151811061140357611402611d7b565b5b6020026020010151925050509392505050565b6000815190506000811161142957600080fd5b8082602001fd5b6114cc8484848460405160240161144a94939291906124b6565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d2565b50505050565b6114e9816114e16114ec611515565b63ffffffff16565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b61158c819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b611594612509565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6115bd816115aa565b81146115c857600080fd5b50565b6000813590506115da816115b4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061160b826115e0565b9050919050565b61161b81611600565b811461162657600080fd5b50565b60008135905061163881611612565b92915050565b600062ffffff82169050919050565b6116568161163e565b811461166157600080fd5b50565b6000813590506116738161164d565b92915050565b60008060008060808587031215611693576116926115a0565b5b60006116a1878288016115cb565b94505060206116b287828801611629565b93505060406116c387828801611629565b92505060606116d487828801611664565b91505092959194509250565b6116e9816115aa565b82525050565b600060208201905061170460008301846116e0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117588261170f565b810181811067ffffffffffffffff8211171561177757611776611720565b5b80604052505050565b600061178a611596565b9050611796828261174f565b919050565b600067ffffffffffffffff8211156117b6576117b5611720565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156117f6576117f5611720565b5b6117ff8261170f565b9050602081019050919050565b82818337600083830152505050565b600061182e611829846117db565b611780565b90508281526020810184848401111561184a576118496117d6565b5b61185584828561180c565b509392505050565b600082601f8301126118725761187161170a565b5b813561188284826020860161181b565b91505092915050565b6000606082840312156118a1576118a06117cc565b5b6118ab6060611780565b905060006118bb84828501611629565b60008301525060206118cf848285016115cb565b602083015250604082013567ffffffffffffffff8111156118f3576118f26117d1565b5b6118ff8482850161185d565b60408301525092915050565b600061191e6119198461179b565b611780565b90508083825260208201905060208402830185811115611941576119406117c7565b5b835b8181101561198857803567ffffffffffffffff8111156119665761196561170a565b5b808601611973898261188b565b85526020850194505050602081019050611943565b5050509392505050565b600082601f8301126119a7576119a661170a565b5b81356119b784826020860161190b565b91505092915050565b6000602082840312156119d6576119d56115a0565b5b600082013567ffffffffffffffff8111156119f4576119f36115a5565b5b611a0084828501611992565b91505092915050565b600060208284031215611a1f57611a1e6115a0565b5b6000611a2d848285016115cb565b91505092915050565b611a3f8161163e565b82525050565b6000602082019050611a5a6000830184611a36565b92915050565b600080fd5b600060608284031215611a7b57611a7a611a60565b5b81905092915050565b600060208284031215611a9a57611a996115a0565b5b600082013567ffffffffffffffff811115611ab857611ab76115a5565b5b611ac484828501611a65565b91505092915050565b60008115159050919050565b611ae281611acd565b8114611aed57600080fd5b50565b600081359050611aff81611ad9565b92915050565b60008060008060808587031215611b1f57611b1e6115a0565b5b6000611b2d878288016115cb565b9450506020611b3e87828801611629565b9350506040611b4f87828801611629565b9250506060611b6087828801611af0565b91505092959194509250565b611b7581611600565b82525050565b6000602082019050611b906000830184611b6c565b92915050565b600080600060608486031215611baf57611bae6115a0565b5b6000611bbd868287016115cb565b9350506020611bce86828701611629565b9250506040611bdf86828701611629565b9150509250925092565b6000604082019050611bfe6000830185611b6c565b611c0b60208301846116e0565b9392505050565b600081519050611c2181611ad9565b92915050565b600060208284031215611c3d57611c3c6115a0565b5b6000611c4b84828501611c12565b91505092915050565b611c5d81611600565b82525050565b611c6c8161163e565b82525050565b611c7b816115aa565b82525050565b611c8a816115e0565b82525050565b60e082016000820151611ca66000850182611c54565b506020820151611cb96020850182611c54565b506040820151611ccc6040850182611c63565b506060820151611cdf6060850182611c54565b506080820151611cf26080850182611c72565b5060a0820151611d0560a0850182611c72565b5060c0820151611d1860c0850182611c81565b50505050565b600060e082019050611d336000830184611c90565b92915050565b600081519050611d48816115b4565b92915050565b600060208284031215611d6457611d636115a0565b5b6000611d7284828501611d39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015611dde578082015181840152602081019050611dc3565b60008484015250505050565b6000611df582611daa565b611dff8185611db5565b9350611e0f818560208601611dc0565b80840191505092915050565b6000611e278284611dea565b915081905092915050565b600060208284031215611e4857611e476115a0565b5b6000611e5684828501611629565b91505092915050565b6000606082019050611e746000830186611b6c565b611e816020830185611b6c565b611e8e60408301846116e0565b949350505050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611ec257611ec1611e96565b5b80840192508235915067ffffffffffffffff821115611ee457611ee3611e9b565b5b602083019250608082023603831315611f0057611eff611ea0565b5b509250929050565b600060ff82169050919050565b611f1e81611f08565b8114611f2957600080fd5b50565b600081359050611f3b81611f15565b92915050565b600060208284031215611f5757611f566115a0565b5b6000611f6584828501611f2c565b91505092915050565b600060208284031215611f8457611f836115a0565b5b6000611f9284828501611664565b91505092915050565b600060208284031215611fb157611fb06115a0565b5b6000611fbf84828501611af0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612002826115aa565b915061200d836115aa565b925082820190508082111561202557612024611fc8565b5b92915050565b6000819050919050565b6000819050919050565b600061205a6120556120508461202b565b612035565b6115aa565b9050919050565b61206a8161203f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6120a581611acd565b82525050565b6080820160008201516120c16000850182611c54565b5060208201516120d46020850182611c54565b5060408201516120e7604085018261209c565b5060608201516120fa6060850182611c54565b50505050565b600061210c83836120ab565b60808301905092915050565b6000602082019050919050565b600061213082612070565b61213a818561207b565b93506121458361208c565b8060005b8381101561217657815161215d8882612100565b975061216883612118565b925050600181019050612149565b5085935050505092915050565b600060a08201905061219860008301886116e0565b6121a56020830187612061565b81810360408301526121b78186612125565b90506121c66060830185611b6c565b6121d360808301846116e0565b9695505050505050565b600067ffffffffffffffff8211156121f8576121f7611720565b5b602082029050602081019050919050565b600061221c612217846121dd565b611780565b9050808382526020820190506020840283018581111561223f5761223e6117c7565b5b835b8181101561226857806122548882611d39565b845260208401935050602081019050612241565b5050509392505050565b600082601f8301126122875761228661170a565b5b8151612297848260208601612209565b91505092915050565b6000602082840312156122b6576122b56115a0565b5b600082015167ffffffffffffffff8111156122d4576122d36115a5565b5b6122e084828501612272565b91505092915050565b60006122f4826115aa565b91506122ff836115aa565b925082820390508181111561231757612316611fc8565b5b92915050565b6000819050919050565b600061234261233d6123388461231d565b612035565b6115aa565b9050919050565b61235281612327565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006123908383611c54565b60208301905092915050565b6000602082019050919050565b60006123b482612358565b6123be8185612363565b93506123c983612374565b8060005b838110156123fa5781516123e18882612384565b97506123ec8361239c565b9250506001810190506123cd565b5085935050505092915050565b600060a08201905061241c60008301886116e0565b6124296020830187612349565b818103604083015261243b81866123a9565b905061244a6060830185611b6c565b61245760808301846116e0565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b600061248882612461565b612492818561246c565b93506124a2818560208601611dc0565b6124ab8161170f565b840191505092915050565b600060808201905081810360008301526124d0818761247d565b90506124df60208301866116e0565b81810360408301526124f1818561247d565b90506125006060830184611b6c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220acf869285d2726241dd4435f11fc45e373f7a1ee2f18d85c25a21741fbebcb6a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R`@Q\x80`\x80\x01`@R\x80`da\xFF\xFF\x16\x81R` \x01a\x01\xF4a\xFF\xFF\x16\x81R` \x01a\x0B\xB8a\xFF\xFF\x16\x81R` \x01a'\x10a\xFF\xFF\x16\x81RP`\0\x90`\x04a\0M\x92\x91\x90a\x01UV[P4\x80\x15a\0ZW`\0\x80\xFD[P`@Qa(\xA48\x03\x80a(\xA4\x839\x81\x81\x01`@R\x81\x01\x90a\0|\x91\x90a\x02\x81V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPPPPa\x02\xE8V[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90`\t\x01`\n\x90\x04\x81\x01\x92\x82\x15a\x01\xF0W\x91` \x02\x82\x01`\0[\x83\x82\x11\x15a\x01\xBFW\x83Q\x83\x82a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83a\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01~V[\x80\x15a\x01\xEEW\x82\x81a\x01\0\n\x81T\x90b\xFF\xFF\xFF\x02\x19\x16\x90U`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01\xBFV[P[P\x90Pa\x01\xFD\x91\x90a\x02\x01V[P\x90V[[\x80\x82\x11\x15a\x02\x1AW`\0\x81`\0\x90UP`\x01\x01a\x02\x02V[P\x90V[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x02N\x82a\x02#V[\x90P\x91\x90PV[a\x02^\x81a\x02CV[\x81\x14a\x02iW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x02{\x81a\x02UV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x02\x9BWa\x02\x9Aa\x02\x1EV[[`\0a\x02\xA9\x87\x82\x88\x01a\x02lV[\x94PP` a\x02\xBA\x87\x82\x88\x01a\x02lV[\x93PP`@a\x02\xCB\x87\x82\x88\x01a\x02lV[\x92PP``a\x02\xDC\x87\x82\x88\x01a\x02lV[\x91PP\x92\x95\x91\x94P\x92PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa%na\x036`\09`\0\x81\x81a\n\x04\x01Ra\x0Bg\x01R`\0\x81\x81a\x12\xA7\x01Ra\x13,\x01R`\0\x81\x81a\x02`\x01Ra\x03{\x01R`\0a\x04&\x01Ra%n`\0\xF3\xFE`\x80`@R`\x046\x10a\0\x7FW`\x005`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0NW\x80c\x88l\xDC\x9C\x14a\x01^W\x80c\xB1\x1D\xE7\xE3\x14a\x01\x9BW\x80c\xD1\x85V&\x14a\x01\xC6W\x80c\xF1\xA5%\x92\x14a\x02\x03Wa\0\x86V[\x80c\x07H\xB1\x9B\x14a\0\x8BW\x80c\x17I\xE1\xE3\x14a\0\xC8W\x80ck\x1B\x9B \x14a\0\xE4W\x80c\x821\xAB\x0B\x14a\x01!Wa\0\x86V[6a\0\x86W\0[`\0\x80\xFD[4\x80\x15a\0\x97W`\0\x80\xFD[Pa\0\xB2`\x04\x806\x03\x81\x01\x90a\0\xAD\x91\x90a\x16yV[a\x02@V[`@Qa\0\xBF\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[a\0\xE2`\x04\x806\x03\x81\x01\x90a\0\xDD\x91\x90a\x19\xC0V[a\x04$V[\0[4\x80\x15a\0\xF0W`\0\x80\xFD[Pa\x01\x0B`\x04\x806\x03\x81\x01\x90a\x01\x06\x91\x90a\x1A\tV[a\x05rV[`@Qa\x01\x18\x91\x90a\x1AEV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01-W`\0\x80\xFD[Pa\x01H`\x04\x806\x03\x81\x01\x90a\x01C\x91\x90a\x1A\x84V[a\x05\xABV[`@Qa\x01U\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01jW`\0\x80\xFD[Pa\x01\x85`\x04\x806\x03\x81\x01\x90a\x01\x80\x91\x90a\x1B\x05V[a\t\xE4V[`@Qa\x01\x92\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA7W`\0\x80\xFD[Pa\x01\xB0a\x0CRV[`@Qa\x01\xBD\x91\x90a\x1B{V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xD2W`\0\x80\xFD[Pa\x01\xED`\x04\x806\x03\x81\x01\x90a\x01\xE8\x91\x90a\x1A\x84V[a\x0CjV[`@Qa\x01\xFA\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x0FW`\0\x80\xFD[Pa\x02*`\x04\x806\x03\x81\x01\x90a\x02%\x91\x90a\x1B\x96V[a\x11\x17V[`@Qa\x027\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x9D\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xE0\x91\x90a\x1C'V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xD2\x91\x90a\x1D\x1EV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xF1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x15\x91\x90a\x1DNV[\x90P\x80\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04|W`\0\x80\xFD[`\0[\x81Q\x81\x10\x15a\x05nW`\0\x80\x83\x83\x81Q\x81\x10a\x04\x9EWa\x04\x9Da\x1D{V[[` \x02` \x01\x01Q`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x04\xD3Wa\x04\xD2a\x1D{V[[` \x02` \x01\x01Q` \x01Q\x85\x85\x81Q\x81\x10a\x04\xF2Wa\x04\xF1a\x1D{V[[` \x02` \x01\x01Q`@\x01Q`@Qa\x05\x0B\x91\x90a\x1E\x1BV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x05HW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05MV[``\x91P[P\x91P\x91P\x81a\x05aWa\x05`\x81a\x14\x16V[[PP\x80`\x01\x01\x90Pa\x04\x7FV[PPV[`\0\x81\x81T\x81\x10a\x05\x82W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x05\xC0\x91\x90a\x1E2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\0\x93\x92\x91\x90a\x1E_V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x06\x1FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06C\x91\x90a\x1C'V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\x06b\x91\x90a\x1E2V[\x90P`\0\x80[\x85\x80`@\x01\x90a\x06x\x91\x90a\x1E\xA5V[\x90P\x81\x10\x15a\tYW`\x01\x86\x80`@\x01\x90a\x06\x93\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x06\xA4Wa\x06\xA3a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x1FAV[`\xFF\x16\x03a\x07GWa\x07@\x84\x84\x88\x80`@\x01\x90a\x06\xD9\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x06\xEAWa\x06\xE9a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\x02\x91\x90a\x1E2V[\x89\x80`@\x01\x90a\x07\x12\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x07#Wa\x07\"a\x1D{V[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x07;\x91\x90a\x1FnV[a\x02@V[\x91Pa\x08\x98V[`\0\x86\x80`@\x01\x90a\x07Y\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x07jWa\x07ia\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x07\x82\x91\x90a\x1FAV[`\xFF\x16\x03a\x07\xD4Wa\x07\xCD\x84\x84\x88\x80`@\x01\x90a\x07\x9F\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x07\xB0Wa\x07\xAFa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\xC8\x91\x90a\x1E2V[a\x11\x17V[\x91Pa\x08\x97V[`\x02\x86\x80`@\x01\x90a\x07\xE6\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x07\xF7Wa\x07\xF6a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x08\x0F\x91\x90a\x1FAV[`\xFF\x16\x03a\x08\x96Wa\x08\x93\x84\x84\x88\x80`@\x01\x90a\x08,\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x08=Wa\x08<a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08U\x91\x90a\x1E2V[\x89\x80`@\x01\x90a\x08e\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x08vWa\x08ua\x1D{V[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x08\x8E\x91\x90a\x1F\x9BV[a\t\xE4V[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x08\xAB\x91\x90a\x1E\xA5V[\x82\x81\x81\x10a\x08\xBCWa\x08\xBBa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08\xD4\x91\x90a\x1E2V[\x92Pa\tL`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x140V[\x80\x80`\x01\x01\x91PPa\x06hV[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x95\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\xB4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD8\x91\x90a\x1C'V[P\x82\x93PPPP\x91\x90PV[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\nA\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\n`W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\x84\x91\x90a\x1C'V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xA2Wa\n\xA1a\x17 V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\n\xDBW\x81` \x01[a\n\xC8a\x15 V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n\xC0W\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\x0BXWa\x0BWa\x1D{V[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\x0B\xB4\x91\x90a\x1F\xF7V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\xD4\x95\x94\x93\x92\x91\x90a!\x83V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0B\xF3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x1C\x91\x90a\"\xA0V[\x90P\x80`\x01\x82Qa\x0C-\x91\x90a\"\xE9V[\x81Q\x81\x10a\x0C>Wa\x0C=a\x1D{V[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x0C\x7F\x91\x90a\x1E2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xBF\x93\x92\x91\x90a\x1E_V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C\xDEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x02\x91\x90a\x1C'V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\r!\x91\x90a\x1E2V[\x90P`\0[\x84\x80`@\x01\x90a\r6\x91\x90a\x1E\xA5V[\x90P\x81\x10\x15a\x10\x8DW`\x01\x85\x80`@\x01\x90a\rQ\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\rbWa\raa\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\rz\x91\x90a\x1FAV[`\xFF\x16\x03a\x0E\x04Wa\r\xFE\x83\x83\x87\x80`@\x01\x90a\r\x97\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\r\xA8Wa\r\xA7a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\r\xC0\x91\x90a\x1E2V[\x88\x80`@\x01\x90a\r\xD0\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\r\xE1Wa\r\xE0a\x1D{V[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\r\xF9\x91\x90a\x1FnV[a\x02@V[Pa\x0FSV[`\0\x85\x80`@\x01\x90a\x0E\x16\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x0E'Wa\x0E&a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x0E?\x91\x90a\x1FAV[`\xFF\x16\x03a\x0E\x90Wa\x0E\x8A\x83\x83\x87\x80`@\x01\x90a\x0E\\\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x0EmWa\x0Ela\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E\x85\x91\x90a\x1E2V[a\x11\x17V[Pa\x0FRV[`\x02\x85\x80`@\x01\x90a\x0E\xA2\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x0E\xB3Wa\x0E\xB2a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x0E\xCB\x91\x90a\x1FAV[`\xFF\x16\x03a\x0FQWa\x0FO\x83\x83\x87\x80`@\x01\x90a\x0E\xE8\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x0E\xF9Wa\x0E\xF8a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0F\x11\x91\x90a\x1E2V[\x88\x80`@\x01\x90a\x0F!\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x0F2Wa\x0F1a\x1D{V[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x0FJ\x91\x90a\x1F\x9BV[a\t\xE4V[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\x8C\x91\x90a\x1B{V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xA9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xCD\x91\x90a\x1DNV[\x92P\x84\x80`@\x01\x90a\x0F\xDF\x91\x90a\x1E\xA5V[\x82\x81\x81\x10a\x0F\xF0Wa\x0F\xEFa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x10\x08\x91\x90a\x1E2V[\x91Pa\x10\x80`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x140V[\x80\x80`\x01\x01\x91PPa\r&V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10\xC9\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x10\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x0C\x91\x90a\x1C'V[P\x81\x92PPP\x91\x90PV[`\0\x80\x84\x03a\x11\x9DW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11Y\x91\x90a\x1B{V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11vW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x9A\x91\x90a\x1DNV[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xBAWa\x11\xB9a\x17 V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11\xE8W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x12\0Wa\x11\xFFa\x1D{V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x12OWa\x12Na\x1D{V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x12\xE4\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x13\x03W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13'\x91\x90a\x1C'V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x13y\x91\x90a\x1F\xF7V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x13\x99\x95\x94\x93\x92\x91\x90a$\x07V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x13\xB8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\xE1\x91\x90a\"\xA0V[\x90P\x80`\x01\x82Qa\x13\xF2\x91\x90a\"\xE9V[\x81Q\x81\x10a\x14\x03Wa\x14\x02a\x1D{V[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[`\0\x81Q\x90P`\0\x81\x11a\x14)W`\0\x80\xFD[\x80\x82` \x01\xFD[a\x14\xCC\x84\x84\x84\x84`@Q`$\x01a\x14J\x94\x93\x92\x91\x90a$\xB6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x14\xD2V[PPPPV[a\x14\xE9\x81a\x14\xE1a\x14\xECa\x15\x15V[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x15\x8C\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x15\x94a%\tV[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x15\xBD\x81a\x15\xAAV[\x81\x14a\x15\xC8W`\0\x80\xFD[PV[`\0\x815\x90Pa\x15\xDA\x81a\x15\xB4V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x16\x0B\x82a\x15\xE0V[\x90P\x91\x90PV[a\x16\x1B\x81a\x16\0V[\x81\x14a\x16&W`\0\x80\xFD[PV[`\0\x815\x90Pa\x168\x81a\x16\x12V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x16V\x81a\x16>V[\x81\x14a\x16aW`\0\x80\xFD[PV[`\0\x815\x90Pa\x16s\x81a\x16MV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x16\x93Wa\x16\x92a\x15\xA0V[[`\0a\x16\xA1\x87\x82\x88\x01a\x15\xCBV[\x94PP` a\x16\xB2\x87\x82\x88\x01a\x16)V[\x93PP`@a\x16\xC3\x87\x82\x88\x01a\x16)V[\x92PP``a\x16\xD4\x87\x82\x88\x01a\x16dV[\x91PP\x92\x95\x91\x94P\x92PV[a\x16\xE9\x81a\x15\xAAV[\x82RPPV[`\0` \x82\x01\x90Pa\x17\x04`\0\x83\x01\x84a\x16\xE0V[\x92\x91PPV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x17X\x82a\x17\x0FV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x17wWa\x17va\x17 V[[\x80`@RPPPV[`\0a\x17\x8Aa\x15\x96V[\x90Pa\x17\x96\x82\x82a\x17OV[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xB6Wa\x17\xB5a\x17 V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xF6Wa\x17\xF5a\x17 V[[a\x17\xFF\x82a\x17\x0FV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x18.a\x18)\x84a\x17\xDBV[a\x17\x80V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x18JWa\x18Ia\x17\xD6V[[a\x18U\x84\x82\x85a\x18\x0CV[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18rWa\x18qa\x17\nV[[\x815a\x18\x82\x84\x82` \x86\x01a\x18\x1BV[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a\x18\xA1Wa\x18\xA0a\x17\xCCV[[a\x18\xAB``a\x17\x80V[\x90P`\0a\x18\xBB\x84\x82\x85\x01a\x16)V[`\0\x83\x01RP` a\x18\xCF\x84\x82\x85\x01a\x15\xCBV[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xF3Wa\x18\xF2a\x17\xD1V[[a\x18\xFF\x84\x82\x85\x01a\x18]V[`@\x83\x01RP\x92\x91PPV[`\0a\x19\x1Ea\x19\x19\x84a\x17\x9BV[a\x17\x80V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x19AWa\x19@a\x17\xC7V[[\x83[\x81\x81\x10\x15a\x19\x88W\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19fWa\x19ea\x17\nV[[\x80\x86\x01a\x19s\x89\x82a\x18\x8BV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x19CV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x19\xA7Wa\x19\xA6a\x17\nV[[\x815a\x19\xB7\x84\x82` \x86\x01a\x19\x0BV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x19\xD6Wa\x19\xD5a\x15\xA0V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xF4Wa\x19\xF3a\x15\xA5V[[a\x1A\0\x84\x82\x85\x01a\x19\x92V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1A\x1FWa\x1A\x1Ea\x15\xA0V[[`\0a\x1A-\x84\x82\x85\x01a\x15\xCBV[\x91PP\x92\x91PPV[a\x1A?\x81a\x16>V[\x82RPPV[`\0` \x82\x01\x90Pa\x1AZ`\0\x83\x01\x84a\x1A6V[\x92\x91PPV[`\0\x80\xFD[`\0``\x82\x84\x03\x12\x15a\x1A{Wa\x1Aza\x1A`V[[\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1A\x9AWa\x1A\x99a\x15\xA0V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xB8Wa\x1A\xB7a\x15\xA5V[[a\x1A\xC4\x84\x82\x85\x01a\x1AeV[\x91PP\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x1A\xE2\x81a\x1A\xCDV[\x81\x14a\x1A\xEDW`\0\x80\xFD[PV[`\0\x815\x90Pa\x1A\xFF\x81a\x1A\xD9V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x1B\x1FWa\x1B\x1Ea\x15\xA0V[[`\0a\x1B-\x87\x82\x88\x01a\x15\xCBV[\x94PP` a\x1B>\x87\x82\x88\x01a\x16)V[\x93PP`@a\x1BO\x87\x82\x88\x01a\x16)V[\x92PP``a\x1B`\x87\x82\x88\x01a\x1A\xF0V[\x91PP\x92\x95\x91\x94P\x92PV[a\x1Bu\x81a\x16\0V[\x82RPPV[`\0` \x82\x01\x90Pa\x1B\x90`\0\x83\x01\x84a\x1BlV[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1B\xAFWa\x1B\xAEa\x15\xA0V[[`\0a\x1B\xBD\x86\x82\x87\x01a\x15\xCBV[\x93PP` a\x1B\xCE\x86\x82\x87\x01a\x16)V[\x92PP`@a\x1B\xDF\x86\x82\x87\x01a\x16)V[\x91PP\x92P\x92P\x92V[`\0`@\x82\x01\x90Pa\x1B\xFE`\0\x83\x01\x85a\x1BlV[a\x1C\x0B` \x83\x01\x84a\x16\xE0V[\x93\x92PPPV[`\0\x81Q\x90Pa\x1C!\x81a\x1A\xD9V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C=Wa\x1C<a\x15\xA0V[[`\0a\x1CK\x84\x82\x85\x01a\x1C\x12V[\x91PP\x92\x91PPV[a\x1C]\x81a\x16\0V[\x82RPPV[a\x1Cl\x81a\x16>V[\x82RPPV[a\x1C{\x81a\x15\xAAV[\x82RPPV[a\x1C\x8A\x81a\x15\xE0V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x1C\xA6`\0\x85\x01\x82a\x1CTV[P` \x82\x01Qa\x1C\xB9` \x85\x01\x82a\x1CTV[P`@\x82\x01Qa\x1C\xCC`@\x85\x01\x82a\x1CcV[P``\x82\x01Qa\x1C\xDF``\x85\x01\x82a\x1CTV[P`\x80\x82\x01Qa\x1C\xF2`\x80\x85\x01\x82a\x1CrV[P`\xA0\x82\x01Qa\x1D\x05`\xA0\x85\x01\x82a\x1CrV[P`\xC0\x82\x01Qa\x1D\x18`\xC0\x85\x01\x82a\x1C\x81V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x1D3`\0\x83\x01\x84a\x1C\x90V[\x92\x91PPV[`\0\x81Q\x90Pa\x1DH\x81a\x15\xB4V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1DdWa\x1Dca\x15\xA0V[[`\0a\x1Dr\x84\x82\x85\x01a\x1D9V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x1D\xDEW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xC3V[`\0\x84\x84\x01RPPPPV[`\0a\x1D\xF5\x82a\x1D\xAAV[a\x1D\xFF\x81\x85a\x1D\xB5V[\x93Pa\x1E\x0F\x81\x85` \x86\x01a\x1D\xC0V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1E'\x82\x84a\x1D\xEAV[\x91P\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1EHWa\x1EGa\x15\xA0V[[`\0a\x1EV\x84\x82\x85\x01a\x16)V[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x1Et`\0\x83\x01\x86a\x1BlV[a\x1E\x81` \x83\x01\x85a\x1BlV[a\x1E\x8E`@\x83\x01\x84a\x16\xE0V[\x94\x93PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1E\xC2Wa\x1E\xC1a\x1E\x96V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1E\xE4Wa\x1E\xE3a\x1E\x9BV[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1F\0Wa\x1E\xFFa\x1E\xA0V[[P\x92P\x92\x90PV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x1F\x1E\x81a\x1F\x08V[\x81\x14a\x1F)W`\0\x80\xFD[PV[`\0\x815\x90Pa\x1F;\x81a\x1F\x15V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1FWWa\x1FVa\x15\xA0V[[`\0a\x1Fe\x84\x82\x85\x01a\x1F,V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1F\x84Wa\x1F\x83a\x15\xA0V[[`\0a\x1F\x92\x84\x82\x85\x01a\x16dV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1F\xB1Wa\x1F\xB0a\x15\xA0V[[`\0a\x1F\xBF\x84\x82\x85\x01a\x1A\xF0V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a \x02\x82a\x15\xAAV[\x91Pa \r\x83a\x15\xAAV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a %Wa $a\x1F\xC8V[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a Za Ua P\x84a +V[a 5V[a\x15\xAAV[\x90P\x91\x90PV[a j\x81a ?V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a \xA5\x81a\x1A\xCDV[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa \xC1`\0\x85\x01\x82a\x1CTV[P` \x82\x01Qa \xD4` \x85\x01\x82a\x1CTV[P`@\x82\x01Qa \xE7`@\x85\x01\x82a \x9CV[P``\x82\x01Qa \xFA``\x85\x01\x82a\x1CTV[PPPPV[`\0a!\x0C\x83\x83a \xABV[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a!0\x82a pV[a!:\x81\x85a {V[\x93Pa!E\x83a \x8CV[\x80`\0[\x83\x81\x10\x15a!vW\x81Qa!]\x88\x82a!\0V[\x97Pa!h\x83a!\x18V[\x92PP`\x01\x81\x01\x90Pa!IV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa!\x98`\0\x83\x01\x88a\x16\xE0V[a!\xA5` \x83\x01\x87a aV[\x81\x81\x03`@\x83\x01Ra!\xB7\x81\x86a!%V[\x90Pa!\xC6``\x83\x01\x85a\x1BlV[a!\xD3`\x80\x83\x01\x84a\x16\xE0V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\xF8Wa!\xF7a\x17 V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a\"\x1Ca\"\x17\x84a!\xDDV[a\x17\x80V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\"?Wa\">a\x17\xC7V[[\x83[\x81\x81\x10\x15a\"hW\x80a\"T\x88\x82a\x1D9V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\"AV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\"\x87Wa\"\x86a\x17\nV[[\x81Qa\"\x97\x84\x82` \x86\x01a\"\tV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\"\xB6Wa\"\xB5a\x15\xA0V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xD4Wa\"\xD3a\x15\xA5V[[a\"\xE0\x84\x82\x85\x01a\"rV[\x91PP\x92\x91PPV[`\0a\"\xF4\x82a\x15\xAAV[\x91Pa\"\xFF\x83a\x15\xAAV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a#\x17Wa#\x16a\x1F\xC8V[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a#Ba#=a#8\x84a#\x1DV[a 5V[a\x15\xAAV[\x90P\x91\x90PV[a#R\x81a#'V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a#\x90\x83\x83a\x1CTV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a#\xB4\x82a#XV[a#\xBE\x81\x85a#cV[\x93Pa#\xC9\x83a#tV[\x80`\0[\x83\x81\x10\x15a#\xFAW\x81Qa#\xE1\x88\x82a#\x84V[\x97Pa#\xEC\x83a#\x9CV[\x92PP`\x01\x81\x01\x90Pa#\xCDV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa$\x1C`\0\x83\x01\x88a\x16\xE0V[a$)` \x83\x01\x87a#IV[\x81\x81\x03`@\x83\x01Ra$;\x81\x86a#\xA9V[\x90Pa$J``\x83\x01\x85a\x1BlV[a$W`\x80\x83\x01\x84a\x16\xE0V[\x96\x95PPPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0a$\x88\x82a$aV[a$\x92\x81\x85a$lV[\x93Pa$\xA2\x81\x85` \x86\x01a\x1D\xC0V[a$\xAB\x81a\x17\x0FV[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra$\xD0\x81\x87a$}V[\x90Pa$\xDF` \x83\x01\x86a\x16\xE0V[\x81\x81\x03`@\x83\x01Ra$\xF1\x81\x85a$}V[\x90Pa%\0``\x83\x01\x84a\x1BlV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xAC\xF8i(]'&$\x1D\xD4C_\x11\xFCE\xE3s\xF7\xA1\xEE/\x18\xD8\\%\xA2\x17A\xFB\xEB\xCBjdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061007f5760003560e01c8063886cdc9c1161004e578063886cdc9c1461015e578063b11de7e31461019b578063d1855626146101c6578063f1a525921461020357610086565b80630748b19b1461008b5780631749e1e3146100c85780636b1b9b20146100e45780638231ab0b1461012157610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611679565b610240565b6040516100bf91906116ef565b60405180910390f35b6100e260048036038101906100dd91906119c0565b610424565b005b3480156100f057600080fd5b5061010b60048036038101906101069190611a09565b610572565b6040516101189190611a45565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190611a84565b6105ab565b60405161015591906116ef565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190611b05565b6109e4565b60405161019291906116ef565b60405180910390f35b3480156101a757600080fd5b506101b0610c52565b6040516101bd9190611b7b565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611a84565b610c6a565b6040516101fa91906116ef565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190611b96565b611117565b60405161023791906116ef565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161029d929190611be9565b6020604051808303816000875af11580156102bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e09190611c27565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b81526004016103d29190611d1e565b6020604051808303816000875af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104159190611d4e565b90508092505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047c57600080fd5b60005b815181101561056e5760008083838151811061049e5761049d611d7b565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168484815181106104d3576104d2611d7b565b5b6020026020010151602001518585815181106104f2576104f1611d7b565b5b60200260200101516040015160405161050b9190611e1b565b60006040518083038185875af1925050503d8060008114610548576040519150601f19603f3d011682016040523d82523d6000602084013e61054d565b606091505b5091509150816105615761056081611416565b5b505080600101905061047f565b5050565b6000818154811061058257600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008160000160208101906105c09190611e32565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b815260040161060093929190611e5f565b6020604051808303816000875af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190611c27565b5060008260200135905060008360000160208101906106629190611e32565b90506000805b8580604001906106789190611ea5565b90508110156109595760018680604001906106939190611ea5565b838181106106a4576106a3611d7b565b5b90506080020160000160208101906106bc9190611f41565b60ff16036107475761074084848880604001906106d99190611ea5565b858181106106ea576106e9611d7b565b5b90506080020160200160208101906107029190611e32565b8980604001906107129190611ea5565b8681811061072357610722611d7b565b5b905060800201604001602081019061073b9190611f6e565b610240565b9150610898565b60008680604001906107599190611ea5565b8381811061076a57610769611d7b565b5b90506080020160000160208101906107829190611f41565b60ff16036107d4576107cd848488806040019061079f9190611ea5565b858181106107b0576107af611d7b565b5b90506080020160200160208101906107c89190611e32565b611117565b9150610897565b60028680604001906107e69190611ea5565b838181106107f7576107f6611d7b565b5b905060800201600001602081019061080f9190611f41565b60ff160361089657610893848488806040019061082c9190611ea5565b8581811061083d5761083c611d7b565b5b90506080020160200160208101906108559190611e32565b8980604001906108659190611ea5565b8681811061087657610875611d7b565b5b905060800201606001602081019061088e9190611f9b565b6109e4565b91505b5b5b8193508580604001906108ab9190611ea5565b828181106108bc576108bb611d7b565b5b90506080020160200160208101906108d49190611e32565b925061094c6040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086611430565b8080600101915050610668565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610995929190611be9565b6020604051808303816000875af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190611c27565b50829350505050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610a41929190611be9565b6020604051808303816000875af1158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190611c27565b506000600167ffffffffffffffff811115610aa257610aa1611720565b5b604051908082528060200260200182016040528015610adb57816020015b610ac8611520565b815260200190600190039081610ac05790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525081600081518110610b5857610b57611d7b565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c42610bb49190611ff7565b6040518663ffffffff1660e01b8152600401610bd4959493929190612183565b6000604051808303816000875af1158015610bf3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c1c91906122a0565b90508060018251610c2d91906122e9565b81518110610c3e57610c3d611d7b565b5b602002602001015192505050949350505050565b731111111254eeb25477b68fb85ed929f73a96058281565b6000816000016020810190610c7f9190611e32565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd333085602001356040518463ffffffff1660e01b8152600401610cbf93929190611e5f565b6020604051808303816000875af1158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d029190611c27565b506000826020013590506000836000016020810190610d219190611e32565b905060005b848060400190610d369190611ea5565b905081101561108d576001858060400190610d519190611ea5565b83818110610d6257610d61611d7b565b5b9050608002016000016020810190610d7a9190611f41565b60ff1603610e0457610dfe8383878060400190610d979190611ea5565b85818110610da857610da7611d7b565b5b9050608002016020016020810190610dc09190611e32565b888060400190610dd09190611ea5565b86818110610de157610de0611d7b565b5b9050608002016040016020810190610df99190611f6e565b610240565b50610f53565b6000858060400190610e169190611ea5565b83818110610e2757610e26611d7b565b5b9050608002016000016020810190610e3f9190611f41565b60ff1603610e9057610e8a8383878060400190610e5c9190611ea5565b85818110610e6d57610e6c611d7b565b5b9050608002016020016020810190610e859190611e32565b611117565b50610f52565b6002858060400190610ea29190611ea5565b83818110610eb357610eb2611d7b565b5b9050608002016000016020810190610ecb9190611f41565b60ff1603610f5157610f4f8383878060400190610ee89190611ea5565b85818110610ef957610ef8611d7b565b5b9050608002016020016020810190610f119190611e32565b888060400190610f219190611ea5565b86818110610f3257610f31611d7b565b5b9050608002016060016020810190610f4a9190611f9b565b6109e4565b505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f8c9190611b7b565b602060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190611d4e565b9250848060400190610fdf9190611ea5565b82818110610ff057610fef611d7b565b5b90506080020160200160208101906110089190611e32565b91506110806040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250846040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525085611430565b8080600101915050610d26565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016110c9929190611be9565b6020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c9190611c27565b508192505050919050565b600080840361119d578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111599190611b7b565b602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190611d4e565b93505b6000600267ffffffffffffffff8111156111ba576111b9611720565b5b6040519080825280602002602001820160405280156111e85781602001602082028036833780820191505090505b5090508381600081518110611200576111ff611d7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061124f5761124e611d7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016112e4929190611be9565b6020604051808303816000875af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113279190611c27565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c426113799190611ff7565b6040518663ffffffff1660e01b8152600401611399959493929190612407565b6000604051808303816000875af11580156113b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113e191906122a0565b905080600182516113f291906122e9565b8151811061140357611402611d7b565b5b6020026020010151925050509392505050565b6000815190506000811161142957600080fd5b8082602001fd5b6114cc8484848460405160240161144a94939291906124b6565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d2565b50505050565b6114e9816114e16114ec611515565b63ffffffff16565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b61158c819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b611594612509565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6115bd816115aa565b81146115c857600080fd5b50565b6000813590506115da816115b4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061160b826115e0565b9050919050565b61161b81611600565b811461162657600080fd5b50565b60008135905061163881611612565b92915050565b600062ffffff82169050919050565b6116568161163e565b811461166157600080fd5b50565b6000813590506116738161164d565b92915050565b60008060008060808587031215611693576116926115a0565b5b60006116a1878288016115cb565b94505060206116b287828801611629565b93505060406116c387828801611629565b92505060606116d487828801611664565b91505092959194509250565b6116e9816115aa565b82525050565b600060208201905061170460008301846116e0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117588261170f565b810181811067ffffffffffffffff8211171561177757611776611720565b5b80604052505050565b600061178a611596565b9050611796828261174f565b919050565b600067ffffffffffffffff8211156117b6576117b5611720565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156117f6576117f5611720565b5b6117ff8261170f565b9050602081019050919050565b82818337600083830152505050565b600061182e611829846117db565b611780565b90508281526020810184848401111561184a576118496117d6565b5b61185584828561180c565b509392505050565b600082601f8301126118725761187161170a565b5b813561188284826020860161181b565b91505092915050565b6000606082840312156118a1576118a06117cc565b5b6118ab6060611780565b905060006118bb84828501611629565b60008301525060206118cf848285016115cb565b602083015250604082013567ffffffffffffffff8111156118f3576118f26117d1565b5b6118ff8482850161185d565b60408301525092915050565b600061191e6119198461179b565b611780565b90508083825260208201905060208402830185811115611941576119406117c7565b5b835b8181101561198857803567ffffffffffffffff8111156119665761196561170a565b5b808601611973898261188b565b85526020850194505050602081019050611943565b5050509392505050565b600082601f8301126119a7576119a661170a565b5b81356119b784826020860161190b565b91505092915050565b6000602082840312156119d6576119d56115a0565b5b600082013567ffffffffffffffff8111156119f4576119f36115a5565b5b611a0084828501611992565b91505092915050565b600060208284031215611a1f57611a1e6115a0565b5b6000611a2d848285016115cb565b91505092915050565b611a3f8161163e565b82525050565b6000602082019050611a5a6000830184611a36565b92915050565b600080fd5b600060608284031215611a7b57611a7a611a60565b5b81905092915050565b600060208284031215611a9a57611a996115a0565b5b600082013567ffffffffffffffff811115611ab857611ab76115a5565b5b611ac484828501611a65565b91505092915050565b60008115159050919050565b611ae281611acd565b8114611aed57600080fd5b50565b600081359050611aff81611ad9565b92915050565b60008060008060808587031215611b1f57611b1e6115a0565b5b6000611b2d878288016115cb565b9450506020611b3e87828801611629565b9350506040611b4f87828801611629565b9250506060611b6087828801611af0565b91505092959194509250565b611b7581611600565b82525050565b6000602082019050611b906000830184611b6c565b92915050565b600080600060608486031215611baf57611bae6115a0565b5b6000611bbd868287016115cb565b9350506020611bce86828701611629565b9250506040611bdf86828701611629565b9150509250925092565b6000604082019050611bfe6000830185611b6c565b611c0b60208301846116e0565b9392505050565b600081519050611c2181611ad9565b92915050565b600060208284031215611c3d57611c3c6115a0565b5b6000611c4b84828501611c12565b91505092915050565b611c5d81611600565b82525050565b611c6c8161163e565b82525050565b611c7b816115aa565b82525050565b611c8a816115e0565b82525050565b60e082016000820151611ca66000850182611c54565b506020820151611cb96020850182611c54565b506040820151611ccc6040850182611c63565b506060820151611cdf6060850182611c54565b506080820151611cf26080850182611c72565b5060a0820151611d0560a0850182611c72565b5060c0820151611d1860c0850182611c81565b50505050565b600060e082019050611d336000830184611c90565b92915050565b600081519050611d48816115b4565b92915050565b600060208284031215611d6457611d636115a0565b5b6000611d7284828501611d39565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015611dde578082015181840152602081019050611dc3565b60008484015250505050565b6000611df582611daa565b611dff8185611db5565b9350611e0f818560208601611dc0565b80840191505092915050565b6000611e278284611dea565b915081905092915050565b600060208284031215611e4857611e476115a0565b5b6000611e5684828501611629565b91505092915050565b6000606082019050611e746000830186611b6c565b611e816020830185611b6c565b611e8e60408301846116e0565b949350505050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611ec257611ec1611e96565b5b80840192508235915067ffffffffffffffff821115611ee457611ee3611e9b565b5b602083019250608082023603831315611f0057611eff611ea0565b5b509250929050565b600060ff82169050919050565b611f1e81611f08565b8114611f2957600080fd5b50565b600081359050611f3b81611f15565b92915050565b600060208284031215611f5757611f566115a0565b5b6000611f6584828501611f2c565b91505092915050565b600060208284031215611f8457611f836115a0565b5b6000611f9284828501611664565b91505092915050565b600060208284031215611fb157611fb06115a0565b5b6000611fbf84828501611af0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612002826115aa565b915061200d836115aa565b925082820190508082111561202557612024611fc8565b5b92915050565b6000819050919050565b6000819050919050565b600061205a6120556120508461202b565b612035565b6115aa565b9050919050565b61206a8161203f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6120a581611acd565b82525050565b6080820160008201516120c16000850182611c54565b5060208201516120d46020850182611c54565b5060408201516120e7604085018261209c565b5060608201516120fa6060850182611c54565b50505050565b600061210c83836120ab565b60808301905092915050565b6000602082019050919050565b600061213082612070565b61213a818561207b565b93506121458361208c565b8060005b8381101561217657815161215d8882612100565b975061216883612118565b925050600181019050612149565b5085935050505092915050565b600060a08201905061219860008301886116e0565b6121a56020830187612061565b81810360408301526121b78186612125565b90506121c66060830185611b6c565b6121d360808301846116e0565b9695505050505050565b600067ffffffffffffffff8211156121f8576121f7611720565b5b602082029050602081019050919050565b600061221c612217846121dd565b611780565b9050808382526020820190506020840283018581111561223f5761223e6117c7565b5b835b8181101561226857806122548882611d39565b845260208401935050602081019050612241565b5050509392505050565b600082601f8301126122875761228661170a565b5b8151612297848260208601612209565b91505092915050565b6000602082840312156122b6576122b56115a0565b5b600082015167ffffffffffffffff8111156122d4576122d36115a5565b5b6122e084828501612272565b91505092915050565b60006122f4826115aa565b91506122ff836115aa565b925082820390508181111561231757612316611fc8565b5b92915050565b6000819050919050565b600061234261233d6123388461231d565b612035565b6115aa565b9050919050565b61235281612327565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006123908383611c54565b60208301905092915050565b6000602082019050919050565b60006123b482612358565b6123be8185612363565b93506123c983612374565b8060005b838110156123fa5781516123e18882612384565b97506123ec8361239c565b9250506001810190506123cd565b5085935050505092915050565b600060a08201905061241c60008301886116e0565b6124296020830187612349565b818103604083015261243b81866123a9565b905061244a6060830185611b6c565b61245760808301846116e0565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b600061248882612461565b612492818561246c565b93506124a2818560208601611dc0565b6124ab8161170f565b840191505092915050565b600060808201905081810360008301526124d0818761247d565b90506124df60208301866116e0565b81810360408301526124f1818561247d565b90506125006060830184611b6c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220acf869285d2726241dd4435f11fc45e373f7a1ee2f18d85c25a21741fbebcb6a64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x7FW`\x005`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0NW\x80c\x88l\xDC\x9C\x14a\x01^W\x80c\xB1\x1D\xE7\xE3\x14a\x01\x9BW\x80c\xD1\x85V&\x14a\x01\xC6W\x80c\xF1\xA5%\x92\x14a\x02\x03Wa\0\x86V[\x80c\x07H\xB1\x9B\x14a\0\x8BW\x80c\x17I\xE1\xE3\x14a\0\xC8W\x80ck\x1B\x9B \x14a\0\xE4W\x80c\x821\xAB\x0B\x14a\x01!Wa\0\x86V[6a\0\x86W\0[`\0\x80\xFD[4\x80\x15a\0\x97W`\0\x80\xFD[Pa\0\xB2`\x04\x806\x03\x81\x01\x90a\0\xAD\x91\x90a\x16yV[a\x02@V[`@Qa\0\xBF\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[a\0\xE2`\x04\x806\x03\x81\x01\x90a\0\xDD\x91\x90a\x19\xC0V[a\x04$V[\0[4\x80\x15a\0\xF0W`\0\x80\xFD[Pa\x01\x0B`\x04\x806\x03\x81\x01\x90a\x01\x06\x91\x90a\x1A\tV[a\x05rV[`@Qa\x01\x18\x91\x90a\x1AEV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01-W`\0\x80\xFD[Pa\x01H`\x04\x806\x03\x81\x01\x90a\x01C\x91\x90a\x1A\x84V[a\x05\xABV[`@Qa\x01U\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01jW`\0\x80\xFD[Pa\x01\x85`\x04\x806\x03\x81\x01\x90a\x01\x80\x91\x90a\x1B\x05V[a\t\xE4V[`@Qa\x01\x92\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA7W`\0\x80\xFD[Pa\x01\xB0a\x0CRV[`@Qa\x01\xBD\x91\x90a\x1B{V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xD2W`\0\x80\xFD[Pa\x01\xED`\x04\x806\x03\x81\x01\x90a\x01\xE8\x91\x90a\x1A\x84V[a\x0CjV[`@Qa\x01\xFA\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x0FW`\0\x80\xFD[Pa\x02*`\x04\x806\x03\x81\x01\x90a\x02%\x91\x90a\x1B\x96V[a\x11\x17V[`@Qa\x027\x91\x90a\x16\xEFV[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x9D\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02\xBCW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xE0\x91\x90a\x1C'V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xD2\x91\x90a\x1D\x1EV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xF1W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x15\x91\x90a\x1DNV[\x90P\x80\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04|W`\0\x80\xFD[`\0[\x81Q\x81\x10\x15a\x05nW`\0\x80\x83\x83\x81Q\x81\x10a\x04\x9EWa\x04\x9Da\x1D{V[[` \x02` \x01\x01Q`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x04\xD3Wa\x04\xD2a\x1D{V[[` \x02` \x01\x01Q` \x01Q\x85\x85\x81Q\x81\x10a\x04\xF2Wa\x04\xF1a\x1D{V[[` \x02` \x01\x01Q`@\x01Q`@Qa\x05\x0B\x91\x90a\x1E\x1BV[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x05HW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05MV[``\x91P[P\x91P\x91P\x81a\x05aWa\x05`\x81a\x14\x16V[[PP\x80`\x01\x01\x90Pa\x04\x7FV[PPV[`\0\x81\x81T\x81\x10a\x05\x82W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x05\xC0\x91\x90a\x1E2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\0\x93\x92\x91\x90a\x1E_V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x06\x1FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06C\x91\x90a\x1C'V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\x06b\x91\x90a\x1E2V[\x90P`\0\x80[\x85\x80`@\x01\x90a\x06x\x91\x90a\x1E\xA5V[\x90P\x81\x10\x15a\tYW`\x01\x86\x80`@\x01\x90a\x06\x93\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x06\xA4Wa\x06\xA3a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x1FAV[`\xFF\x16\x03a\x07GWa\x07@\x84\x84\x88\x80`@\x01\x90a\x06\xD9\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x06\xEAWa\x06\xE9a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\x02\x91\x90a\x1E2V[\x89\x80`@\x01\x90a\x07\x12\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x07#Wa\x07\"a\x1D{V[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\x07;\x91\x90a\x1FnV[a\x02@V[\x91Pa\x08\x98V[`\0\x86\x80`@\x01\x90a\x07Y\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x07jWa\x07ia\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x07\x82\x91\x90a\x1FAV[`\xFF\x16\x03a\x07\xD4Wa\x07\xCD\x84\x84\x88\x80`@\x01\x90a\x07\x9F\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x07\xB0Wa\x07\xAFa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x07\xC8\x91\x90a\x1E2V[a\x11\x17V[\x91Pa\x08\x97V[`\x02\x86\x80`@\x01\x90a\x07\xE6\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x07\xF7Wa\x07\xF6a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x08\x0F\x91\x90a\x1FAV[`\xFF\x16\x03a\x08\x96Wa\x08\x93\x84\x84\x88\x80`@\x01\x90a\x08,\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x08=Wa\x08<a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08U\x91\x90a\x1E2V[\x89\x80`@\x01\x90a\x08e\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x08vWa\x08ua\x1D{V[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x08\x8E\x91\x90a\x1F\x9BV[a\t\xE4V[\x91P[[[\x81\x93P\x85\x80`@\x01\x90a\x08\xAB\x91\x90a\x1E\xA5V[\x82\x81\x81\x10a\x08\xBCWa\x08\xBBa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x08\xD4\x91\x90a\x1E2V[\x92Pa\tL`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\x140V[\x80\x80`\x01\x01\x91PPa\x06hV[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x95\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\xB4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD8\x91\x90a\x1C'V[P\x82\x93PPPP\x91\x90PV[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\nA\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\n`W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\x84\x91\x90a\x1C'V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xA2Wa\n\xA1a\x17 V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\n\xDBW\x81` \x01[a\n\xC8a\x15 V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n\xC0W\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\x0BXWa\x0BWa\x1D{V[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\x0B\xB4\x91\x90a\x1F\xF7V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\xD4\x95\x94\x93\x92\x91\x90a!\x83V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0B\xF3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x1C\x91\x90a\"\xA0V[\x90P\x80`\x01\x82Qa\x0C-\x91\x90a\"\xE9V[\x81Q\x81\x10a\x0C>Wa\x0C=a\x1D{V[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x81`\0\x01` \x81\x01\x90a\x0C\x7F\x91\x90a\x1E2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x85` \x015`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xBF\x93\x92\x91\x90a\x1E_V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C\xDEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x02\x91\x90a\x1C'V[P`\0\x82` \x015\x90P`\0\x83`\0\x01` \x81\x01\x90a\r!\x91\x90a\x1E2V[\x90P`\0[\x84\x80`@\x01\x90a\r6\x91\x90a\x1E\xA5V[\x90P\x81\x10\x15a\x10\x8DW`\x01\x85\x80`@\x01\x90a\rQ\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\rbWa\raa\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\rz\x91\x90a\x1FAV[`\xFF\x16\x03a\x0E\x04Wa\r\xFE\x83\x83\x87\x80`@\x01\x90a\r\x97\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\r\xA8Wa\r\xA7a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\r\xC0\x91\x90a\x1E2V[\x88\x80`@\x01\x90a\r\xD0\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\r\xE1Wa\r\xE0a\x1D{V[[\x90P`\x80\x02\x01`@\x01` \x81\x01\x90a\r\xF9\x91\x90a\x1FnV[a\x02@V[Pa\x0FSV[`\0\x85\x80`@\x01\x90a\x0E\x16\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x0E'Wa\x0E&a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x0E?\x91\x90a\x1FAV[`\xFF\x16\x03a\x0E\x90Wa\x0E\x8A\x83\x83\x87\x80`@\x01\x90a\x0E\\\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x0EmWa\x0Ela\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0E\x85\x91\x90a\x1E2V[a\x11\x17V[Pa\x0FRV[`\x02\x85\x80`@\x01\x90a\x0E\xA2\x91\x90a\x1E\xA5V[\x83\x81\x81\x10a\x0E\xB3Wa\x0E\xB2a\x1D{V[[\x90P`\x80\x02\x01`\0\x01` \x81\x01\x90a\x0E\xCB\x91\x90a\x1FAV[`\xFF\x16\x03a\x0FQWa\x0FO\x83\x83\x87\x80`@\x01\x90a\x0E\xE8\x91\x90a\x1E\xA5V[\x85\x81\x81\x10a\x0E\xF9Wa\x0E\xF8a\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x0F\x11\x91\x90a\x1E2V[\x88\x80`@\x01\x90a\x0F!\x91\x90a\x1E\xA5V[\x86\x81\x81\x10a\x0F2Wa\x0F1a\x1D{V[[\x90P`\x80\x02\x01``\x01` \x81\x01\x90a\x0FJ\x91\x90a\x1F\x9BV[a\t\xE4V[P[[[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\x8C\x91\x90a\x1B{V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xA9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xCD\x91\x90a\x1DNV[\x92P\x84\x80`@\x01\x90a\x0F\xDF\x91\x90a\x1E\xA5V[\x82\x81\x81\x10a\x0F\xF0Wa\x0F\xEFa\x1D{V[[\x90P`\x80\x02\x01` \x01` \x81\x01\x90a\x10\x08\x91\x90a\x1E2V[\x91Pa\x10\x80`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x84`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x140V[\x80\x80`\x01\x01\x91PPa\r&V[P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x10\xC9\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x10\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x0C\x91\x90a\x1C'V[P\x81\x92PPP\x91\x90PV[`\0\x80\x84\x03a\x11\x9DW\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11Y\x91\x90a\x1B{V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11vW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x9A\x91\x90a\x1DNV[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xBAWa\x11\xB9a\x17 V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x11\xE8W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x12\0Wa\x11\xFFa\x1D{V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x12OWa\x12Na\x1D{V[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x12\xE4\x92\x91\x90a\x1B\xE9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x13\x03W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13'\x91\x90a\x1C'V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x13y\x91\x90a\x1F\xF7V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x13\x99\x95\x94\x93\x92\x91\x90a$\x07V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x13\xB8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\xE1\x91\x90a\"\xA0V[\x90P\x80`\x01\x82Qa\x13\xF2\x91\x90a\"\xE9V[\x81Q\x81\x10a\x14\x03Wa\x14\x02a\x1D{V[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[`\0\x81Q\x90P`\0\x81\x11a\x14)W`\0\x80\xFD[\x80\x82` \x01\xFD[a\x14\xCC\x84\x84\x84\x84`@Q`$\x01a\x14J\x94\x93\x92\x91\x90a$\xB6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x14\xD2V[PPPPV[a\x14\xE9\x81a\x14\xE1a\x14\xECa\x15\x15V[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x15\x8C\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x15\x94a%\tV[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x15\xBD\x81a\x15\xAAV[\x81\x14a\x15\xC8W`\0\x80\xFD[PV[`\0\x815\x90Pa\x15\xDA\x81a\x15\xB4V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x16\x0B\x82a\x15\xE0V[\x90P\x91\x90PV[a\x16\x1B\x81a\x16\0V[\x81\x14a\x16&W`\0\x80\xFD[PV[`\0\x815\x90Pa\x168\x81a\x16\x12V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x16V\x81a\x16>V[\x81\x14a\x16aW`\0\x80\xFD[PV[`\0\x815\x90Pa\x16s\x81a\x16MV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x16\x93Wa\x16\x92a\x15\xA0V[[`\0a\x16\xA1\x87\x82\x88\x01a\x15\xCBV[\x94PP` a\x16\xB2\x87\x82\x88\x01a\x16)V[\x93PP`@a\x16\xC3\x87\x82\x88\x01a\x16)V[\x92PP``a\x16\xD4\x87\x82\x88\x01a\x16dV[\x91PP\x92\x95\x91\x94P\x92PV[a\x16\xE9\x81a\x15\xAAV[\x82RPPV[`\0` \x82\x01\x90Pa\x17\x04`\0\x83\x01\x84a\x16\xE0V[\x92\x91PPV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x17X\x82a\x17\x0FV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x17wWa\x17va\x17 V[[\x80`@RPPPV[`\0a\x17\x8Aa\x15\x96V[\x90Pa\x17\x96\x82\x82a\x17OV[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xB6Wa\x17\xB5a\x17 V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17\xF6Wa\x17\xF5a\x17 V[[a\x17\xFF\x82a\x17\x0FV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x18.a\x18)\x84a\x17\xDBV[a\x17\x80V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x18JWa\x18Ia\x17\xD6V[[a\x18U\x84\x82\x85a\x18\x0CV[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18rWa\x18qa\x17\nV[[\x815a\x18\x82\x84\x82` \x86\x01a\x18\x1BV[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a\x18\xA1Wa\x18\xA0a\x17\xCCV[[a\x18\xAB``a\x17\x80V[\x90P`\0a\x18\xBB\x84\x82\x85\x01a\x16)V[`\0\x83\x01RP` a\x18\xCF\x84\x82\x85\x01a\x15\xCBV[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\xF3Wa\x18\xF2a\x17\xD1V[[a\x18\xFF\x84\x82\x85\x01a\x18]V[`@\x83\x01RP\x92\x91PPV[`\0a\x19\x1Ea\x19\x19\x84a\x17\x9BV[a\x17\x80V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x19AWa\x19@a\x17\xC7V[[\x83[\x81\x81\x10\x15a\x19\x88W\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19fWa\x19ea\x17\nV[[\x80\x86\x01a\x19s\x89\x82a\x18\x8BV[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x19CV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x19\xA7Wa\x19\xA6a\x17\nV[[\x815a\x19\xB7\x84\x82` \x86\x01a\x19\x0BV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x19\xD6Wa\x19\xD5a\x15\xA0V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xF4Wa\x19\xF3a\x15\xA5V[[a\x1A\0\x84\x82\x85\x01a\x19\x92V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1A\x1FWa\x1A\x1Ea\x15\xA0V[[`\0a\x1A-\x84\x82\x85\x01a\x15\xCBV[\x91PP\x92\x91PPV[a\x1A?\x81a\x16>V[\x82RPPV[`\0` \x82\x01\x90Pa\x1AZ`\0\x83\x01\x84a\x1A6V[\x92\x91PPV[`\0\x80\xFD[`\0``\x82\x84\x03\x12\x15a\x1A{Wa\x1Aza\x1A`V[[\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1A\x9AWa\x1A\x99a\x15\xA0V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xB8Wa\x1A\xB7a\x15\xA5V[[a\x1A\xC4\x84\x82\x85\x01a\x1AeV[\x91PP\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x1A\xE2\x81a\x1A\xCDV[\x81\x14a\x1A\xEDW`\0\x80\xFD[PV[`\0\x815\x90Pa\x1A\xFF\x81a\x1A\xD9V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x1B\x1FWa\x1B\x1Ea\x15\xA0V[[`\0a\x1B-\x87\x82\x88\x01a\x15\xCBV[\x94PP` a\x1B>\x87\x82\x88\x01a\x16)V[\x93PP`@a\x1BO\x87\x82\x88\x01a\x16)V[\x92PP``a\x1B`\x87\x82\x88\x01a\x1A\xF0V[\x91PP\x92\x95\x91\x94P\x92PV[a\x1Bu\x81a\x16\0V[\x82RPPV[`\0` \x82\x01\x90Pa\x1B\x90`\0\x83\x01\x84a\x1BlV[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x1B\xAFWa\x1B\xAEa\x15\xA0V[[`\0a\x1B\xBD\x86\x82\x87\x01a\x15\xCBV[\x93PP` a\x1B\xCE\x86\x82\x87\x01a\x16)V[\x92PP`@a\x1B\xDF\x86\x82\x87\x01a\x16)V[\x91PP\x92P\x92P\x92V[`\0`@\x82\x01\x90Pa\x1B\xFE`\0\x83\x01\x85a\x1BlV[a\x1C\x0B` \x83\x01\x84a\x16\xE0V[\x93\x92PPPV[`\0\x81Q\x90Pa\x1C!\x81a\x1A\xD9V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C=Wa\x1C<a\x15\xA0V[[`\0a\x1CK\x84\x82\x85\x01a\x1C\x12V[\x91PP\x92\x91PPV[a\x1C]\x81a\x16\0V[\x82RPPV[a\x1Cl\x81a\x16>V[\x82RPPV[a\x1C{\x81a\x15\xAAV[\x82RPPV[a\x1C\x8A\x81a\x15\xE0V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x1C\xA6`\0\x85\x01\x82a\x1CTV[P` \x82\x01Qa\x1C\xB9` \x85\x01\x82a\x1CTV[P`@\x82\x01Qa\x1C\xCC`@\x85\x01\x82a\x1CcV[P``\x82\x01Qa\x1C\xDF``\x85\x01\x82a\x1CTV[P`\x80\x82\x01Qa\x1C\xF2`\x80\x85\x01\x82a\x1CrV[P`\xA0\x82\x01Qa\x1D\x05`\xA0\x85\x01\x82a\x1CrV[P`\xC0\x82\x01Qa\x1D\x18`\xC0\x85\x01\x82a\x1C\x81V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x1D3`\0\x83\x01\x84a\x1C\x90V[\x92\x91PPV[`\0\x81Q\x90Pa\x1DH\x81a\x15\xB4V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1DdWa\x1Dca\x15\xA0V[[`\0a\x1Dr\x84\x82\x85\x01a\x1D9V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x1D\xDEW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1D\xC3V[`\0\x84\x84\x01RPPPPV[`\0a\x1D\xF5\x82a\x1D\xAAV[a\x1D\xFF\x81\x85a\x1D\xB5V[\x93Pa\x1E\x0F\x81\x85` \x86\x01a\x1D\xC0V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1E'\x82\x84a\x1D\xEAV[\x91P\x81\x90P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1EHWa\x1EGa\x15\xA0V[[`\0a\x1EV\x84\x82\x85\x01a\x16)V[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x1Et`\0\x83\x01\x86a\x1BlV[a\x1E\x81` \x83\x01\x85a\x1BlV[a\x1E\x8E`@\x83\x01\x84a\x16\xE0V[\x94\x93PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x1E\xC2Wa\x1E\xC1a\x1E\x96V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1E\xE4Wa\x1E\xE3a\x1E\x9BV[[` \x83\x01\x92P`\x80\x82\x026\x03\x83\x13\x15a\x1F\0Wa\x1E\xFFa\x1E\xA0V[[P\x92P\x92\x90PV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x1F\x1E\x81a\x1F\x08V[\x81\x14a\x1F)W`\0\x80\xFD[PV[`\0\x815\x90Pa\x1F;\x81a\x1F\x15V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1FWWa\x1FVa\x15\xA0V[[`\0a\x1Fe\x84\x82\x85\x01a\x1F,V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1F\x84Wa\x1F\x83a\x15\xA0V[[`\0a\x1F\x92\x84\x82\x85\x01a\x16dV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1F\xB1Wa\x1F\xB0a\x15\xA0V[[`\0a\x1F\xBF\x84\x82\x85\x01a\x1A\xF0V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a \x02\x82a\x15\xAAV[\x91Pa \r\x83a\x15\xAAV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a %Wa $a\x1F\xC8V[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a Za Ua P\x84a +V[a 5V[a\x15\xAAV[\x90P\x91\x90PV[a j\x81a ?V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a \xA5\x81a\x1A\xCDV[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa \xC1`\0\x85\x01\x82a\x1CTV[P` \x82\x01Qa \xD4` \x85\x01\x82a\x1CTV[P`@\x82\x01Qa \xE7`@\x85\x01\x82a \x9CV[P``\x82\x01Qa \xFA``\x85\x01\x82a\x1CTV[PPPPV[`\0a!\x0C\x83\x83a \xABV[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a!0\x82a pV[a!:\x81\x85a {V[\x93Pa!E\x83a \x8CV[\x80`\0[\x83\x81\x10\x15a!vW\x81Qa!]\x88\x82a!\0V[\x97Pa!h\x83a!\x18V[\x92PP`\x01\x81\x01\x90Pa!IV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa!\x98`\0\x83\x01\x88a\x16\xE0V[a!\xA5` \x83\x01\x87a aV[\x81\x81\x03`@\x83\x01Ra!\xB7\x81\x86a!%V[\x90Pa!\xC6``\x83\x01\x85a\x1BlV[a!\xD3`\x80\x83\x01\x84a\x16\xE0V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a!\xF8Wa!\xF7a\x17 V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a\"\x1Ca\"\x17\x84a!\xDDV[a\x17\x80V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\"?Wa\">a\x17\xC7V[[\x83[\x81\x81\x10\x15a\"hW\x80a\"T\x88\x82a\x1D9V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\"AV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\"\x87Wa\"\x86a\x17\nV[[\x81Qa\"\x97\x84\x82` \x86\x01a\"\tV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\"\xB6Wa\"\xB5a\x15\xA0V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\xD4Wa\"\xD3a\x15\xA5V[[a\"\xE0\x84\x82\x85\x01a\"rV[\x91PP\x92\x91PPV[`\0a\"\xF4\x82a\x15\xAAV[\x91Pa\"\xFF\x83a\x15\xAAV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a#\x17Wa#\x16a\x1F\xC8V[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a#Ba#=a#8\x84a#\x1DV[a 5V[a\x15\xAAV[\x90P\x91\x90PV[a#R\x81a#'V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a#\x90\x83\x83a\x1CTV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a#\xB4\x82a#XV[a#\xBE\x81\x85a#cV[\x93Pa#\xC9\x83a#tV[\x80`\0[\x83\x81\x10\x15a#\xFAW\x81Qa#\xE1\x88\x82a#\x84V[\x97Pa#\xEC\x83a#\x9CV[\x92PP`\x01\x81\x01\x90Pa#\xCDV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa$\x1C`\0\x83\x01\x88a\x16\xE0V[a$)` \x83\x01\x87a#IV[\x81\x81\x03`@\x83\x01Ra$;\x81\x86a#\xA9V[\x90Pa$J``\x83\x01\x85a\x1BlV[a$W`\x80\x83\x01\x84a\x16\xE0V[\x96\x95PPPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0a$\x88\x82a$aV[a$\x92\x81\x85a$lV[\x93Pa$\xA2\x81\x85` \x86\x01a\x1D\xC0V[a$\xAB\x81a\x17\x0FV[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra$\xD0\x81\x87a$}V[\x90Pa$\xDF` \x83\x01\x86a\x16\xE0V[\x81\x81\x03`@\x83\x01Ra$\xF1\x81\x85a$}V[\x90Pa%\0``\x83\x01\x84a\x1BlV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xAC\xF8i(]'&$\x1D\xD4C_\x11\xFCE\xE3s\xF7\xA1\xEE/\x18\xD8\\%\xA2\x17A\xFB\xEB\xCBjdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct Call { address target; uint256 value; bytes data; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call {
        pub target: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call> for UnderlyingRustTuple<'_> {
            fn from(value: Call) -> Self {
                (value.target, value.value, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    value: tuple.1,
                    data: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call {
            const NAME: &'static str = "Call";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call(address target,uint256 value,bytes data)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Swap { uint8 swapType; address tokenOut; uint24 feeTier; bool stable; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Swap {
        pub swapType: u8,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
        pub stable: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U24,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Swap> for UnderlyingRustTuple<'_> {
            fn from(value: Swap) -> Self {
                (value.swapType, value.tokenOut, value.feeTier, value.stable)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Swap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    swapType: tuple.0,
                    tokenOut: tuple.1,
                    feeTier: tuple.2,
                    stable: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Swap {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Swap {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.swapType),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Swap {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Swap {
            const NAME: &'static str = "Swap";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Swap(uint8 swapType,address tokenOut,uint24 feeTier,bool stable)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swapType)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenOut,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.feeTier)
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.stable,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Swap {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.swapType,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenOut,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.feeTier,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.stable,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swapType,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenOut,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.feeTier,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stable,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct SwapData { address tokenIn; uint256 amountIn; Swap[] swaps; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SwapData {
        pub tokenIn: alloy::sol_types::private::Address,
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub swaps: alloy::sol_types::private::Vec<
            <Swap as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<Swap>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<<Swap as alloy::sol_types::SolType>::RustType>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SwapData> for UnderlyingRustTuple<'_> {
            fn from(value: SwapData) -> Self {
                (value.tokenIn, value.amountIn, value.swaps)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SwapData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenIn: tuple.0,
                    amountIn: tuple.1,
                    swaps: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SwapData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SwapData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::tokenize(&self.swaps),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SwapData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SwapData {
            const NAME: &'static str = "SwapData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SwapData(address tokenIn,uint256 amountIn,Swap[] swaps)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(<Swap as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Swap as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountIn)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.swaps)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SwapData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountIn,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        Swap,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.swaps)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountIn,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    Swap,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swaps,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
        pub _uniswapV3Router: alloy::sol_types::private::Address,
        pub _uniswapV2Router: alloy::sol_types::private::Address,
        pub _aerodromeRouter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._owner,
                        value._uniswapV3Router,
                        value._uniswapV2Router,
                        value._aerodromeRouter,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _uniswapV3Router: tuple.1,
                        _uniswapV2Router: tuple.2,
                        _aerodromeRouter: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._aerodromeRouter,
                    ),
                )
            }
        }
    };
    /**Function with signature `AGGREGATION_ROUTER_V5()` and selector `0xb11de7e3`.
```solidity
function AGGREGATION_ROUTER_V5() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Call {}
    ///Container type for the return parameters of the [`AGGREGATION_ROUTER_V5()`](AGGREGATION_ROUTER_V5Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATION_ROUTER_V5Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AGGREGATION_ROUTER_V5Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATION_ROUTER_V5()";
            const SELECTOR: [u8; 4] = [177u8, 29u8, 231u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_TIERS(uint256)` and selector `0x6b1b9b20`.
```solidity
function FEE_TIERS(uint256) external view returns (uint24);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`FEE_TIERS(uint256)`](FEE_TIERSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_TIERSCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_TIERSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_TIERS(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 27u8, 155u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall((address,uint256,bytes)[])` and selector `0x1749e1e3`.
```solidity
function multicall(Call[] memory calls) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`multicall((address,uint256,bytes)[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall((address,uint256,bytes)[])";
            const SELECTOR: [u8; 4] = [23u8, 73u8, 225u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swap((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0x8231ab0b`.
```solidity
function swap(SwapData memory data) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub data: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swap((address,uint256,(uint8,address,uint24,bool)[]))`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [130u8, 49u8, 171u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.data),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAerodrome(uint256,address,address,bool)` and selector `0x886cdc9c`.
```solidity
function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeCall {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub stable: bool,
    }
    ///Container type for the return parameters of the [`swapAerodrome(uint256,address,address,bool)`](swapAerodromeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeCall) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.stable)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        stable: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAerodromeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAerodromeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAerodrome(uint256,address,address,bool)";
            const SELECTOR: [u8; 4] = [136u8, 108u8, 220u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAll((address,uint256,(uint8,address,uint24,bool)[]))` and selector `0xd1855626`.
```solidity
function swapAll(SwapData memory swapData) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllCall {
        pub swapData: <SwapData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`swapAll((address,uint256,(uint8,address,uint24,bool)[]))`](swapAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAllReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SwapData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SwapData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllCall) -> Self {
                    (value.swapData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAllReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAllCall {
            type Parameters<'a> = (SwapData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAll((address,uint256,(uint8,address,uint24,bool)[]))";
            const SELECTOR: [u8; 4] = [209u8, 133u8, 86u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SwapData as alloy_sol_types::SolType>::tokenize(&self.swapData),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV2(uint256,address,address)` and selector `0xf1a52592`.
```solidity
function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`swapUniswapV2(uint256,address,address)`](swapUniswapV2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV2(uint256,address,address)";
            const SELECTOR: [u8; 4] = [241u8, 165u8, 37u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV3(uint256,address,address,uint24)` and selector `0x0748b19b`.
```solidity
function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
    }
    ///Container type for the return parameters of the [`swapUniswapV3(uint256,address,address,uint24)`](swapUniswapV3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.feeTier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        feeTier: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV3(uint256,address,address,uint24)";
            const SELECTOR: [u8; 4] = [7u8, 72u8, 177u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Executor`](self) function calls.
    pub enum ExecutorCalls {
        AGGREGATION_ROUTER_V5(AGGREGATION_ROUTER_V5Call),
        FEE_TIERS(FEE_TIERSCall),
        multicall(multicallCall),
        swap(swapCall),
        swapAerodrome(swapAerodromeCall),
        swapAll(swapAllCall),
        swapUniswapV2(swapUniswapV2Call),
        swapUniswapV3(swapUniswapV3Call),
    }
    #[automatically_derived]
    impl ExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 72u8, 177u8, 155u8],
            [23u8, 73u8, 225u8, 227u8],
            [107u8, 27u8, 155u8, 32u8],
            [130u8, 49u8, 171u8, 11u8],
            [136u8, 108u8, 220u8, 156u8],
            [177u8, 29u8, 231u8, 227u8],
            [209u8, 133u8, 86u8, 38u8],
            [241u8, 165u8, 37u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ExecutorCalls {
        const NAME: &'static str = "ExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATION_ROUTER_V5(_) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_TIERS(_) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapAerodrome(_) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapAll(_) => <swapAllCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapUniswapV2(_) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV3(_) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ExecutorCalls>] = &[
                {
                    fn swapUniswapV3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV3)
                    }
                    swapUniswapV3
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::multicall)
                    }
                    multicall
                },
                {
                    fn FEE_TIERS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::FEE_TIERS)
                    }
                    FEE_TIERS
                },
                {
                    fn swap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swap)
                    }
                    swap
                },
                {
                    fn swapAerodrome(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapAerodromeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapAerodrome)
                    }
                    swapAerodrome
                },
                {
                    fn AGGREGATION_ROUTER_V5(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::AGGREGATION_ROUTER_V5)
                    }
                    AGGREGATION_ROUTER_V5
                },
                {
                    fn swapAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapAll)
                    }
                    swapAll
                },
                {
                    fn swapUniswapV2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV2)
                    }
                    swapUniswapV2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapAll(inner) => {
                    <swapAllCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ExecutorInstance<T, P, N> {
        ExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ExecutorInstance<T, P, N>>,
    > {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _owner, _uniswapV3Router, _uniswapV2Router, _aerodromeRouter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _owner,
            _uniswapV3Router,
            _uniswapV2Router,
            _aerodromeRouter,
        )
    }
    /**A [`Executor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Executor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _owner,
                _uniswapV3Router,
                _uniswapV2Router,
                _aerodromeRouter,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _owner,
                            _uniswapV3Router,
                            _uniswapV2Router,
                            _aerodromeRouter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ExecutorInstance<T, P, N> {
            ExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATION_ROUTER_V5`] function.
        pub fn AGGREGATION_ROUTER_V5(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AGGREGATION_ROUTER_V5Call, N> {
            self.call_builder(&AGGREGATION_ROUTER_V5Call {})
        }
        ///Creates a new call builder for the [`FEE_TIERS`] function.
        pub fn FEE_TIERS(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_TIERSCall, N> {
            self.call_builder(&FEE_TIERSCall { _0 })
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { calls })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            data: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall { data })
        }
        ///Creates a new call builder for the [`swapAerodrome`] function.
        pub fn swapAerodrome(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            stable: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAerodromeCall, N> {
            self.call_builder(
                &swapAerodromeCall {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    stable,
                },
            )
        }
        ///Creates a new call builder for the [`swapAll`] function.
        pub fn swapAll(
            &self,
            swapData: <SwapData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAllCall, N> {
            self.call_builder(&swapAllCall { swapData })
        }
        ///Creates a new call builder for the [`swapUniswapV2`] function.
        pub fn swapUniswapV2(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV2Call, N> {
            self.call_builder(
                &swapUniswapV2Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV3`] function.
        pub fn swapUniswapV3(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            feeTier: alloy::sol_types::private::primitives::aliases::U24,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV3Call, N> {
            self.call_builder(
                &swapUniswapV3Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    feeTier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
