/**

Generated by the following Solidity interface...
```solidity
interface Executor {
    constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);

    function AGGREGATION_ROUTER_V5() external view returns (address);
    function FEE_TIERS(uint256) external view returns (uint24);
    function multicall(bytes[] memory data) external payable;
    function swap(bytes memory swapData) external returns (uint256);
    function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
    function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
    function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_aerodromeRouter",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AGGREGATION_ROUTER_V5",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_TIERS",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "swap",
    "inputs": [
      {
        "name": "swapData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapAerodrome",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "stable",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV2",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapUniswapV3",
    "inputs": [
      {
        "name": "amountIn",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenIn",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenOut",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeTier",
        "type": "uint24",
        "internalType": "uint24"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Executor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101006040526040518060800160405280606461ffff1681526020016101f461ffff168152602001610bb861ffff16815260200161271061ffff16815250600090600461004d929190610155565b5034801561005a57600080fd5b5060405161232e38038061232e833981810160405281019061007c9190610281565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506102e8565b82805482825590600052602060002090600901600a900481019282156101f05791602002820160005b838211156101bf57835183826101000a81548162ffffff021916908361ffff160217905550926020019260030160208160020104928301926001030261017e565b80156101ee5782816101000a81549062ffffff02191690556003016020816002010492830192600103026101bf565b505b5090506101fd9190610201565b5090565b5b8082111561021a576000816000905550600101610202565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024e82610223565b9050919050565b61025e81610243565b811461026957600080fd5b50565b60008151905061027b81610255565b92915050565b6000806000806080858703121561029b5761029a61021e565b5b60006102a98782880161026c565b94505060206102ba8782880161026c565b93505060406102cb8782880161026c565b92505060606102dc8782880161026c565b91505092959194509250565b60805160a05160c05160e051611ff86103366000396000818161078901526108ec015260008181610be30152610c6801526000818161020d0152610328015260006109d90152611ff86000f3fe6080604052600436106100705760003560e01c8063886cdc9c1161004e578063886cdc9c1461012c578063ac9650d814610169578063b11de7e314610185578063f1a52592146101b057610070565b80630748b19b14610075578063627dd56a146100b25780636b1b9b20146100ef575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061106a565b6101ed565b6040516100a991906110e0565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190611160565b6103d1565b6040516100e691906110e0565b60405180910390f35b3480156100fb57600080fd5b50610116600480360381019061011191906111ad565b610730565b60405161012391906111e9565b60405180910390f35b34801561013857600080fd5b50610153600480360381019061014e919061123c565b610769565b60405161016091906110e0565b60405180910390f35b610183600480360381019061017e91906114c5565b6109d7565b005b34801561019157600080fd5b5061019a610a3b565b6040516101a7919061151d565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190611538565b610a53565b6040516101e491906110e0565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161024a92919061158b565b6020604051808303816000875af1158015610269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028d91906115c9565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b815260040161037f91906116c0565b6020604051808303816000875af115801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906116f0565b90508092505050949350505050565b60008083838101906103e3919061191b565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084602001516040518463ffffffff1660e01b815260040161042a93929190611964565b6020604051808303816000875af1158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d91906115c9565b506000816020015190506000826000015190506000805b8460400151518110156106a3576001856040015182815181106104aa576104a961199b565b5b60200260200101516000015160ff16036105155761050e8484876040015184815181106104da576104d961199b565b5b602002602001015160200151886040015185815181106104fd576104fc61199b565b5b6020026020010151604001516101ed565b91506105f8565b60008560400151828151811061052e5761052d61199b565b5b60200260200101516000015160ff16036105765761056f84848760400151848151811061055e5761055d61199b565b5b602002602001015160200151610a53565b91506105f7565b60028560400151828151811061058f5761058e61199b565b5b60200260200101516000015160ff16036105f6576105f38484876040015184815181106105bf576105be61199b565b5b602002602001015160200151886040015185815181106105e2576105e161199b565b5b602002602001015160600151610769565b91505b5b5b819350846040015181815181106106125761061161199b565b5b60200260200101516020015192506106966040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086610d52565b8080600101915050610484565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016106df92919061158b565b6020604051808303816000875af11580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072291906115c9565b508294505050505092915050565b6000818154811061074057600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016107c692919061158b565b6020604051808303816000875af11580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906115c9565b506000600167ffffffffffffffff811115610827576108266112b4565b5b60405190808252806020026020018201604052801561086057816020015b61084d610f11565b8152602001906001900390816108455790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250816000815181106108dd576108dc61199b565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c4261093991906119f9565b6040518663ffffffff1660e01b8152600401610959959493929190611b85565b6000604051808303816000875af1158015610978573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109a19190611ca2565b905080600182516109b29190611ceb565b815181106109c3576109c261199b565b5b602002602001015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2f57600080fd5b610a3881610df4565b50565b731111111254eeb25477b68fb85ed929f73a96058281565b6000808403610ad9578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a95919061151d565b602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906116f0565b93505b6000600267ffffffffffffffff811115610af657610af56112b4565b5b604051908082528060200260200182016040528015610b245781602001602082028036833780820191505090505b5090508381600081518110610b3c57610b3b61199b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110610b8b57610b8a61199b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610c2092919061158b565b6020604051808303816000875af1158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906115c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c42610cb591906119f9565b6040518663ffffffff1660e01b8152600401610cd5959493929190611e09565b6000604051808303816000875af1158015610cf4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d1d9190611ca2565b90508060018251610d2e9190611ceb565b81518110610d3f57610d3e61199b565b5b6020026020010151925050509392505050565b610dee84848484604051602401610d6c9493929190611ee2565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ea9565b50505050565b60005b8151811015610ea5576000803073ffffffffffffffffffffffffffffffffffffffff16848481518110610e2d57610e2c61199b565b5b6020026020010151604051610e429190611f7c565b6000604051808303816000865af19150503d8060008114610e7f576040519150601f19603f3d011682016040523d82523d6000602084013e610e84565b606091505b509150915081610e9857610e9781610ec3565b5b5050806001019050610df7565b5050565b610ec081610eb8610edd610f06565b63ffffffff16565b50565b60008151905060008111610ed657600080fd5b8082602001fd5b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b610f7d819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b610f85611f93565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610fae81610f9b565b8114610fb957600080fd5b50565b600081359050610fcb81610fa5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ffc82610fd1565b9050919050565b61100c81610ff1565b811461101757600080fd5b50565b60008135905061102981611003565b92915050565b600062ffffff82169050919050565b6110478161102f565b811461105257600080fd5b50565b6000813590506110648161103e565b92915050565b6000806000806080858703121561108457611083610f91565b5b600061109287828801610fbc565b94505060206110a38782880161101a565b93505060406110b48782880161101a565b92505060606110c587828801611055565b91505092959194509250565b6110da81610f9b565b82525050565b60006020820190506110f560008301846110d1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111205761111f6110fb565b5b8235905067ffffffffffffffff81111561113d5761113c611100565b5b60208301915083600182028301111561115957611158611105565b5b9250929050565b6000806020838503121561117757611176610f91565b5b600083013567ffffffffffffffff81111561119557611194610f96565b5b6111a18582860161110a565b92509250509250929050565b6000602082840312156111c3576111c2610f91565b5b60006111d184828501610fbc565b91505092915050565b6111e38161102f565b82525050565b60006020820190506111fe60008301846111da565b92915050565b60008115159050919050565b61121981611204565b811461122457600080fd5b50565b60008135905061123681611210565b92915050565b6000806000806080858703121561125657611255610f91565b5b600061126487828801610fbc565b94505060206112758782880161101a565b93505060406112868782880161101a565b925050606061129787828801611227565b91505092959194509250565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112ec826112a3565b810181811067ffffffffffffffff8211171561130b5761130a6112b4565b5b80604052505050565b600061131e610f87565b905061132a82826112e3565b919050565b600067ffffffffffffffff82111561134a576113496112b4565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561137b5761137a6112b4565b5b611384826112a3565b9050602081019050919050565b82818337600083830152505050565b60006113b36113ae84611360565b611314565b9050828152602081018484840111156113cf576113ce61135b565b5b6113da848285611391565b509392505050565b600082601f8301126113f7576113f66110fb565b5b81356114078482602086016113a0565b91505092915050565b600061142361141e8461132f565b611314565b9050808382526020820190506020840283018581111561144657611445611105565b5b835b8181101561148d57803567ffffffffffffffff81111561146b5761146a6110fb565b5b80860161147889826113e2565b85526020850194505050602081019050611448565b5050509392505050565b600082601f8301126114ac576114ab6110fb565b5b81356114bc848260208601611410565b91505092915050565b6000602082840312156114db576114da610f91565b5b600082013567ffffffffffffffff8111156114f9576114f8610f96565b5b61150584828501611497565b91505092915050565b61151781610ff1565b82525050565b6000602082019050611532600083018461150e565b92915050565b60008060006060848603121561155157611550610f91565b5b600061155f86828701610fbc565b93505060206115708682870161101a565b92505060406115818682870161101a565b9150509250925092565b60006040820190506115a0600083018561150e565b6115ad60208301846110d1565b9392505050565b6000815190506115c381611210565b92915050565b6000602082840312156115df576115de610f91565b5b60006115ed848285016115b4565b91505092915050565b6115ff81610ff1565b82525050565b61160e8161102f565b82525050565b61161d81610f9b565b82525050565b61162c81610fd1565b82525050565b60e08201600082015161164860008501826115f6565b50602082015161165b60208501826115f6565b50604082015161166e6040850182611605565b50606082015161168160608501826115f6565b5060808201516116946080850182611614565b5060a08201516116a760a0850182611614565b5060c08201516116ba60c0850182611623565b50505050565b600060e0820190506116d56000830184611632565b92915050565b6000815190506116ea81610fa5565b92915050565b60006020828403121561170657611705610f91565b5b6000611714848285016116db565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611742576117416112b4565b5b602082029050602081019050919050565b600060ff82169050919050565b61176981611753565b811461177457600080fd5b50565b60008135905061178681611760565b92915050565b6000608082840312156117a2576117a161171d565b5b6117ac6080611314565b905060006117bc84828501611777565b60008301525060206117d08482850161101a565b60208301525060406117e484828501611055565b60408301525060606117f884828501611227565b60608301525092915050565b600061181761181284611727565b611314565b9050808382526020820190506080840283018581111561183a57611839611105565b5b835b81811015611863578061184f888261178c565b84526020840193505060808101905061183c565b5050509392505050565b600082601f830112611882576118816110fb565b5b8135611892848260208601611804565b91505092915050565b6000606082840312156118b1576118b061171d565b5b6118bb6060611314565b905060006118cb8482850161101a565b60008301525060206118df84828501610fbc565b602083015250604082013567ffffffffffffffff81111561190357611902611722565b5b61190f8482850161186d565b60408301525092915050565b60006020828403121561193157611930610f91565b5b600082013567ffffffffffffffff81111561194f5761194e610f96565b5b61195b8482850161189b565b91505092915050565b6000606082019050611979600083018661150e565b611986602083018561150e565b61199360408301846110d1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a0482610f9b565b9150611a0f83610f9b565b9250828201905080821115611a2757611a266119ca565b5b92915050565b6000819050919050565b6000819050919050565b6000611a5c611a57611a5284611a2d565b611a37565b610f9b565b9050919050565b611a6c81611a41565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611aa781611204565b82525050565b608082016000820151611ac360008501826115f6565b506020820151611ad660208501826115f6565b506040820151611ae96040850182611a9e565b506060820151611afc60608501826115f6565b50505050565b6000611b0e8383611aad565b60808301905092915050565b6000602082019050919050565b6000611b3282611a72565b611b3c8185611a7d565b9350611b4783611a8e565b8060005b83811015611b78578151611b5f8882611b02565b9750611b6a83611b1a565b925050600181019050611b4b565b5085935050505092915050565b600060a082019050611b9a60008301886110d1565b611ba76020830187611a63565b8181036040830152611bb98186611b27565b9050611bc8606083018561150e565b611bd560808301846110d1565b9695505050505050565b600067ffffffffffffffff821115611bfa57611bf96112b4565b5b602082029050602081019050919050565b6000611c1e611c1984611bdf565b611314565b90508083825260208201905060208402830185811115611c4157611c40611105565b5b835b81811015611c6a5780611c5688826116db565b845260208401935050602081019050611c43565b5050509392505050565b600082601f830112611c8957611c886110fb565b5b8151611c99848260208601611c0b565b91505092915050565b600060208284031215611cb857611cb7610f91565b5b600082015167ffffffffffffffff811115611cd657611cd5610f96565b5b611ce284828501611c74565b91505092915050565b6000611cf682610f9b565b9150611d0183610f9b565b9250828203905081811115611d1957611d186119ca565b5b92915050565b6000819050919050565b6000611d44611d3f611d3a84611d1f565b611a37565b610f9b565b9050919050565b611d5481611d29565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611d9283836115f6565b60208301905092915050565b6000602082019050919050565b6000611db682611d5a565b611dc08185611d65565b9350611dcb83611d76565b8060005b83811015611dfc578151611de38882611d86565b9750611dee83611d9e565b925050600181019050611dcf565b5085935050505092915050565b600060a082019050611e1e60008301886110d1565b611e2b6020830187611d4b565b8181036040830152611e3d8186611dab565b9050611e4c606083018561150e565b611e5960808301846110d1565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e9d578082015181840152602081019050611e82565b60008484015250505050565b6000611eb482611e63565b611ebe8185611e6e565b9350611ece818560208601611e7f565b611ed7816112a3565b840191505092915050565b60006080820190508181036000830152611efc8187611ea9565b9050611f0b60208301866110d1565b8181036040830152611f1d8185611ea9565b9050611f2c606083018461150e565b95945050505050565b600081519050919050565b600081905092915050565b6000611f5682611f35565b611f608185611f40565b9350611f70818560208601611e7f565b80840191505092915050565b6000611f888284611f4b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c46b1115fd71951095f5491080dc4958225d2605cdcdb1327a5d5d33a823e71864736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R`@Q\x80`\x80\x01`@R\x80`da\xFF\xFF\x16\x81R` \x01a\x01\xF4a\xFF\xFF\x16\x81R` \x01a\x0B\xB8a\xFF\xFF\x16\x81R` \x01a'\x10a\xFF\xFF\x16\x81RP`\0\x90`\x04a\0M\x92\x91\x90a\x01UV[P4\x80\x15a\0ZW`\0\x80\xFD[P`@Qa#.8\x03\x80a#.\x839\x81\x81\x01`@R\x81\x01\x90a\0|\x91\x90a\x02\x81V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPPPPa\x02\xE8V[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90`\t\x01`\n\x90\x04\x81\x01\x92\x82\x15a\x01\xF0W\x91` \x02\x82\x01`\0[\x83\x82\x11\x15a\x01\xBFW\x83Q\x83\x82a\x01\0\n\x81T\x81b\xFF\xFF\xFF\x02\x19\x16\x90\x83a\xFF\xFF\x16\x02\x17\x90UP\x92` \x01\x92`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01~V[\x80\x15a\x01\xEEW\x82\x81a\x01\0\n\x81T\x90b\xFF\xFF\xFF\x02\x19\x16\x90U`\x03\x01` \x81`\x02\x01\x04\x92\x83\x01\x92`\x01\x03\x02a\x01\xBFV[P[P\x90Pa\x01\xFD\x91\x90a\x02\x01V[P\x90V[[\x80\x82\x11\x15a\x02\x1AW`\0\x81`\0\x90UP`\x01\x01a\x02\x02V[P\x90V[`\0\x80\xFD[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x02N\x82a\x02#V[\x90P\x91\x90PV[a\x02^\x81a\x02CV[\x81\x14a\x02iW`\0\x80\xFD[PV[`\0\x81Q\x90Pa\x02{\x81a\x02UV[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x02\x9BWa\x02\x9Aa\x02\x1EV[[`\0a\x02\xA9\x87\x82\x88\x01a\x02lV[\x94PP` a\x02\xBA\x87\x82\x88\x01a\x02lV[\x93PP`@a\x02\xCB\x87\x82\x88\x01a\x02lV[\x92PP``a\x02\xDC\x87\x82\x88\x01a\x02lV[\x91PP\x92\x95\x91\x94P\x92PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa\x1F\xF8a\x036`\09`\0\x81\x81a\x07\x89\x01Ra\x08\xEC\x01R`\0\x81\x81a\x0B\xE3\x01Ra\x0Ch\x01R`\0\x81\x81a\x02\r\x01Ra\x03(\x01R`\0a\t\xD9\x01Ra\x1F\xF8`\0\xF3\xFE`\x80`@R`\x046\x10a\0pW`\x005`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0NW\x80c\x88l\xDC\x9C\x14a\x01,W\x80c\xAC\x96P\xD8\x14a\x01iW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x85W\x80c\xF1\xA5%\x92\x14a\x01\xB0Wa\0pV[\x80c\x07H\xB1\x9B\x14a\0uW\x80cb}\xD5j\x14a\0\xB2W\x80ck\x1B\x9B \x14a\0\xEFW[`\0\x80\xFD[4\x80\x15a\0\x81W`\0\x80\xFD[Pa\0\x9C`\x04\x806\x03\x81\x01\x90a\0\x97\x91\x90a\x10jV[a\x01\xEDV[`@Qa\0\xA9\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xBEW`\0\x80\xFD[Pa\0\xD9`\x04\x806\x03\x81\x01\x90a\0\xD4\x91\x90a\x11`V[a\x03\xD1V[`@Qa\0\xE6\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xFBW`\0\x80\xFD[Pa\x01\x16`\x04\x806\x03\x81\x01\x90a\x01\x11\x91\x90a\x11\xADV[a\x070V[`@Qa\x01#\x91\x90a\x11\xE9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x018W`\0\x80\xFD[Pa\x01S`\x04\x806\x03\x81\x01\x90a\x01N\x91\x90a\x12<V[a\x07iV[`@Qa\x01`\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[a\x01\x83`\x04\x806\x03\x81\x01\x90a\x01~\x91\x90a\x14\xC5V[a\t\xD7V[\0[4\x80\x15a\x01\x91W`\0\x80\xFD[Pa\x01\x9Aa\n;V[`@Qa\x01\xA7\x91\x90a\x15\x1DV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBCW`\0\x80\xFD[Pa\x01\xD7`\x04\x806\x03\x81\x01\x90a\x01\xD2\x91\x90a\x158V[a\nSV[`@Qa\x01\xE4\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02J\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02iW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x8D\x91\x90a\x15\xC9V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x7F\x91\x90a\x16\xC0V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\x9EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC2\x91\x90a\x16\xF0V[\x90P\x80\x92PPP\x94\x93PPPPV[`\0\x80\x83\x83\x81\x01\x90a\x03\xE3\x91\x90a\x19\x1BV[\x90P\x80`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x84` \x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04*\x93\x92\x91\x90a\x19dV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04IW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04m\x91\x90a\x15\xC9V[P`\0\x81` \x01Q\x90P`\0\x82`\0\x01Q\x90P`\0\x80[\x84`@\x01QQ\x81\x10\x15a\x06\xA3W`\x01\x85`@\x01Q\x82\x81Q\x81\x10a\x04\xAAWa\x04\xA9a\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05\x15Wa\x05\x0E\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x04\xDAWa\x04\xD9a\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x88`@\x01Q\x85\x81Q\x81\x10a\x04\xFDWa\x04\xFCa\x19\x9BV[[` \x02` \x01\x01Q`@\x01Qa\x01\xEDV[\x91Pa\x05\xF8V[`\0\x85`@\x01Q\x82\x81Q\x81\x10a\x05.Wa\x05-a\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05vWa\x05o\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x05^Wa\x05]a\x19\x9BV[[` \x02` \x01\x01Q` \x01Qa\nSV[\x91Pa\x05\xF7V[`\x02\x85`@\x01Q\x82\x81Q\x81\x10a\x05\x8FWa\x05\x8Ea\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05\xF6Wa\x05\xF3\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x05\xBFWa\x05\xBEa\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x88`@\x01Q\x85\x81Q\x81\x10a\x05\xE2Wa\x05\xE1a\x19\x9BV[[` \x02` \x01\x01Q``\x01Qa\x07iV[\x91P[[[\x81\x93P\x84`@\x01Q\x81\x81Q\x81\x10a\x06\x12Wa\x06\x11a\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x92Pa\x06\x96`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\rRV[\x80\x80`\x01\x01\x91PPa\x04\x84V[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xDF\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x06\xFEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\"\x91\x90a\x15\xC9V[P\x82\x94PPPPP\x92\x91PPV[`\0\x81\x81T\x81\x10a\x07@W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\xC6\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xE5W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\t\x91\x90a\x15\xC9V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08'Wa\x08&a\x12\xB4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x08`W\x81` \x01[a\x08Ma\x0F\x11V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x08EW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\x08\xDDWa\x08\xDCa\x19\x9BV[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\t9\x91\x90a\x19\xF9V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\tY\x95\x94\x93\x92\x91\x90a\x1B\x85V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\txW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xA1\x91\x90a\x1C\xA2V[\x90P\x80`\x01\x82Qa\t\xB2\x91\x90a\x1C\xEBV[\x81Q\x81\x10a\t\xC3Wa\t\xC2a\x19\x9BV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\n/W`\0\x80\xFD[a\n8\x81a\r\xF4V[PV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x80\x84\x03a\n\xD9W\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x95\x91\x90a\x15\x1DV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xB2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xD6\x91\x90a\x16\xF0V[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xF6Wa\n\xF5a\x12\xB4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B$W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x0B<Wa\x0B;a\x19\x9BV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x0B\x8BWa\x0B\x8Aa\x19\x9BV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C \x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C?W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Cc\x91\x90a\x15\xC9V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x0C\xB5\x91\x90a\x19\xF9V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xD5\x95\x94\x93\x92\x91\x90a\x1E\tV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C\xF4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x1D\x91\x90a\x1C\xA2V[\x90P\x80`\x01\x82Qa\r.\x91\x90a\x1C\xEBV[\x81Q\x81\x10a\r?Wa\r>a\x19\x9BV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[a\r\xEE\x84\x84\x84\x84`@Q`$\x01a\rl\x94\x93\x92\x91\x90a\x1E\xE2V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x0E\xA9V[PPPPV[`\0[\x81Q\x81\x10\x15a\x0E\xA5W`\0\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x0E-Wa\x0E,a\x19\x9BV[[` \x02` \x01\x01Q`@Qa\x0EB\x91\x90a\x1F|V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x0E\x7FW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0E\x84V[``\x91P[P\x91P\x91P\x81a\x0E\x98Wa\x0E\x97\x81a\x0E\xC3V[[PP\x80`\x01\x01\x90Pa\r\xF7V[PPV[a\x0E\xC0\x81a\x0E\xB8a\x0E\xDDa\x0F\x06V[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0\x81\x11a\x0E\xD6W`\0\x80\xFD[\x80\x82` \x01\xFD[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x0F}\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x0F\x85a\x1F\x93V[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x0F\xAE\x81a\x0F\x9BV[\x81\x14a\x0F\xB9W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0F\xCB\x81a\x0F\xA5V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0F\xFC\x82a\x0F\xD1V[\x90P\x91\x90PV[a\x10\x0C\x81a\x0F\xF1V[\x81\x14a\x10\x17W`\0\x80\xFD[PV[`\0\x815\x90Pa\x10)\x81a\x10\x03V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x10G\x81a\x10/V[\x81\x14a\x10RW`\0\x80\xFD[PV[`\0\x815\x90Pa\x10d\x81a\x10>V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x10\x84Wa\x10\x83a\x0F\x91V[[`\0a\x10\x92\x87\x82\x88\x01a\x0F\xBCV[\x94PP` a\x10\xA3\x87\x82\x88\x01a\x10\x1AV[\x93PP`@a\x10\xB4\x87\x82\x88\x01a\x10\x1AV[\x92PP``a\x10\xC5\x87\x82\x88\x01a\x10UV[\x91PP\x92\x95\x91\x94P\x92PV[a\x10\xDA\x81a\x0F\x9BV[\x82RPPV[`\0` \x82\x01\x90Pa\x10\xF5`\0\x83\x01\x84a\x10\xD1V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x11 Wa\x11\x1Fa\x10\xFBV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11=Wa\x11<a\x11\0V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x11YWa\x11Xa\x11\x05V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x11wWa\x11va\x0F\x91V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x95Wa\x11\x94a\x0F\x96V[[a\x11\xA1\x85\x82\x86\x01a\x11\nV[\x92P\x92PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x11\xC3Wa\x11\xC2a\x0F\x91V[[`\0a\x11\xD1\x84\x82\x85\x01a\x0F\xBCV[\x91PP\x92\x91PPV[a\x11\xE3\x81a\x10/V[\x82RPPV[`\0` \x82\x01\x90Pa\x11\xFE`\0\x83\x01\x84a\x11\xDAV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x12\x19\x81a\x12\x04V[\x81\x14a\x12$W`\0\x80\xFD[PV[`\0\x815\x90Pa\x126\x81a\x12\x10V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x12VWa\x12Ua\x0F\x91V[[`\0a\x12d\x87\x82\x88\x01a\x0F\xBCV[\x94PP` a\x12u\x87\x82\x88\x01a\x10\x1AV[\x93PP`@a\x12\x86\x87\x82\x88\x01a\x10\x1AV[\x92PP``a\x12\x97\x87\x82\x88\x01a\x12'V[\x91PP\x92\x95\x91\x94P\x92PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x12\xEC\x82a\x12\xA3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x13\x0BWa\x13\na\x12\xB4V[[\x80`@RPPPV[`\0a\x13\x1Ea\x0F\x87V[\x90Pa\x13*\x82\x82a\x12\xE3V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13JWa\x13Ia\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13{Wa\x13za\x12\xB4V[[a\x13\x84\x82a\x12\xA3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x13\xB3a\x13\xAE\x84a\x13`V[a\x13\x14V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x13\xCFWa\x13\xCEa\x13[V[[a\x13\xDA\x84\x82\x85a\x13\x91V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x13\xF7Wa\x13\xF6a\x10\xFBV[[\x815a\x14\x07\x84\x82` \x86\x01a\x13\xA0V[\x91PP\x92\x91PPV[`\0a\x14#a\x14\x1E\x84a\x13/V[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x14FWa\x14Ea\x11\x05V[[\x83[\x81\x81\x10\x15a\x14\x8DW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14kWa\x14ja\x10\xFBV[[\x80\x86\x01a\x14x\x89\x82a\x13\xE2V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x14HV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x14\xACWa\x14\xABa\x10\xFBV[[\x815a\x14\xBC\x84\x82` \x86\x01a\x14\x10V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x14\xDBWa\x14\xDAa\x0F\x91V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF9Wa\x14\xF8a\x0F\x96V[[a\x15\x05\x84\x82\x85\x01a\x14\x97V[\x91PP\x92\x91PPV[a\x15\x17\x81a\x0F\xF1V[\x82RPPV[`\0` \x82\x01\x90Pa\x152`\0\x83\x01\x84a\x15\x0EV[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x15QWa\x15Pa\x0F\x91V[[`\0a\x15_\x86\x82\x87\x01a\x0F\xBCV[\x93PP` a\x15p\x86\x82\x87\x01a\x10\x1AV[\x92PP`@a\x15\x81\x86\x82\x87\x01a\x10\x1AV[\x91PP\x92P\x92P\x92V[`\0`@\x82\x01\x90Pa\x15\xA0`\0\x83\x01\x85a\x15\x0EV[a\x15\xAD` \x83\x01\x84a\x10\xD1V[\x93\x92PPPV[`\0\x81Q\x90Pa\x15\xC3\x81a\x12\x10V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x15\xDFWa\x15\xDEa\x0F\x91V[[`\0a\x15\xED\x84\x82\x85\x01a\x15\xB4V[\x91PP\x92\x91PPV[a\x15\xFF\x81a\x0F\xF1V[\x82RPPV[a\x16\x0E\x81a\x10/V[\x82RPPV[a\x16\x1D\x81a\x0F\x9BV[\x82RPPV[a\x16,\x81a\x0F\xD1V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x16H`\0\x85\x01\x82a\x15\xF6V[P` \x82\x01Qa\x16[` \x85\x01\x82a\x15\xF6V[P`@\x82\x01Qa\x16n`@\x85\x01\x82a\x16\x05V[P``\x82\x01Qa\x16\x81``\x85\x01\x82a\x15\xF6V[P`\x80\x82\x01Qa\x16\x94`\x80\x85\x01\x82a\x16\x14V[P`\xA0\x82\x01Qa\x16\xA7`\xA0\x85\x01\x82a\x16\x14V[P`\xC0\x82\x01Qa\x16\xBA`\xC0\x85\x01\x82a\x16#V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x16\xD5`\0\x83\x01\x84a\x162V[\x92\x91PPV[`\0\x81Q\x90Pa\x16\xEA\x81a\x0F\xA5V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x17\x06Wa\x17\x05a\x0F\x91V[[`\0a\x17\x14\x84\x82\x85\x01a\x16\xDBV[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17BWa\x17Aa\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x17i\x81a\x17SV[\x81\x14a\x17tW`\0\x80\xFD[PV[`\0\x815\x90Pa\x17\x86\x81a\x17`V[\x92\x91PPV[`\0`\x80\x82\x84\x03\x12\x15a\x17\xA2Wa\x17\xA1a\x17\x1DV[[a\x17\xAC`\x80a\x13\x14V[\x90P`\0a\x17\xBC\x84\x82\x85\x01a\x17wV[`\0\x83\x01RP` a\x17\xD0\x84\x82\x85\x01a\x10\x1AV[` \x83\x01RP`@a\x17\xE4\x84\x82\x85\x01a\x10UV[`@\x83\x01RP``a\x17\xF8\x84\x82\x85\x01a\x12'V[``\x83\x01RP\x92\x91PPV[`\0a\x18\x17a\x18\x12\x84a\x17'V[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P`\x80\x84\x02\x83\x01\x85\x81\x11\x15a\x18:Wa\x189a\x11\x05V[[\x83[\x81\x81\x10\x15a\x18cW\x80a\x18O\x88\x82a\x17\x8CV[\x84R` \x84\x01\x93PP`\x80\x81\x01\x90Pa\x18<V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18\x82Wa\x18\x81a\x10\xFBV[[\x815a\x18\x92\x84\x82` \x86\x01a\x18\x04V[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a\x18\xB1Wa\x18\xB0a\x17\x1DV[[a\x18\xBB``a\x13\x14V[\x90P`\0a\x18\xCB\x84\x82\x85\x01a\x10\x1AV[`\0\x83\x01RP` a\x18\xDF\x84\x82\x85\x01a\x0F\xBCV[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x03Wa\x19\x02a\x17\"V[[a\x19\x0F\x84\x82\x85\x01a\x18mV[`@\x83\x01RP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x191Wa\x190a\x0F\x91V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19OWa\x19Na\x0F\x96V[[a\x19[\x84\x82\x85\x01a\x18\x9BV[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x19y`\0\x83\x01\x86a\x15\x0EV[a\x19\x86` \x83\x01\x85a\x15\x0EV[a\x19\x93`@\x83\x01\x84a\x10\xD1V[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x1A\x04\x82a\x0F\x9BV[\x91Pa\x1A\x0F\x83a\x0F\x9BV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1A'Wa\x1A&a\x19\xCAV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x1A\\a\x1AWa\x1AR\x84a\x1A-V[a\x1A7V[a\x0F\x9BV[\x90P\x91\x90PV[a\x1Al\x81a\x1AAV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1A\xA7\x81a\x12\x04V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x1A\xC3`\0\x85\x01\x82a\x15\xF6V[P` \x82\x01Qa\x1A\xD6` \x85\x01\x82a\x15\xF6V[P`@\x82\x01Qa\x1A\xE9`@\x85\x01\x82a\x1A\x9EV[P``\x82\x01Qa\x1A\xFC``\x85\x01\x82a\x15\xF6V[PPPPV[`\0a\x1B\x0E\x83\x83a\x1A\xADV[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1B2\x82a\x1ArV[a\x1B<\x81\x85a\x1A}V[\x93Pa\x1BG\x83a\x1A\x8EV[\x80`\0[\x83\x81\x10\x15a\x1BxW\x81Qa\x1B_\x88\x82a\x1B\x02V[\x97Pa\x1Bj\x83a\x1B\x1AV[\x92PP`\x01\x81\x01\x90Pa\x1BKV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\x1B\x9A`\0\x83\x01\x88a\x10\xD1V[a\x1B\xA7` \x83\x01\x87a\x1AcV[\x81\x81\x03`@\x83\x01Ra\x1B\xB9\x81\x86a\x1B'V[\x90Pa\x1B\xC8``\x83\x01\x85a\x15\x0EV[a\x1B\xD5`\x80\x83\x01\x84a\x10\xD1V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1B\xFAWa\x1B\xF9a\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a\x1C\x1Ea\x1C\x19\x84a\x1B\xDFV[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x1CAWa\x1C@a\x11\x05V[[\x83[\x81\x81\x10\x15a\x1CjW\x80a\x1CV\x88\x82a\x16\xDBV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x1CCV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x1C\x89Wa\x1C\x88a\x10\xFBV[[\x81Qa\x1C\x99\x84\x82` \x86\x01a\x1C\x0BV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C\xB8Wa\x1C\xB7a\x0F\x91V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xD6Wa\x1C\xD5a\x0F\x96V[[a\x1C\xE2\x84\x82\x85\x01a\x1CtV[\x91PP\x92\x91PPV[`\0a\x1C\xF6\x82a\x0F\x9BV[\x91Pa\x1D\x01\x83a\x0F\x9BV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1D\x19Wa\x1D\x18a\x19\xCAV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a\x1DDa\x1D?a\x1D:\x84a\x1D\x1FV[a\x1A7V[a\x0F\x9BV[\x90P\x91\x90PV[a\x1DT\x81a\x1D)V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x1D\x92\x83\x83a\x15\xF6V[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1D\xB6\x82a\x1DZV[a\x1D\xC0\x81\x85a\x1DeV[\x93Pa\x1D\xCB\x83a\x1DvV[\x80`\0[\x83\x81\x10\x15a\x1D\xFCW\x81Qa\x1D\xE3\x88\x82a\x1D\x86V[\x97Pa\x1D\xEE\x83a\x1D\x9EV[\x92PP`\x01\x81\x01\x90Pa\x1D\xCFV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\x1E\x1E`\0\x83\x01\x88a\x10\xD1V[a\x1E+` \x83\x01\x87a\x1DKV[\x81\x81\x03`@\x83\x01Ra\x1E=\x81\x86a\x1D\xABV[\x90Pa\x1EL``\x83\x01\x85a\x15\x0EV[a\x1EY`\x80\x83\x01\x84a\x10\xD1V[\x96\x95PPPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x1E\x9DW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1E\x82V[`\0\x84\x84\x01RPPPPV[`\0a\x1E\xB4\x82a\x1EcV[a\x1E\xBE\x81\x85a\x1EnV[\x93Pa\x1E\xCE\x81\x85` \x86\x01a\x1E\x7FV[a\x1E\xD7\x81a\x12\xA3V[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x1E\xFC\x81\x87a\x1E\xA9V[\x90Pa\x1F\x0B` \x83\x01\x86a\x10\xD1V[\x81\x81\x03`@\x83\x01Ra\x1F\x1D\x81\x85a\x1E\xA9V[\x90Pa\x1F,``\x83\x01\x84a\x15\x0EV[\x95\x94PPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0a\x1FV\x82a\x1F5V[a\x1F`\x81\x85a\x1F@V[\x93Pa\x1Fp\x81\x85` \x86\x01a\x1E\x7FV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1F\x88\x82\x84a\x1FKV[\x91P\x81\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xC4k\x11\x15\xFDq\x95\x10\x95\xF5I\x10\x80\xDCIX\"]&\x05\xCD\xCD\xB12z]]3\xA8#\xE7\x18dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106100705760003560e01c8063886cdc9c1161004e578063886cdc9c1461012c578063ac9650d814610169578063b11de7e314610185578063f1a52592146101b057610070565b80630748b19b14610075578063627dd56a146100b25780636b1b9b20146100ef575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061106a565b6101ed565b6040516100a991906110e0565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190611160565b6103d1565b6040516100e691906110e0565b60405180910390f35b3480156100fb57600080fd5b50610116600480360381019061011191906111ad565b610730565b60405161012391906111e9565b60405180910390f35b34801561013857600080fd5b50610153600480360381019061014e919061123c565b610769565b60405161016091906110e0565b60405180910390f35b610183600480360381019061017e91906114c5565b6109d7565b005b34801561019157600080fd5b5061019a610a3b565b6040516101a7919061151d565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190611538565b610a53565b6040516101e491906110e0565b60405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040161024a92919061158b565b6020604051808303816000875af1158015610269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028d91906115c9565b5060006040518060e001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166304e45aaf836040518263ffffffff1660e01b815260040161037f91906116c0565b6020604051808303816000875af115801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906116f0565b90508092505050949350505050565b60008083838101906103e3919061191b565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd333084602001516040518463ffffffff1660e01b815260040161042a93929190611964565b6020604051808303816000875af1158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d91906115c9565b506000816020015190506000826000015190506000805b8460400151518110156106a3576001856040015182815181106104aa576104a961199b565b5b60200260200101516000015160ff16036105155761050e8484876040015184815181106104da576104d961199b565b5b602002602001015160200151886040015185815181106104fd576104fc61199b565b5b6020026020010151604001516101ed565b91506105f8565b60008560400151828151811061052e5761052d61199b565b5b60200260200101516000015160ff16036105765761056f84848760400151848151811061055e5761055d61199b565b5b602002602001015160200151610a53565b91506105f7565b60028560400151828151811061058f5761058e61199b565b5b60200260200101516000015160ff16036105f6576105f38484876040015184815181106105bf576105be61199b565b5b602002602001015160200151886040015185815181106105e2576105e161199b565b5b602002602001015160600151610769565b91505b5b5b819350846040015181815181106106125761061161199b565b5b60200260200101516020015192506106966040518060400160405280600f81526020017f6f757470757420616d6f756e743a200000000000000000000000000000000000815250856040518060400160405280600381526020017f206f66000000000000000000000000000000000000000000000000000000000081525086610d52565b8080600101915050610484565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016106df92919061158b565b6020604051808303816000875af11580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072291906115c9565b508294505050505092915050565b6000818154811061074057600080fd5b90600052602060002090600a9182820401919006600302915054906101000a900462ffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016107c692919061158b565b6020604051808303816000875af11580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906115c9565b506000600167ffffffffffffffff811115610827576108266112b4565b5b60405190808252806020026020018201604052801561086057816020015b61084d610f11565b8152602001906001900390816108455790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018415158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250816000815181106108dd576108dc61199b565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cac88ea9886000853061012c4261093991906119f9565b6040518663ffffffff1660e01b8152600401610959959493929190611b85565b6000604051808303816000875af1158015610978573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109a19190611ca2565b905080600182516109b29190611ceb565b815181106109c3576109c261199b565b5b602002602001015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2f57600080fd5b610a3881610df4565b50565b731111111254eeb25477b68fb85ed929f73a96058281565b6000808403610ad9578273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a95919061151d565b602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906116f0565b93505b6000600267ffffffffffffffff811115610af657610af56112b4565b5b604051908082528060200260200182016040528015610b245781602001602082028036833780820191505090505b5090508381600081518110610b3c57610b3b61199b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110610b8b57610b8a61199b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610c2092919061158b565b6020604051808303816000875af1158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906115c9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739876001853061012c42610cb591906119f9565b6040518663ffffffff1660e01b8152600401610cd5959493929190611e09565b6000604051808303816000875af1158015610cf4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d1d9190611ca2565b90508060018251610d2e9190611ceb565b81518110610d3f57610d3e61199b565b5b6020026020010151925050509392505050565b610dee84848484604051602401610d6c9493929190611ee2565b6040516020818303038152906040527fbb7235e9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ea9565b50505050565b60005b8151811015610ea5576000803073ffffffffffffffffffffffffffffffffffffffff16848481518110610e2d57610e2c61199b565b5b6020026020010151604051610e429190611f7c565b6000604051808303816000865af19150503d8060008114610e7f576040519150601f19603f3d011682016040523d82523d6000602084013e610e84565b606091505b509150915081610e9857610e9781610ec3565b5b5050806001019050610df7565b5050565b610ec081610eb8610edd610f06565b63ffffffff16565b50565b60008151905060008111610ed657600080fd5b8082602001fd5b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b610f7d819050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b610f85611f93565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610fae81610f9b565b8114610fb957600080fd5b50565b600081359050610fcb81610fa5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ffc82610fd1565b9050919050565b61100c81610ff1565b811461101757600080fd5b50565b60008135905061102981611003565b92915050565b600062ffffff82169050919050565b6110478161102f565b811461105257600080fd5b50565b6000813590506110648161103e565b92915050565b6000806000806080858703121561108457611083610f91565b5b600061109287828801610fbc565b94505060206110a38782880161101a565b93505060406110b48782880161101a565b92505060606110c587828801611055565b91505092959194509250565b6110da81610f9b565b82525050565b60006020820190506110f560008301846110d1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111205761111f6110fb565b5b8235905067ffffffffffffffff81111561113d5761113c611100565b5b60208301915083600182028301111561115957611158611105565b5b9250929050565b6000806020838503121561117757611176610f91565b5b600083013567ffffffffffffffff81111561119557611194610f96565b5b6111a18582860161110a565b92509250509250929050565b6000602082840312156111c3576111c2610f91565b5b60006111d184828501610fbc565b91505092915050565b6111e38161102f565b82525050565b60006020820190506111fe60008301846111da565b92915050565b60008115159050919050565b61121981611204565b811461122457600080fd5b50565b60008135905061123681611210565b92915050565b6000806000806080858703121561125657611255610f91565b5b600061126487828801610fbc565b94505060206112758782880161101a565b93505060406112868782880161101a565b925050606061129787828801611227565b91505092959194509250565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112ec826112a3565b810181811067ffffffffffffffff8211171561130b5761130a6112b4565b5b80604052505050565b600061131e610f87565b905061132a82826112e3565b919050565b600067ffffffffffffffff82111561134a576113496112b4565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561137b5761137a6112b4565b5b611384826112a3565b9050602081019050919050565b82818337600083830152505050565b60006113b36113ae84611360565b611314565b9050828152602081018484840111156113cf576113ce61135b565b5b6113da848285611391565b509392505050565b600082601f8301126113f7576113f66110fb565b5b81356114078482602086016113a0565b91505092915050565b600061142361141e8461132f565b611314565b9050808382526020820190506020840283018581111561144657611445611105565b5b835b8181101561148d57803567ffffffffffffffff81111561146b5761146a6110fb565b5b80860161147889826113e2565b85526020850194505050602081019050611448565b5050509392505050565b600082601f8301126114ac576114ab6110fb565b5b81356114bc848260208601611410565b91505092915050565b6000602082840312156114db576114da610f91565b5b600082013567ffffffffffffffff8111156114f9576114f8610f96565b5b61150584828501611497565b91505092915050565b61151781610ff1565b82525050565b6000602082019050611532600083018461150e565b92915050565b60008060006060848603121561155157611550610f91565b5b600061155f86828701610fbc565b93505060206115708682870161101a565b92505060406115818682870161101a565b9150509250925092565b60006040820190506115a0600083018561150e565b6115ad60208301846110d1565b9392505050565b6000815190506115c381611210565b92915050565b6000602082840312156115df576115de610f91565b5b60006115ed848285016115b4565b91505092915050565b6115ff81610ff1565b82525050565b61160e8161102f565b82525050565b61161d81610f9b565b82525050565b61162c81610fd1565b82525050565b60e08201600082015161164860008501826115f6565b50602082015161165b60208501826115f6565b50604082015161166e6040850182611605565b50606082015161168160608501826115f6565b5060808201516116946080850182611614565b5060a08201516116a760a0850182611614565b5060c08201516116ba60c0850182611623565b50505050565b600060e0820190506116d56000830184611632565b92915050565b6000815190506116ea81610fa5565b92915050565b60006020828403121561170657611705610f91565b5b6000611714848285016116db565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611742576117416112b4565b5b602082029050602081019050919050565b600060ff82169050919050565b61176981611753565b811461177457600080fd5b50565b60008135905061178681611760565b92915050565b6000608082840312156117a2576117a161171d565b5b6117ac6080611314565b905060006117bc84828501611777565b60008301525060206117d08482850161101a565b60208301525060406117e484828501611055565b60408301525060606117f884828501611227565b60608301525092915050565b600061181761181284611727565b611314565b9050808382526020820190506080840283018581111561183a57611839611105565b5b835b81811015611863578061184f888261178c565b84526020840193505060808101905061183c565b5050509392505050565b600082601f830112611882576118816110fb565b5b8135611892848260208601611804565b91505092915050565b6000606082840312156118b1576118b061171d565b5b6118bb6060611314565b905060006118cb8482850161101a565b60008301525060206118df84828501610fbc565b602083015250604082013567ffffffffffffffff81111561190357611902611722565b5b61190f8482850161186d565b60408301525092915050565b60006020828403121561193157611930610f91565b5b600082013567ffffffffffffffff81111561194f5761194e610f96565b5b61195b8482850161189b565b91505092915050565b6000606082019050611979600083018661150e565b611986602083018561150e565b61199360408301846110d1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a0482610f9b565b9150611a0f83610f9b565b9250828201905080821115611a2757611a266119ca565b5b92915050565b6000819050919050565b6000819050919050565b6000611a5c611a57611a5284611a2d565b611a37565b610f9b565b9050919050565b611a6c81611a41565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611aa781611204565b82525050565b608082016000820151611ac360008501826115f6565b506020820151611ad660208501826115f6565b506040820151611ae96040850182611a9e565b506060820151611afc60608501826115f6565b50505050565b6000611b0e8383611aad565b60808301905092915050565b6000602082019050919050565b6000611b3282611a72565b611b3c8185611a7d565b9350611b4783611a8e565b8060005b83811015611b78578151611b5f8882611b02565b9750611b6a83611b1a565b925050600181019050611b4b565b5085935050505092915050565b600060a082019050611b9a60008301886110d1565b611ba76020830187611a63565b8181036040830152611bb98186611b27565b9050611bc8606083018561150e565b611bd560808301846110d1565b9695505050505050565b600067ffffffffffffffff821115611bfa57611bf96112b4565b5b602082029050602081019050919050565b6000611c1e611c1984611bdf565b611314565b90508083825260208201905060208402830185811115611c4157611c40611105565b5b835b81811015611c6a5780611c5688826116db565b845260208401935050602081019050611c43565b5050509392505050565b600082601f830112611c8957611c886110fb565b5b8151611c99848260208601611c0b565b91505092915050565b600060208284031215611cb857611cb7610f91565b5b600082015167ffffffffffffffff811115611cd657611cd5610f96565b5b611ce284828501611c74565b91505092915050565b6000611cf682610f9b565b9150611d0183610f9b565b9250828203905081811115611d1957611d186119ca565b5b92915050565b6000819050919050565b6000611d44611d3f611d3a84611d1f565b611a37565b610f9b565b9050919050565b611d5481611d29565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611d9283836115f6565b60208301905092915050565b6000602082019050919050565b6000611db682611d5a565b611dc08185611d65565b9350611dcb83611d76565b8060005b83811015611dfc578151611de38882611d86565b9750611dee83611d9e565b925050600181019050611dcf565b5085935050505092915050565b600060a082019050611e1e60008301886110d1565b611e2b6020830187611d4b565b8181036040830152611e3d8186611dab565b9050611e4c606083018561150e565b611e5960808301846110d1565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e9d578082015181840152602081019050611e82565b60008484015250505050565b6000611eb482611e63565b611ebe8185611e6e565b9350611ece818560208601611e7f565b611ed7816112a3565b840191505092915050565b60006080820190508181036000830152611efc8187611ea9565b9050611f0b60208301866110d1565b8181036040830152611f1d8185611ea9565b9050611f2c606083018461150e565b95945050505050565b600081519050919050565b600081905092915050565b6000611f5682611f35565b611f608185611f40565b9350611f70818560208601611e7f565b80840191505092915050565b6000611f888284611f4b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c46b1115fd71951095f5491080dc4958225d2605cdcdb1327a5d5d33a823e71864736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0pW`\x005`\xE0\x1C\x80c\x88l\xDC\x9C\x11a\0NW\x80c\x88l\xDC\x9C\x14a\x01,W\x80c\xAC\x96P\xD8\x14a\x01iW\x80c\xB1\x1D\xE7\xE3\x14a\x01\x85W\x80c\xF1\xA5%\x92\x14a\x01\xB0Wa\0pV[\x80c\x07H\xB1\x9B\x14a\0uW\x80cb}\xD5j\x14a\0\xB2W\x80ck\x1B\x9B \x14a\0\xEFW[`\0\x80\xFD[4\x80\x15a\0\x81W`\0\x80\xFD[Pa\0\x9C`\x04\x806\x03\x81\x01\x90a\0\x97\x91\x90a\x10jV[a\x01\xEDV[`@Qa\0\xA9\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xBEW`\0\x80\xFD[Pa\0\xD9`\x04\x806\x03\x81\x01\x90a\0\xD4\x91\x90a\x11`V[a\x03\xD1V[`@Qa\0\xE6\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xFBW`\0\x80\xFD[Pa\x01\x16`\x04\x806\x03\x81\x01\x90a\x01\x11\x91\x90a\x11\xADV[a\x070V[`@Qa\x01#\x91\x90a\x11\xE9V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x018W`\0\x80\xFD[Pa\x01S`\x04\x806\x03\x81\x01\x90a\x01N\x91\x90a\x12<V[a\x07iV[`@Qa\x01`\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[a\x01\x83`\x04\x806\x03\x81\x01\x90a\x01~\x91\x90a\x14\xC5V[a\t\xD7V[\0[4\x80\x15a\x01\x91W`\0\x80\xFD[Pa\x01\x9Aa\n;V[`@Qa\x01\xA7\x91\x90a\x15\x1DV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBCW`\0\x80\xFD[Pa\x01\xD7`\x04\x806\x03\x81\x01\x90a\x01\xD2\x91\x90a\x158V[a\nSV[`@Qa\x01\xE4\x91\x90a\x10\xE0V[`@Q\x80\x91\x03\x90\xF3[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02J\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02iW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x8D\x91\x90a\x15\xC9V[P`\0`@Q\x80`\xE0\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84b\xFF\xFF\xFF\x16\x81R` \x010s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87\x81R` \x01`\0\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x04\xE4Z\xAF\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x7F\x91\x90a\x16\xC0V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\x9EW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC2\x91\x90a\x16\xF0V[\x90P\x80\x92PPP\x94\x93PPPPV[`\0\x80\x83\x83\x81\x01\x90a\x03\xE3\x91\x90a\x19\x1BV[\x90P\x80`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c#\xB8r\xDD30\x84` \x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04*\x93\x92\x91\x90a\x19dV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04IW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04m\x91\x90a\x15\xC9V[P`\0\x81` \x01Q\x90P`\0\x82`\0\x01Q\x90P`\0\x80[\x84`@\x01QQ\x81\x10\x15a\x06\xA3W`\x01\x85`@\x01Q\x82\x81Q\x81\x10a\x04\xAAWa\x04\xA9a\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05\x15Wa\x05\x0E\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x04\xDAWa\x04\xD9a\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x88`@\x01Q\x85\x81Q\x81\x10a\x04\xFDWa\x04\xFCa\x19\x9BV[[` \x02` \x01\x01Q`@\x01Qa\x01\xEDV[\x91Pa\x05\xF8V[`\0\x85`@\x01Q\x82\x81Q\x81\x10a\x05.Wa\x05-a\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05vWa\x05o\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x05^Wa\x05]a\x19\x9BV[[` \x02` \x01\x01Q` \x01Qa\nSV[\x91Pa\x05\xF7V[`\x02\x85`@\x01Q\x82\x81Q\x81\x10a\x05\x8FWa\x05\x8Ea\x19\x9BV[[` \x02` \x01\x01Q`\0\x01Q`\xFF\x16\x03a\x05\xF6Wa\x05\xF3\x84\x84\x87`@\x01Q\x84\x81Q\x81\x10a\x05\xBFWa\x05\xBEa\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x88`@\x01Q\x85\x81Q\x81\x10a\x05\xE2Wa\x05\xE1a\x19\x9BV[[` \x02` \x01\x01Q``\x01Qa\x07iV[\x91P[[[\x81\x93P\x84`@\x01Q\x81\x81Q\x81\x10a\x06\x12Wa\x06\x11a\x19\x9BV[[` \x02` \x01\x01Q` \x01Q\x92Pa\x06\x96`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01\x7Foutput amount: \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85`@Q\x80`@\x01`@R\x80`\x03\x81R` \x01\x7F of\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x86a\rRV[\x80\x80`\x01\x01\x91PPa\x04\x84V[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA9\x05\x9C\xBB3\x85`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xDF\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x06\xFEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\"\x91\x90a\x15\xC9V[P\x82\x94PPPPP\x92\x91PPV[`\0\x81\x81T\x81\x10a\x07@W`\0\x80\xFD[\x90`\0R` `\0 \x90`\n\x91\x82\x82\x04\x01\x91\x90\x06`\x03\x02\x91PT\x90a\x01\0\n\x90\x04b\xFF\xFF\xFF\x16\x81V[`\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\xC6\x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xE5W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\t\x91\x90a\x15\xC9V[P`\0`\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08'Wa\x08&a\x12\xB4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x08`W\x81` \x01[a\x08Ma\x0F\x11V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x08EW\x90P[P\x90P`@Q\x80`\x80\x01`@R\x80\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x84\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x81`\0\x81Q\x81\x10a\x08\xDDWa\x08\xDCa\x19\x9BV[[` \x02` \x01\x01\x81\x90RP`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCA\xC8\x8E\xA9\x88`\0\x850a\x01,Ba\t9\x91\x90a\x19\xF9V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\tY\x95\x94\x93\x92\x91\x90a\x1B\x85V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\txW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xA1\x91\x90a\x1C\xA2V[\x90P\x80`\x01\x82Qa\t\xB2\x91\x90a\x1C\xEBV[\x81Q\x81\x10a\t\xC3Wa\t\xC2a\x19\x9BV[[` \x02` \x01\x01Q\x92PPP\x94\x93PPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\n/W`\0\x80\xFD[a\n8\x81a\r\xF4V[PV[s\x11\x11\x11\x12T\xEE\xB2Tw\xB6\x8F\xB8^\xD9)\xF7:\x96\x05\x82\x81V[`\0\x80\x84\x03a\n\xD9W\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\xA0\x8210`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x95\x91\x90a\x15\x1DV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xB2W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xD6\x91\x90a\x16\xF0V[\x93P[`\0`\x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xF6Wa\n\xF5a\x12\xB4V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B$W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x83\x81`\0\x81Q\x81\x10a\x0B<Wa\x0B;a\x19\x9BV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x82\x81`\x01\x81Q\x81\x10a\x0B\x8BWa\x0B\x8Aa\x19\x9BV[[` \x02` \x01\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t^\xA7\xB3\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C \x92\x91\x90a\x15\x8BV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C?W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Cc\x91\x90a\x15\xC9V[P`\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xED\x179\x87`\x01\x850a\x01,Ba\x0C\xB5\x91\x90a\x19\xF9V[`@Q\x86c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0C\xD5\x95\x94\x93\x92\x91\x90a\x1E\tV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0C\xF4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x1D\x91\x90a\x1C\xA2V[\x90P\x80`\x01\x82Qa\r.\x91\x90a\x1C\xEBV[\x81Q\x81\x10a\r?Wa\r>a\x19\x9BV[[` \x02` \x01\x01Q\x92PPP\x93\x92PPPV[a\r\xEE\x84\x84\x84\x84`@Q`$\x01a\rl\x94\x93\x92\x91\x90a\x1E\xE2V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\xBBr5\xE9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPPa\x0E\xA9V[PPPPV[`\0[\x81Q\x81\x10\x15a\x0E\xA5W`\0\x800s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x84\x81Q\x81\x10a\x0E-Wa\x0E,a\x19\x9BV[[` \x02` \x01\x01Q`@Qa\x0EB\x91\x90a\x1F|V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x0E\x7FW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0E\x84V[``\x91P[P\x91P\x91P\x81a\x0E\x98Wa\x0E\x97\x81a\x0E\xC3V[[PP\x80`\x01\x01\x90Pa\r\xF7V[PPV[a\x0E\xC0\x81a\x0E\xB8a\x0E\xDDa\x0F\x06V[c\xFF\xFF\xFF\xFF\x16V[PV[`\0\x81Q\x90P`\0\x81\x11a\x0E\xD6W`\0\x80\xFD[\x80\x82` \x01\xFD[`\0\x81Q\x90P`\0jconsole.log\x90P` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[a\x0F}\x81\x90P\x91\x90PV[`@Q\x80`\x80\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x15\x15\x81R` \x01`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[a\x0F\x85a\x1F\x93V[V[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x0F\xAE\x81a\x0F\x9BV[\x81\x14a\x0F\xB9W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0F\xCB\x81a\x0F\xA5V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0F\xFC\x82a\x0F\xD1V[\x90P\x91\x90PV[a\x10\x0C\x81a\x0F\xF1V[\x81\x14a\x10\x17W`\0\x80\xFD[PV[`\0\x815\x90Pa\x10)\x81a\x10\x03V[\x92\x91PPV[`\0b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x10G\x81a\x10/V[\x81\x14a\x10RW`\0\x80\xFD[PV[`\0\x815\x90Pa\x10d\x81a\x10>V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x10\x84Wa\x10\x83a\x0F\x91V[[`\0a\x10\x92\x87\x82\x88\x01a\x0F\xBCV[\x94PP` a\x10\xA3\x87\x82\x88\x01a\x10\x1AV[\x93PP`@a\x10\xB4\x87\x82\x88\x01a\x10\x1AV[\x92PP``a\x10\xC5\x87\x82\x88\x01a\x10UV[\x91PP\x92\x95\x91\x94P\x92PV[a\x10\xDA\x81a\x0F\x9BV[\x82RPPV[`\0` \x82\x01\x90Pa\x10\xF5`\0\x83\x01\x84a\x10\xD1V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x11 Wa\x11\x1Fa\x10\xFBV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11=Wa\x11<a\x11\0V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x11YWa\x11Xa\x11\x05V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x11wWa\x11va\x0F\x91V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x95Wa\x11\x94a\x0F\x96V[[a\x11\xA1\x85\x82\x86\x01a\x11\nV[\x92P\x92PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x11\xC3Wa\x11\xC2a\x0F\x91V[[`\0a\x11\xD1\x84\x82\x85\x01a\x0F\xBCV[\x91PP\x92\x91PPV[a\x11\xE3\x81a\x10/V[\x82RPPV[`\0` \x82\x01\x90Pa\x11\xFE`\0\x83\x01\x84a\x11\xDAV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x12\x19\x81a\x12\x04V[\x81\x14a\x12$W`\0\x80\xFD[PV[`\0\x815\x90Pa\x126\x81a\x12\x10V[\x92\x91PPV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x12VWa\x12Ua\x0F\x91V[[`\0a\x12d\x87\x82\x88\x01a\x0F\xBCV[\x94PP` a\x12u\x87\x82\x88\x01a\x10\x1AV[\x93PP`@a\x12\x86\x87\x82\x88\x01a\x10\x1AV[\x92PP``a\x12\x97\x87\x82\x88\x01a\x12'V[\x91PP\x92\x95\x91\x94P\x92PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x12\xEC\x82a\x12\xA3V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x13\x0BWa\x13\na\x12\xB4V[[\x80`@RPPPV[`\0a\x13\x1Ea\x0F\x87V[\x90Pa\x13*\x82\x82a\x12\xE3V[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13JWa\x13Ia\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13{Wa\x13za\x12\xB4V[[a\x13\x84\x82a\x12\xA3V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x13\xB3a\x13\xAE\x84a\x13`V[a\x13\x14V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x13\xCFWa\x13\xCEa\x13[V[[a\x13\xDA\x84\x82\x85a\x13\x91V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x13\xF7Wa\x13\xF6a\x10\xFBV[[\x815a\x14\x07\x84\x82` \x86\x01a\x13\xA0V[\x91PP\x92\x91PPV[`\0a\x14#a\x14\x1E\x84a\x13/V[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x14FWa\x14Ea\x11\x05V[[\x83[\x81\x81\x10\x15a\x14\x8DW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14kWa\x14ja\x10\xFBV[[\x80\x86\x01a\x14x\x89\x82a\x13\xE2V[\x85R` \x85\x01\x94PPP` \x81\x01\x90Pa\x14HV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x14\xACWa\x14\xABa\x10\xFBV[[\x815a\x14\xBC\x84\x82` \x86\x01a\x14\x10V[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x14\xDBWa\x14\xDAa\x0F\x91V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF9Wa\x14\xF8a\x0F\x96V[[a\x15\x05\x84\x82\x85\x01a\x14\x97V[\x91PP\x92\x91PPV[a\x15\x17\x81a\x0F\xF1V[\x82RPPV[`\0` \x82\x01\x90Pa\x152`\0\x83\x01\x84a\x15\x0EV[\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x15QWa\x15Pa\x0F\x91V[[`\0a\x15_\x86\x82\x87\x01a\x0F\xBCV[\x93PP` a\x15p\x86\x82\x87\x01a\x10\x1AV[\x92PP`@a\x15\x81\x86\x82\x87\x01a\x10\x1AV[\x91PP\x92P\x92P\x92V[`\0`@\x82\x01\x90Pa\x15\xA0`\0\x83\x01\x85a\x15\x0EV[a\x15\xAD` \x83\x01\x84a\x10\xD1V[\x93\x92PPPV[`\0\x81Q\x90Pa\x15\xC3\x81a\x12\x10V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x15\xDFWa\x15\xDEa\x0F\x91V[[`\0a\x15\xED\x84\x82\x85\x01a\x15\xB4V[\x91PP\x92\x91PPV[a\x15\xFF\x81a\x0F\xF1V[\x82RPPV[a\x16\x0E\x81a\x10/V[\x82RPPV[a\x16\x1D\x81a\x0F\x9BV[\x82RPPV[a\x16,\x81a\x0F\xD1V[\x82RPPV[`\xE0\x82\x01`\0\x82\x01Qa\x16H`\0\x85\x01\x82a\x15\xF6V[P` \x82\x01Qa\x16[` \x85\x01\x82a\x15\xF6V[P`@\x82\x01Qa\x16n`@\x85\x01\x82a\x16\x05V[P``\x82\x01Qa\x16\x81``\x85\x01\x82a\x15\xF6V[P`\x80\x82\x01Qa\x16\x94`\x80\x85\x01\x82a\x16\x14V[P`\xA0\x82\x01Qa\x16\xA7`\xA0\x85\x01\x82a\x16\x14V[P`\xC0\x82\x01Qa\x16\xBA`\xC0\x85\x01\x82a\x16#V[PPPPV[`\0`\xE0\x82\x01\x90Pa\x16\xD5`\0\x83\x01\x84a\x162V[\x92\x91PPV[`\0\x81Q\x90Pa\x16\xEA\x81a\x0F\xA5V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x17\x06Wa\x17\x05a\x0F\x91V[[`\0a\x17\x14\x84\x82\x85\x01a\x16\xDBV[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17BWa\x17Aa\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x17i\x81a\x17SV[\x81\x14a\x17tW`\0\x80\xFD[PV[`\0\x815\x90Pa\x17\x86\x81a\x17`V[\x92\x91PPV[`\0`\x80\x82\x84\x03\x12\x15a\x17\xA2Wa\x17\xA1a\x17\x1DV[[a\x17\xAC`\x80a\x13\x14V[\x90P`\0a\x17\xBC\x84\x82\x85\x01a\x17wV[`\0\x83\x01RP` a\x17\xD0\x84\x82\x85\x01a\x10\x1AV[` \x83\x01RP`@a\x17\xE4\x84\x82\x85\x01a\x10UV[`@\x83\x01RP``a\x17\xF8\x84\x82\x85\x01a\x12'V[``\x83\x01RP\x92\x91PPV[`\0a\x18\x17a\x18\x12\x84a\x17'V[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P`\x80\x84\x02\x83\x01\x85\x81\x11\x15a\x18:Wa\x189a\x11\x05V[[\x83[\x81\x81\x10\x15a\x18cW\x80a\x18O\x88\x82a\x17\x8CV[\x84R` \x84\x01\x93PP`\x80\x81\x01\x90Pa\x18<V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x18\x82Wa\x18\x81a\x10\xFBV[[\x815a\x18\x92\x84\x82` \x86\x01a\x18\x04V[\x91PP\x92\x91PPV[`\0``\x82\x84\x03\x12\x15a\x18\xB1Wa\x18\xB0a\x17\x1DV[[a\x18\xBB``a\x13\x14V[\x90P`\0a\x18\xCB\x84\x82\x85\x01a\x10\x1AV[`\0\x83\x01RP` a\x18\xDF\x84\x82\x85\x01a\x0F\xBCV[` \x83\x01RP`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\x03Wa\x19\x02a\x17\"V[[a\x19\x0F\x84\x82\x85\x01a\x18mV[`@\x83\x01RP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x191Wa\x190a\x0F\x91V[[`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19OWa\x19Na\x0F\x96V[[a\x19[\x84\x82\x85\x01a\x18\x9BV[\x91PP\x92\x91PPV[`\0``\x82\x01\x90Pa\x19y`\0\x83\x01\x86a\x15\x0EV[a\x19\x86` \x83\x01\x85a\x15\x0EV[a\x19\x93`@\x83\x01\x84a\x10\xD1V[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x1A\x04\x82a\x0F\x9BV[\x91Pa\x1A\x0F\x83a\x0F\x9BV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1A'Wa\x1A&a\x19\xCAV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x1A\\a\x1AWa\x1AR\x84a\x1A-V[a\x1A7V[a\x0F\x9BV[\x90P\x91\x90PV[a\x1Al\x81a\x1AAV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1A\xA7\x81a\x12\x04V[\x82RPPV[`\x80\x82\x01`\0\x82\x01Qa\x1A\xC3`\0\x85\x01\x82a\x15\xF6V[P` \x82\x01Qa\x1A\xD6` \x85\x01\x82a\x15\xF6V[P`@\x82\x01Qa\x1A\xE9`@\x85\x01\x82a\x1A\x9EV[P``\x82\x01Qa\x1A\xFC``\x85\x01\x82a\x15\xF6V[PPPPV[`\0a\x1B\x0E\x83\x83a\x1A\xADV[`\x80\x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1B2\x82a\x1ArV[a\x1B<\x81\x85a\x1A}V[\x93Pa\x1BG\x83a\x1A\x8EV[\x80`\0[\x83\x81\x10\x15a\x1BxW\x81Qa\x1B_\x88\x82a\x1B\x02V[\x97Pa\x1Bj\x83a\x1B\x1AV[\x92PP`\x01\x81\x01\x90Pa\x1BKV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\x1B\x9A`\0\x83\x01\x88a\x10\xD1V[a\x1B\xA7` \x83\x01\x87a\x1AcV[\x81\x81\x03`@\x83\x01Ra\x1B\xB9\x81\x86a\x1B'V[\x90Pa\x1B\xC8``\x83\x01\x85a\x15\x0EV[a\x1B\xD5`\x80\x83\x01\x84a\x10\xD1V[\x96\x95PPPPPPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x1B\xFAWa\x1B\xF9a\x12\xB4V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0a\x1C\x1Ea\x1C\x19\x84a\x1B\xDFV[a\x13\x14V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x1CAWa\x1C@a\x11\x05V[[\x83[\x81\x81\x10\x15a\x1CjW\x80a\x1CV\x88\x82a\x16\xDBV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x1CCV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x1C\x89Wa\x1C\x88a\x10\xFBV[[\x81Qa\x1C\x99\x84\x82` \x86\x01a\x1C\x0BV[\x91PP\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x1C\xB8Wa\x1C\xB7a\x0F\x91V[[`\0\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\xD6Wa\x1C\xD5a\x0F\x96V[[a\x1C\xE2\x84\x82\x85\x01a\x1CtV[\x91PP\x92\x91PPV[`\0a\x1C\xF6\x82a\x0F\x9BV[\x91Pa\x1D\x01\x83a\x0F\x9BV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x1D\x19Wa\x1D\x18a\x19\xCAV[[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[`\0a\x1DDa\x1D?a\x1D:\x84a\x1D\x1FV[a\x1A7V[a\x0F\x9BV[\x90P\x91\x90PV[a\x1DT\x81a\x1D)V[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x1D\x92\x83\x83a\x15\xF6V[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x1D\xB6\x82a\x1DZV[a\x1D\xC0\x81\x85a\x1DeV[\x93Pa\x1D\xCB\x83a\x1DvV[\x80`\0[\x83\x81\x10\x15a\x1D\xFCW\x81Qa\x1D\xE3\x88\x82a\x1D\x86V[\x97Pa\x1D\xEE\x83a\x1D\x9EV[\x92PP`\x01\x81\x01\x90Pa\x1D\xCFV[P\x85\x93PPPP\x92\x91PPV[`\0`\xA0\x82\x01\x90Pa\x1E\x1E`\0\x83\x01\x88a\x10\xD1V[a\x1E+` \x83\x01\x87a\x1DKV[\x81\x81\x03`@\x83\x01Ra\x1E=\x81\x86a\x1D\xABV[\x90Pa\x1EL``\x83\x01\x85a\x15\x0EV[a\x1EY`\x80\x83\x01\x84a\x10\xD1V[\x96\x95PPPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x1E\x9DW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x1E\x82V[`\0\x84\x84\x01RPPPPV[`\0a\x1E\xB4\x82a\x1EcV[a\x1E\xBE\x81\x85a\x1EnV[\x93Pa\x1E\xCE\x81\x85` \x86\x01a\x1E\x7FV[a\x1E\xD7\x81a\x12\xA3V[\x84\x01\x91PP\x92\x91PPV[`\0`\x80\x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x1E\xFC\x81\x87a\x1E\xA9V[\x90Pa\x1F\x0B` \x83\x01\x86a\x10\xD1V[\x81\x81\x03`@\x83\x01Ra\x1F\x1D\x81\x85a\x1E\xA9V[\x90Pa\x1F,``\x83\x01\x84a\x15\x0EV[\x95\x94PPPPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0a\x1FV\x82a\x1F5V[a\x1F`\x81\x85a\x1F@V[\x93Pa\x1Fp\x81\x85` \x86\x01a\x1E\x7FV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x1F\x88\x82\x84a\x1FKV[\x91P\x81\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`Q`\x04R`$`\0\xFD\xFE\xA2dipfsX\"\x12 \xC4k\x11\x15\xFDq\x95\x10\x95\xF5I\x10\x80\xDCIX\"]&\x05\xCD\xCD\xB12z]]3\xA8#\xE7\x18dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address _owner, address _uniswapV3Router, address _uniswapV2Router, address _aerodromeRouter);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _owner: alloy::sol_types::private::Address,
        pub _uniswapV3Router: alloy::sol_types::private::Address,
        pub _uniswapV2Router: alloy::sol_types::private::Address,
        pub _aerodromeRouter: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value._owner,
                        value._uniswapV3Router,
                        value._uniswapV2Router,
                        value._aerodromeRouter,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _owner: tuple.0,
                        _uniswapV3Router: tuple.1,
                        _uniswapV2Router: tuple.2,
                        _aerodromeRouter: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._aerodromeRouter,
                    ),
                )
            }
        }
    };
    /**Function with signature `AGGREGATION_ROUTER_V5()` and selector `0xb11de7e3`.
```solidity
function AGGREGATION_ROUTER_V5() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Call {}
    ///Container type for the return parameters of the [`AGGREGATION_ROUTER_V5()`](AGGREGATION_ROUTER_V5Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AGGREGATION_ROUTER_V5Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATION_ROUTER_V5Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATION_ROUTER_V5Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATION_ROUTER_V5Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATION_ROUTER_V5Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AGGREGATION_ROUTER_V5Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATION_ROUTER_V5()";
            const SELECTOR: [u8; 4] = [177u8, 29u8, 231u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_TIERS(uint256)` and selector `0x6b1b9b20`.
```solidity
function FEE_TIERS(uint256) external view returns (uint24);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`FEE_TIERS(uint256)`](FEE_TIERSCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FEE_TIERSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_TIERSReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_TIERSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_TIERSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_TIERSCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_TIERSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_TIERS(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 27u8, 155u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall(bytes[])` and selector `0xac9650d8`.
```solidity
function multicall(bytes[] memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`multicall(bytes[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct multicallReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall(bytes[])";
            const SELECTOR: [u8; 4] = [172u8, 150u8, 80u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swap(bytes)` and selector `0x627dd56a`.
```solidity
function swap(bytes memory swapData) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapCall {
        pub swapData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`swap(bytes)`](swapCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (value.swapData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { swapData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap(bytes)";
            const SELECTOR: [u8; 4] = [98u8, 125u8, 213u8, 106u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.swapData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapAerodrome(uint256,address,address,bool)` and selector `0x886cdc9c`.
```solidity
function swapAerodrome(uint256 amountIn, address tokenIn, address tokenOut, bool stable) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeCall {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub stable: bool,
    }
    ///Container type for the return parameters of the [`swapAerodrome(uint256,address,address,bool)`](swapAerodromeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapAerodromeReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeCall) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.stable)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        stable: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapAerodromeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapAerodromeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapAerodromeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapAerodromeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapAerodromeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapAerodrome(uint256,address,address,bool)";
            const SELECTOR: [u8; 4] = [136u8, 108u8, 220u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.stable,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV2(uint256,address,address)` and selector `0xf1a52592`.
```solidity
function swapUniswapV2(uint256 amountIn, address tokenIn, address tokenOut) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`swapUniswapV2(uint256,address,address)`](swapUniswapV2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV2Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV2(uint256,address,address)";
            const SELECTOR: [u8; 4] = [241u8, 165u8, 37u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `swapUniswapV3(uint256,address,address,uint24)` and selector `0x0748b19b`.
```solidity
function swapUniswapV3(uint256 amountIn, address tokenIn, address tokenOut, uint24 feeTier) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Call {
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenIn: alloy::sol_types::private::Address,
        pub tokenOut: alloy::sol_types::private::Address,
        pub feeTier: alloy::sol_types::private::primitives::aliases::U24,
    }
    ///Container type for the return parameters of the [`swapUniswapV3(uint256,address,address,uint24)`](swapUniswapV3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct swapUniswapV3Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Call> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Call) -> Self {
                    (value.amountIn, value.tokenIn, value.tokenOut, value.feeTier)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amountIn: tuple.0,
                        tokenIn: tuple.1,
                        tokenOut: tuple.2,
                        feeTier: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapUniswapV3Return> for UnderlyingRustTuple<'_> {
                fn from(value: swapUniswapV3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapUniswapV3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapUniswapV3Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapUniswapV3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapUniswapV3(uint256,address,address,uint24)";
            const SELECTOR: [u8; 4] = [7u8, 72u8, 177u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenOut,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeTier),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Executor`](self) function calls.
    pub enum ExecutorCalls {
        AGGREGATION_ROUTER_V5(AGGREGATION_ROUTER_V5Call),
        FEE_TIERS(FEE_TIERSCall),
        multicall(multicallCall),
        swap(swapCall),
        swapAerodrome(swapAerodromeCall),
        swapUniswapV2(swapUniswapV2Call),
        swapUniswapV3(swapUniswapV3Call),
    }
    #[automatically_derived]
    impl ExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 72u8, 177u8, 155u8],
            [98u8, 125u8, 213u8, 106u8],
            [107u8, 27u8, 155u8, 32u8],
            [136u8, 108u8, 220u8, 156u8],
            [172u8, 150u8, 80u8, 216u8],
            [177u8, 29u8, 231u8, 227u8],
            [241u8, 165u8, 37u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ExecutorCalls {
        const NAME: &'static str = "ExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATION_ROUTER_V5(_) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_TIERS(_) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::swapAerodrome(_) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV2(_) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapUniswapV3(_) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ExecutorCalls>] = &[
                {
                    fn swapUniswapV3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV3)
                    }
                    swapUniswapV3
                },
                {
                    fn swap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swap)
                    }
                    swap
                },
                {
                    fn FEE_TIERS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::FEE_TIERS)
                    }
                    FEE_TIERS
                },
                {
                    fn swapAerodrome(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapAerodromeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapAerodrome)
                    }
                    swapAerodrome
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::multicall)
                    }
                    multicall
                },
                {
                    fn AGGREGATION_ROUTER_V5(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::AGGREGATION_ROUTER_V5)
                    }
                    AGGREGATION_ROUTER_V5
                },
                {
                    fn swapUniswapV2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecutorCalls> {
                        <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ExecutorCalls::swapUniswapV2)
                    }
                    swapUniswapV2
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATION_ROUTER_V5(inner) => {
                    <AGGREGATION_ROUTER_V5Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_TIERS(inner) => {
                    <FEE_TIERSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swap(inner) => {
                    <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::swapAerodrome(inner) => {
                    <swapAerodromeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV2(inner) => {
                    <swapUniswapV2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapUniswapV3(inner) => {
                    <swapUniswapV3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ExecutorInstance<T, P, N> {
        ExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ExecutorInstance<T, P, N>>,
    > {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _owner, _uniswapV3Router, _uniswapV2Router, _aerodromeRouter)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _owner: alloy::sol_types::private::Address,
        _uniswapV3Router: alloy::sol_types::private::Address,
        _uniswapV2Router: alloy::sol_types::private::Address,
        _aerodromeRouter: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ExecutorInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            _owner,
            _uniswapV3Router,
            _uniswapV2Router,
            _aerodromeRouter,
        )
    }
    /**A [`Executor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Executor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Executor`](self) contract instance.

See the [wrapper's documentation](`ExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _owner,
                _uniswapV3Router,
                _uniswapV2Router,
                _aerodromeRouter,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _owner: alloy::sol_types::private::Address,
            _uniswapV3Router: alloy::sol_types::private::Address,
            _uniswapV2Router: alloy::sol_types::private::Address,
            _aerodromeRouter: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _owner,
                            _uniswapV3Router,
                            _uniswapV2Router,
                            _aerodromeRouter,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ExecutorInstance<T, P, N> {
            ExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATION_ROUTER_V5`] function.
        pub fn AGGREGATION_ROUTER_V5(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AGGREGATION_ROUTER_V5Call, N> {
            self.call_builder(&AGGREGATION_ROUTER_V5Call {})
        }
        ///Creates a new call builder for the [`FEE_TIERS`] function.
        pub fn FEE_TIERS(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_TIERSCall, N> {
            self.call_builder(&FEE_TIERSCall { _0 })
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { data })
        }
        ///Creates a new call builder for the [`swap`] function.
        pub fn swap(
            &self,
            swapData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall { swapData })
        }
        ///Creates a new call builder for the [`swapAerodrome`] function.
        pub fn swapAerodrome(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            stable: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapAerodromeCall, N> {
            self.call_builder(
                &swapAerodromeCall {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    stable,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV2`] function.
        pub fn swapUniswapV2(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV2Call, N> {
            self.call_builder(
                &swapUniswapV2Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                },
            )
        }
        ///Creates a new call builder for the [`swapUniswapV3`] function.
        pub fn swapUniswapV3(
            &self,
            amountIn: alloy::sol_types::private::primitives::aliases::U256,
            tokenIn: alloy::sol_types::private::Address,
            tokenOut: alloy::sol_types::private::Address,
            feeTier: alloy::sol_types::private::primitives::aliases::U24,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapUniswapV3Call, N> {
            self.call_builder(
                &swapUniswapV3Call {
                    amountIn,
                    tokenIn,
                    tokenOut,
                    feeTier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
