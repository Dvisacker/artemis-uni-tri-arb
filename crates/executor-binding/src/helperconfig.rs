/**

Generated by the following Solidity interface...
```solidity
interface HelperConfig {
    struct NetworkConfig {
        uint256 deployerKey;
        address deployerAddress;
        address aaveLendingPool;
        address uniswapV2Router;
        address uniswapV3Factory;
        address uniswapV3Router;
        address aerodromeRouter;
        address usdc;
        address usdt;
        address weth;
    }

    constructor();

    function IS_SCRIPT() external view returns (bool);
    function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
    function getActiveNetworkConfig() external view returns (NetworkConfig memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "activeNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "deployerKey",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deployerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aaveLendingPool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV2Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Factory",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "uniswapV3Router",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "aerodromeRouter",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdc",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "usdt",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "weth",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveNetworkConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct HelperConfig.NetworkConfig",
        "components": [
          {
            "name": "deployerKey",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deployerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aaveLendingPool",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV2Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Factory",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "uniswapV3Router",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "aerodromeRouter",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdc",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "usdt",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "weth",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod HelperConfig {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610798565b61001961002c565b610683611262823961068390f35b610032565b60405190565b5f80fd5b5f90565b5f90565b5f1c90565b90565b90565b61005d61005861006292610043565b610046565b610043565b90565b6100716100769161003e565b610049565b90565b60018060a01b031690565b61009861009361009d92610043565b610046565b610079565b90565b6100b46100af6100b992610079565b610046565b610079565b90565b6100c5906100a0565b90565b6101016100fc6100f77f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d610065565b610084565b6100bc565b90565b61010d906100a0565b90565b61011990610104565b90565b61012c6101276100c8565b610110565b90565b610138906100bc565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101639061013b565b810190811060018060401b0382111761017b57604052565b610145565b60e01b90565b5f80fd5b151590565b6101988161018a565b0361019f57565b5f80fd5b905051906101b08261018f565b565b906020828203126101cb576101c8915f016101a3565b90565b610186565b60209181520190565b5f7f5553455f414e56494c0000000000000000000000000000000000000000000000910152565b61020d60096020926101d0565b610216816101d9565b0190565b61022f9060208101905f818303910152610200565b90565b61023a61002c565b3d5f823e3d90fd5b61024b81610043565b0361025257565b5f80fd5b9050519061026382610242565b565b9060208282031261027e5761027b915f01610256565b90565b610186565b5f7f4445565f505249564154455f4b45590000000000000000000000000000000000910152565b6102b7600f6020926101d0565b6102c081610283565b0190565b6102d99060208101905f8183039101526102aa565b90565b6102e590610079565b90565b6102f1816102dc565b036102f857565b5f80fd5b90505190610309826102e8565b565b9060208282031261032457610321915f016102fc565b90565b610186565b5f7f4445565f41444452455353000000000000000000000000000000000000000000910152565b61035d600b6020926101d0565b61036681610329565b0190565b61037f9060208101905f818303910152610350565b90565b9061039561038e61002c565b9283610159565b565b60018060401b0381116103b3576103af60209161013b565b0190565b610145565b906103ca6103c583610397565b610382565b918252565b5f7f416e76696c206465746563746564000000000000000000000000000000000000910152565b610400600e6103b8565b9061040d602083016103cf565b565b6104176103f6565b90565b5f7f414e56494c5f4445565f505249564154455f4b45590000000000000000000000910152565b61044e60156020926101d0565b6104578161041a565b0190565b6104709060208101905f818303910152610441565b90565b5f7f414e56494c5f4445565f41444452455353000000000000000000000000000000910152565b6104a760116020926101d0565b6104b081610473565b0190565b6104c99060208101905f81830391015261049a565b90565b90565b6104e36104de6104e8926104cc565b610046565b610043565b90565b90565b6105026104fd610507926104eb565b610046565b610043565b90565b90565b61052161051c6105269261050a565b610046565b610043565b90565b90565b61054061053b61054592610529565b610046565b610043565b90565b5f7f556e737570706f72746564206e6574776f726b00000000000000000000000000910152565b61057c60136020926101d0565b61058581610548565b0190565b61059e9060208101905f81830391015261056f565b90565b6105aa90610043565b9052565b91906105c1905f602085019401906105a1565b565b6105ce610140610382565b90565b906105db90610043565b9052565b906105e9906102dc565b9052565b6105f79051610043565b90565b5f1b90565b9061060b5f19916105fa565b9181191691161790565b90565b9061062d61062861063492610049565b610615565b82546105ff565b9055565b61064290516102dc565b90565b9061065660018060a01b03916105fa565b9181191691161790565b610669906100bc565b90565b90565b9061068461067f61068b92610660565b61066c565b8254610645565b9055565b90610784610120600961078a946106b35f82016106ad5f88016105ed565b90610618565b6106cc600182016106c660208801610638565b9061066f565b6106e5600282016106df60408801610638565b9061066f565b6106fe600382016106f860608801610638565b9061066f565b6107176004820161071160808801610638565b9061066f565b6107306005820161072a60a08801610638565b9061066f565b6107496006820161074360c08801610638565b9061066f565b6107626007820161075c60e08801610638565b9061066f565b61077c600882016107766101008801610638565b9061066f565b019201610638565b9061066f565b565b906107969161068f565b565b6107a061109c565b6107a94661110a565b6107b1610036565b506107ba61003a565b506107e660206107d06107cb61011c565b61012f565b637ed1ec7d906107de61002c565b938492610180565b825281806107f66004820161021a565b03915afa90811561104a575f9161101c575b505f14610f145761081f61081a61040f565b6111a3565b61084a602061083461082f61011c565b61012f565b63c1978d1f9061084261002c565b938492610180565b8252818061085a6004820161045b565b03915afa908115610f0f575f91610ee1575b50610898602061088261087d61011c565b61012f565b63350d56bf9061089061002c565b938492610180565b825281806108a8600482016104b4565b03915afa908115610edc575f91610eae575b50505b466108d26108cc61a4b16104cf565b91610043565b148015610e92575b5f14610a9f5761091d6020826108f66108f161011c565b61012f565b61091263ffa1864961090661002c565b95869485938493610180565b8352600483016105ae565b03915afa908115610a9a575f91610a6c575b5073794a61358d6845594f94dc1db02a252b5b4814ad731b02da8cb0d097eb8d57a175b88c7d8b47997506731f98431c8ad98523631ae4a59f267346ea31f9847368b3465833fb72a70ecdf485e0e4c7bd8665fc455f9173af88d065e77c8cc2239327c5edb3a432268e58319373fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9957382af49447d8a07e3bd95bd0d56f35241523fbab1976109d06105c3565b995f8b01906109de916105d1565b60208a01906109ec916105df565b60408901906109fa916105df565b6060880190610a08916105df565b6080870190610a16916105df565b60a0860190610a24916105df565b60c0850190610a32916105df565b60e0840190610a40916105df565b610100830190610a4f916105df565b610120820190610a5e916105df565b610a6990600d61078c565b5b565b610a8d915060203d8111610a93575b610a858183610159565b81019061030b565b5f61092f565b503d610a7b565b610232565b46610ab4610aae61210561050d565b91610043565b145f14610c9157610af8602082610ad1610acc61011c565b61012f565b610aed63ffa18649610ae161002c565b95869485938493610180565b8352600483016105ae565b03915afa908115610c8c575f91610c5e575b5073794a61358d6845594f94dc1db02a252b5b4814ad734752ba5dbc23f44d87826276bf6fd6b1c372ad247333128a8fc17869897dce68ed026d694621f6fdfd732626664c2603336e57b271c5c0b26f421741e48173cf77a3ba9a5ca399b7c97c74d54e5b1beb874e439173833589fcd6edb6e08f4c7c32d4f71b54bda029139373fde4c96c8593536e31f229ea8f37b2ada2699bb29573420000000000000000000000000000000000000697610bbf6105c3565b995f8b0190610bcd916105d1565b60208a0190610bdb916105df565b6040890190610be9916105df565b6060880190610bf7916105df565b6080870190610c05916105df565b60a0860190610c13916105df565b60c0850190610c21916105df565b60e0840190610c2f916105df565b610100830190610c3e916105df565b610120820190610c4d916105df565b610c5890600d61078c565b5b610a6a565b610c7f915060203d8111610c85575b610c778183610159565b81019061030b565b5f610b0a565b503d610c6d565b610232565b46610ca7610ca162aa36a761052c565b91610043565b145f14610e7057610ceb602082610cc4610cbf61011c565b61012f565b610ce063ffa18649610cd461002c565b95869485938493610180565b8352600483016105ae565b03915afa908115610e6b575f91610e3d575b50736ae43d3271ff6888e7fc43fd7321a503ff738951737a250d5630b4cf539739df2c5dacb4c659f2488d731f98431c8ad98523631ae4a59f267346ea31f9845f9073e592427a0aece92de3edee1f18e0157c05861564907394a9d9ac8a22534e3faca9f4e7f2e2cf85d5e4c89373aa8e23fb1079ea71e0a56f48a2aa51851d8433d09573c558dbdd856501fcd9aaf1e62eae57a9f0629a3c97610d9f6105c3565b995f8b0190610dad916105d1565b60208a0190610dbb916105df565b6040890190610dc9916105df565b6060880190610dd7916105df565b6080870190610de5916105df565b60a0860190610df3916105df565b60c0850190610e01916105df565b60e0840190610e0f916105df565b610100830190610e1e916105df565b610120820190610e2d916105df565b610e3890600d61078c565b610c59565b610e5e915060203d8111610e64575b610e568183610159565b81019061030b565b5f610cfd565b503d610e4c565b610232565b610e7861002c565b62461bcd60e51b815280610e8e60048201610589565b0390fd5b5046610ea8610ea2617a696104ee565b91610043565b146108da565b610ecf915060203d8111610ed5575b610ec78183610159565b81019061030b565b5f6108ba565b503d610ebd565b610232565b610f02915060203d8111610f08575b610efa8183610159565b810190610265565b5f61086c565b503d610ef0565b610232565b610f3f6020610f29610f2461011c565b61012f565b63c1978d1f90610f3761002c565b938492610180565b82528180610f4f600482016102c4565b03915afa908115611017575f91610fe9575b50610f8d6020610f77610f7261011c565b61012f565b63350d56bf90610f8561002c565b938492610180565b82528180610f9d6004820161036a565b03915afa908115610fe4575f91610fb6575b50506108bd565b610fd7915060203d8111610fdd575b610fcf8183610159565b81019061030b565b5f610faf565b503d610fc5565b610232565b61100a915060203d8111611010575b6110028183610159565b810190610265565b5f610f61565b503d610ff8565b610232565b61103d915060203d8111611043575b6110358183610159565b8101906101b2565b5f610808565b503d61102b565b610232565b60101b90565b9061106362ff00009161104f565b9181191691161790565b6110769061018a565b90565b90565b9061109161108c6110989261106d565b611079565b8254611055565b9055565b6110a46110b2565b6110b06001600c61107c565b565b6110ba6110bc565b565b6110c46110fc565b565b906110d260ff916105fa565b9181191691161790565b906110f16110ec6110f89261106d565b611079565b82546110c6565b9055565b6111086001600c6110dc565b565b6111356111446111499261111c61002c565b92839160046020840163f5b1bba960e01b8152016105ae565b60208201810382520382610159565b6111e4565b565b5190565b90825f9392825e0152565b611179611182602093611187936111708161114b565b938480936101d0565b9586910161114f565b61013b565b0190565b6111a09160208201915f81840391015261115a565b90565b6111ce6111dd6111e2926111b561002c565b92839160046020840163104c13eb60e21b81520161118b565b60208201810382520382610159565b6111e4565b565b6111f7906111f2600161122f565b61124f565b565b5190565b6a636f6e736f6c652e6c6f6790565b5f8091611218816111f9565b9060206112236111fd565b9101905afa50565b5f90565b61123761122b565b5090565b634e487b7160e01b5f52605160045260245ffd5b60010361123b5761125f9061120c565b56fe60806040526004361015610013575b61040d565b61001d5f3561004c565b8063a2d7c88e14610047578063d7b65745146100425763f8ccbf470361000e576103d8565b61032f565b610170565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b90565b61007b9061006f565b9052565b60018060a01b031690565b6100939061007f565b90565b61009f9061008a565b9052565b9061012080610158936100bc5f8201515f860190610072565b6100ce60208201516020860190610096565b6100e060408201516040860190610096565b6100f260608201516060860190610096565b61010460808201516080860190610096565b61011660a082015160a0860190610096565b61012860c082015160c0860190610096565b61013a60e082015160e0860190610096565b61014e610100820151610100860190610096565b0151910190610096565b565b919061016e905f61014085019401906100a3565b565b346101a057610180366004610060565b61019c61018b610637565b610193610052565b9182918261015a565b0390f35b610058565b5f1c90565b90565b6101b96101be916101a5565b6101aa565b90565b6101cb90546101ad565b90565b60018060a01b031690565b6101e56101ea916101a5565b6101ce565b90565b6101f790546101d9565b90565b600d906102085f83016101c1565b91610215600182016101ed565b91610222600283016101ed565b9161022f600382016101ed565b9161023c600483016101ed565b91610249600582016101ed565b91610256600683016101ed565b91610263600782016101ed565b9161027c6009610275600885016101ed565b93016101ed565b90565b6102889061006f565b9052565b6102959061008a565b9052565b979593919a9998969492909a61014089019b5f8a016102b79161027f565b602089016102c49161028c565b604088016102d19161028c565b606087016102de9161028c565b608086016102eb9161028c565b60a085016102f89161028c565b60c084016103059161028c565b60e083016103129161028c565b61010082016103209161028c565b6101200161032d9161028c565b565b3461036c5761033f366004610060565b61036861034a6101fa565b9661035f9a989a969196959295949394610052565b9a8b9a8b610299565b0390f35b610058565b1c90565b60ff1690565b61038b9060086103909302610371565b610375565b90565b9061039e915461037b565b90565b6103ae600c600290610393565b90565b151590565b6103bf906103b1565b9052565b91906103d6905f602085019401906103b6565b565b34610408576103e8366004610060565b6104046103f36103a1565b6103fb610052565b918291826103c3565b0390f35b610058565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061043990610411565b810190811067ffffffffffffffff82111761045357604052565b61041b565b9061046b610464610052565b928361042f565b565b610478610140610458565b90565b5f90565b5f90565b61048b61046d565b9060208080808080808080808b6104a061047b565b8152016104ab61047f565b8152016104b661047f565b8152016104c161047f565b8152016104cc61047f565b8152016104d761047f565b8152016104e261047f565b8152016104ed61047f565b8152016104f861047f565b81520161050361047f565b81525050565b610511610483565b90565b9061051e9061006f565b9052565b9061052c9061008a565b9052565b9061062961061f600961054161046d565b946105586105505f83016101c1565b5f8801610514565b610570610567600183016101ed565b60208801610522565b61058861057f600283016101ed565b60408801610522565b6105a0610597600383016101ed565b60608801610522565b6105b86105af600483016101ed565b60808801610522565b6105d06105c7600583016101ed565b60a08801610522565b6105e86105df600683016101ed565b60c08801610522565b6106006105f7600783016101ed565b60e08801610522565b61061961060f600883016101ed565b6101008801610522565b016101ed565b6101208401610522565b565b61063490610530565b90565b61063f610509565b5061064a600d61062b565b9056fea26469706673582212205c9e2fb8843afad93163d4863cc6e4ceef4efffaeb4f370ba1b3b253f4f7a94664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x07\x98V[a\0\x19a\0,V[a\x06\x83a\x12b\x829a\x06\x83\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[_\x90V[_\x90V[_\x1C\x90V[\x90V[\x90V[a\0]a\0Xa\0b\x92a\0CV[a\0FV[a\0CV[\x90V[a\0qa\0v\x91a\0>V[a\0IV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x98a\0\x93a\0\x9D\x92a\0CV[a\0FV[a\0yV[\x90V[a\0\xB4a\0\xAFa\0\xB9\x92a\0yV[a\0FV[a\0yV[\x90V[a\0\xC5\x90a\0\xA0V[\x90V[a\x01\x01a\0\xFCa\0\xF7\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\0eV[a\0\x84V[a\0\xBCV[\x90V[a\x01\r\x90a\0\xA0V[\x90V[a\x01\x19\x90a\x01\x04V[\x90V[a\x01,a\x01'a\0\xC8V[a\x01\x10V[\x90V[a\x018\x90a\0\xBCV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x01c\x90a\x01;V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x01{W`@RV[a\x01EV[`\xE0\x1B\x90V[_\x80\xFD[\x15\x15\x90V[a\x01\x98\x81a\x01\x8AV[\x03a\x01\x9FWV[_\x80\xFD[\x90PQ\x90a\x01\xB0\x82a\x01\x8FV[V[\x90` \x82\x82\x03\x12a\x01\xCBWa\x01\xC8\x91_\x01a\x01\xA3V[\x90V[a\x01\x86V[` \x91\x81R\x01\x90V[_\x7FUSE_ANVIL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\r`\t` \x92a\x01\xD0V[a\x02\x16\x81a\x01\xD9V[\x01\x90V[a\x02/\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\0V[\x90V[a\x02:a\0,V[=_\x82>=\x90\xFD[a\x02K\x81a\0CV[\x03a\x02RWV[_\x80\xFD[\x90PQ\x90a\x02c\x82a\x02BV[V[\x90` \x82\x82\x03\x12a\x02~Wa\x02{\x91_\x01a\x02VV[\x90V[a\x01\x86V[_\x7FDEV_PRIVATE_KEY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xB7`\x0F` \x92a\x01\xD0V[a\x02\xC0\x81a\x02\x83V[\x01\x90V[a\x02\xD9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xAAV[\x90V[a\x02\xE5\x90a\0yV[\x90V[a\x02\xF1\x81a\x02\xDCV[\x03a\x02\xF8WV[_\x80\xFD[\x90PQ\x90a\x03\t\x82a\x02\xE8V[V[\x90` \x82\x82\x03\x12a\x03$Wa\x03!\x91_\x01a\x02\xFCV[\x90V[a\x01\x86V[_\x7FDEV_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03]`\x0B` \x92a\x01\xD0V[a\x03f\x81a\x03)V[\x01\x90V[a\x03\x7F\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03PV[\x90V[\x90a\x03\x95a\x03\x8Ea\0,V[\x92\x83a\x01YV[V[`\x01\x80`@\x1B\x03\x81\x11a\x03\xB3Wa\x03\xAF` \x91a\x01;V[\x01\x90V[a\x01EV[\x90a\x03\xCAa\x03\xC5\x83a\x03\x97V[a\x03\x82V[\x91\x82RV[_\x7FAnvil detected\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\0`\x0Ea\x03\xB8V[\x90a\x04\r` \x83\x01a\x03\xCFV[V[a\x04\x17a\x03\xF6V[\x90V[_\x7FANVIL_DEV_PRIVATE_KEY\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04N`\x15` \x92a\x01\xD0V[a\x04W\x81a\x04\x1AV[\x01\x90V[a\x04p\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04AV[\x90V[_\x7FANVIL_DEV_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xA7`\x11` \x92a\x01\xD0V[a\x04\xB0\x81a\x04sV[\x01\x90V[a\x04\xC9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\x9AV[\x90V[\x90V[a\x04\xE3a\x04\xDEa\x04\xE8\x92a\x04\xCCV[a\0FV[a\0CV[\x90V[\x90V[a\x05\x02a\x04\xFDa\x05\x07\x92a\x04\xEBV[a\0FV[a\0CV[\x90V[\x90V[a\x05!a\x05\x1Ca\x05&\x92a\x05\nV[a\0FV[a\0CV[\x90V[\x90V[a\x05@a\x05;a\x05E\x92a\x05)V[a\0FV[a\0CV[\x90V[_\x7FUnsupported network\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05|`\x13` \x92a\x01\xD0V[a\x05\x85\x81a\x05HV[\x01\x90V[a\x05\x9E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05oV[\x90V[a\x05\xAA\x90a\0CV[\x90RV[\x91\x90a\x05\xC1\x90_` \x85\x01\x94\x01\x90a\x05\xA1V[V[a\x05\xCEa\x01@a\x03\x82V[\x90V[\x90a\x05\xDB\x90a\0CV[\x90RV[\x90a\x05\xE9\x90a\x02\xDCV[\x90RV[a\x05\xF7\x90Qa\0CV[\x90V[_\x1B\x90V[\x90a\x06\x0B_\x19\x91a\x05\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x06-a\x06(a\x064\x92a\0IV[a\x06\x15V[\x82Ta\x05\xFFV[\x90UV[a\x06B\x90Qa\x02\xDCV[\x90V[\x90a\x06V`\x01\x80`\xA0\x1B\x03\x91a\x05\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06i\x90a\0\xBCV[\x90V[\x90V[\x90a\x06\x84a\x06\x7Fa\x06\x8B\x92a\x06`V[a\x06lV[\x82Ta\x06EV[\x90UV[\x90a\x07\x84a\x01 `\ta\x07\x8A\x94a\x06\xB3_\x82\x01a\x06\xAD_\x88\x01a\x05\xEDV[\x90a\x06\x18V[a\x06\xCC`\x01\x82\x01a\x06\xC6` \x88\x01a\x068V[\x90a\x06oV[a\x06\xE5`\x02\x82\x01a\x06\xDF`@\x88\x01a\x068V[\x90a\x06oV[a\x06\xFE`\x03\x82\x01a\x06\xF8``\x88\x01a\x068V[\x90a\x06oV[a\x07\x17`\x04\x82\x01a\x07\x11`\x80\x88\x01a\x068V[\x90a\x06oV[a\x070`\x05\x82\x01a\x07*`\xA0\x88\x01a\x068V[\x90a\x06oV[a\x07I`\x06\x82\x01a\x07C`\xC0\x88\x01a\x068V[\x90a\x06oV[a\x07b`\x07\x82\x01a\x07\\`\xE0\x88\x01a\x068V[\x90a\x06oV[a\x07|`\x08\x82\x01a\x07va\x01\0\x88\x01a\x068V[\x90a\x06oV[\x01\x92\x01a\x068V[\x90a\x06oV[V[\x90a\x07\x96\x91a\x06\x8FV[V[a\x07\xA0a\x10\x9CV[a\x07\xA9Fa\x11\nV[a\x07\xB1a\x006V[Pa\x07\xBAa\0:V[Pa\x07\xE6` a\x07\xD0a\x07\xCBa\x01\x1CV[a\x01/V[c~\xD1\xEC}\x90a\x07\xDEa\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x07\xF6`\x04\x82\x01a\x02\x1AV[\x03\x91Z\xFA\x90\x81\x15a\x10JW_\x91a\x10\x1CW[P_\x14a\x0F\x14Wa\x08\x1Fa\x08\x1Aa\x04\x0FV[a\x11\xA3V[a\x08J` a\x084a\x08/a\x01\x1CV[a\x01/V[c\xC1\x97\x8D\x1F\x90a\x08Ba\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x08Z`\x04\x82\x01a\x04[V[\x03\x91Z\xFA\x90\x81\x15a\x0F\x0FW_\x91a\x0E\xE1W[Pa\x08\x98` a\x08\x82a\x08}a\x01\x1CV[a\x01/V[c5\rV\xBF\x90a\x08\x90a\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x08\xA8`\x04\x82\x01a\x04\xB4V[\x03\x91Z\xFA\x90\x81\x15a\x0E\xDCW_\x91a\x0E\xAEW[PP[Fa\x08\xD2a\x08\xCCa\xA4\xB1a\x04\xCFV[\x91a\0CV[\x14\x80\x15a\x0E\x92W[_\x14a\n\x9FWa\t\x1D` \x82a\x08\xF6a\x08\xF1a\x01\x1CV[a\x01/V[a\t\x12c\xFF\xA1\x86Ia\t\x06a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\xAEV[\x03\x91Z\xFA\x90\x81\x15a\n\x9AW_\x91a\nlW[PsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADs\x1B\x02\xDA\x8C\xB0\xD0\x97\xEB\x8DW\xA1u\xB8\x8C}\x8BG\x99u\x06s\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84sh\xB3FX3\xFBr\xA7\x0E\xCD\xF4\x85\xE0\xE4\xC7\xBD\x86e\xFCE_\x91s\xAF\x88\xD0e\xE7|\x8C\xC2#\x93'\xC5\xED\xB3\xA42&\x8EX1\x93s\xFD\x08k\xC7\xCD\\H\x1D\xCC\x9C\x85\xEB\xE4x\xA1\xC0\xB6\x9F\xCB\xB9\x95s\x82\xAFID}\x8A\x07\xE3\xBD\x95\xBD\rV\xF3RAR?\xBA\xB1\x97a\t\xD0a\x05\xC3V[\x99_\x8B\x01\x90a\t\xDE\x91a\x05\xD1V[` \x8A\x01\x90a\t\xEC\x91a\x05\xDFV[`@\x89\x01\x90a\t\xFA\x91a\x05\xDFV[``\x88\x01\x90a\n\x08\x91a\x05\xDFV[`\x80\x87\x01\x90a\n\x16\x91a\x05\xDFV[`\xA0\x86\x01\x90a\n$\x91a\x05\xDFV[`\xC0\x85\x01\x90a\n2\x91a\x05\xDFV[`\xE0\x84\x01\x90a\n@\x91a\x05\xDFV[a\x01\0\x83\x01\x90a\nO\x91a\x05\xDFV[a\x01 \x82\x01\x90a\n^\x91a\x05\xDFV[a\ni\x90`\ra\x07\x8CV[[V[a\n\x8D\x91P` =\x81\x11a\n\x93W[a\n\x85\x81\x83a\x01YV[\x81\x01\x90a\x03\x0BV[_a\t/V[P=a\n{V[a\x022V[Fa\n\xB4a\n\xAEa!\x05a\x05\rV[\x91a\0CV[\x14_\x14a\x0C\x91Wa\n\xF8` \x82a\n\xD1a\n\xCCa\x01\x1CV[a\x01/V[a\n\xEDc\xFF\xA1\x86Ia\n\xE1a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\xAEV[\x03\x91Z\xFA\x90\x81\x15a\x0C\x8CW_\x91a\x0C^W[PsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADsGR\xBA]\xBC#\xF4M\x87\x82bv\xBFo\xD6\xB1\xC3r\xAD$s3\x12\x8A\x8F\xC1xi\x89}\xCEh\xED\x02miF!\xF6\xFD\xFDs&&fL&\x033nW\xB2q\xC5\xC0\xB2oB\x17A\xE4\x81s\xCFw\xA3\xBA\x9A\\\xA3\x99\xB7\xC9|t\xD5N[\x1B\xEB\x87NC\x91s\x835\x89\xFC\xD6\xED\xB6\xE0\x8FL|2\xD4\xF7\x1BT\xBD\xA0)\x13\x93s\xFD\xE4\xC9l\x85\x93Sn1\xF2)\xEA\x8F7\xB2\xAD\xA2i\x9B\xB2\x95sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x97a\x0B\xBFa\x05\xC3V[\x99_\x8B\x01\x90a\x0B\xCD\x91a\x05\xD1V[` \x8A\x01\x90a\x0B\xDB\x91a\x05\xDFV[`@\x89\x01\x90a\x0B\xE9\x91a\x05\xDFV[``\x88\x01\x90a\x0B\xF7\x91a\x05\xDFV[`\x80\x87\x01\x90a\x0C\x05\x91a\x05\xDFV[`\xA0\x86\x01\x90a\x0C\x13\x91a\x05\xDFV[`\xC0\x85\x01\x90a\x0C!\x91a\x05\xDFV[`\xE0\x84\x01\x90a\x0C/\x91a\x05\xDFV[a\x01\0\x83\x01\x90a\x0C>\x91a\x05\xDFV[a\x01 \x82\x01\x90a\x0CM\x91a\x05\xDFV[a\x0CX\x90`\ra\x07\x8CV[[a\njV[a\x0C\x7F\x91P` =\x81\x11a\x0C\x85W[a\x0Cw\x81\x83a\x01YV[\x81\x01\x90a\x03\x0BV[_a\x0B\nV[P=a\x0CmV[a\x022V[Fa\x0C\xA7a\x0C\xA1b\xAA6\xA7a\x05,V[\x91a\0CV[\x14_\x14a\x0EpWa\x0C\xEB` \x82a\x0C\xC4a\x0C\xBFa\x01\x1CV[a\x01/V[a\x0C\xE0c\xFF\xA1\x86Ia\x0C\xD4a\0,V[\x95\x86\x94\x85\x93\x84\x93a\x01\x80V[\x83R`\x04\x83\x01a\x05\xAEV[\x03\x91Z\xFA\x90\x81\x15a\x0EkW_\x91a\x0E=W[Psj\xE4=2q\xFFh\x88\xE7\xFCC\xFDs!\xA5\x03\xFFs\x89Qsz%\rV0\xB4\xCFS\x979\xDF,]\xAC\xB4\xC6Y\xF2H\x8Ds\x1F\x98C\x1C\x8A\xD9\x85#c\x1A\xE4\xA5\x9F&sF\xEA1\xF9\x84_\x90s\xE5\x92Bz\n\xEC\xE9-\xE3\xED\xEE\x1F\x18\xE0\x15|\x05\x86\x15d\x90s\x94\xA9\xD9\xAC\x8A\"SN?\xAC\xA9\xF4\xE7\xF2\xE2\xCF\x85\xD5\xE4\xC8\x93s\xAA\x8E#\xFB\x10y\xEAq\xE0\xA5oH\xA2\xAAQ\x85\x1D\x843\xD0\x95s\xC5X\xDB\xDD\x85e\x01\xFC\xD9\xAA\xF1\xE6.\xAEW\xA9\xF0b\x9A<\x97a\r\x9Fa\x05\xC3V[\x99_\x8B\x01\x90a\r\xAD\x91a\x05\xD1V[` \x8A\x01\x90a\r\xBB\x91a\x05\xDFV[`@\x89\x01\x90a\r\xC9\x91a\x05\xDFV[``\x88\x01\x90a\r\xD7\x91a\x05\xDFV[`\x80\x87\x01\x90a\r\xE5\x91a\x05\xDFV[`\xA0\x86\x01\x90a\r\xF3\x91a\x05\xDFV[`\xC0\x85\x01\x90a\x0E\x01\x91a\x05\xDFV[`\xE0\x84\x01\x90a\x0E\x0F\x91a\x05\xDFV[a\x01\0\x83\x01\x90a\x0E\x1E\x91a\x05\xDFV[a\x01 \x82\x01\x90a\x0E-\x91a\x05\xDFV[a\x0E8\x90`\ra\x07\x8CV[a\x0CYV[a\x0E^\x91P` =\x81\x11a\x0EdW[a\x0EV\x81\x83a\x01YV[\x81\x01\x90a\x03\x0BV[_a\x0C\xFDV[P=a\x0ELV[a\x022V[a\x0Exa\0,V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\x8E`\x04\x82\x01a\x05\x89V[\x03\x90\xFD[PFa\x0E\xA8a\x0E\xA2azia\x04\xEEV[\x91a\0CV[\x14a\x08\xDAV[a\x0E\xCF\x91P` =\x81\x11a\x0E\xD5W[a\x0E\xC7\x81\x83a\x01YV[\x81\x01\x90a\x03\x0BV[_a\x08\xBAV[P=a\x0E\xBDV[a\x022V[a\x0F\x02\x91P` =\x81\x11a\x0F\x08W[a\x0E\xFA\x81\x83a\x01YV[\x81\x01\x90a\x02eV[_a\x08lV[P=a\x0E\xF0V[a\x022V[a\x0F?` a\x0F)a\x0F$a\x01\x1CV[a\x01/V[c\xC1\x97\x8D\x1F\x90a\x0F7a\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x0FO`\x04\x82\x01a\x02\xC4V[\x03\x91Z\xFA\x90\x81\x15a\x10\x17W_\x91a\x0F\xE9W[Pa\x0F\x8D` a\x0Fwa\x0Fra\x01\x1CV[a\x01/V[c5\rV\xBF\x90a\x0F\x85a\0,V[\x93\x84\x92a\x01\x80V[\x82R\x81\x80a\x0F\x9D`\x04\x82\x01a\x03jV[\x03\x91Z\xFA\x90\x81\x15a\x0F\xE4W_\x91a\x0F\xB6W[PPa\x08\xBDV[a\x0F\xD7\x91P` =\x81\x11a\x0F\xDDW[a\x0F\xCF\x81\x83a\x01YV[\x81\x01\x90a\x03\x0BV[_a\x0F\xAFV[P=a\x0F\xC5V[a\x022V[a\x10\n\x91P` =\x81\x11a\x10\x10W[a\x10\x02\x81\x83a\x01YV[\x81\x01\x90a\x02eV[_a\x0FaV[P=a\x0F\xF8V[a\x022V[a\x10=\x91P` =\x81\x11a\x10CW[a\x105\x81\x83a\x01YV[\x81\x01\x90a\x01\xB2V[_a\x08\x08V[P=a\x10+V[a\x022V[`\x10\x1B\x90V[\x90a\x10cb\xFF\0\0\x91a\x10OV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10v\x90a\x01\x8AV[\x90V[\x90V[\x90a\x10\x91a\x10\x8Ca\x10\x98\x92a\x10mV[a\x10yV[\x82Ta\x10UV[\x90UV[a\x10\xA4a\x10\xB2V[a\x10\xB0`\x01`\x0Ca\x10|V[V[a\x10\xBAa\x10\xBCV[V[a\x10\xC4a\x10\xFCV[V[\x90a\x10\xD2`\xFF\x91a\x05\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x10\xF1a\x10\xECa\x10\xF8\x92a\x10mV[a\x10yV[\x82Ta\x10\xC6V[\x90UV[a\x11\x08`\x01`\x0Ca\x10\xDCV[V[a\x115a\x11Da\x11I\x92a\x11\x1Ca\0,V[\x92\x83\x91`\x04` \x84\x01c\xF5\xB1\xBB\xA9`\xE0\x1B\x81R\x01a\x05\xAEV[` \x82\x01\x81\x03\x82R\x03\x82a\x01YV[a\x11\xE4V[V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x11ya\x11\x82` \x93a\x11\x87\x93a\x11p\x81a\x11KV[\x93\x84\x80\x93a\x01\xD0V[\x95\x86\x91\x01a\x11OV[a\x01;V[\x01\x90V[a\x11\xA0\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x11ZV[\x90V[a\x11\xCEa\x11\xDDa\x11\xE2\x92a\x11\xB5a\0,V[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x11\x8BV[` \x82\x01\x81\x03\x82R\x03\x82a\x01YV[a\x11\xE4V[V[a\x11\xF7\x90a\x11\xF2`\x01a\x12/V[a\x12OV[V[Q\x90V[jconsole.log\x90V[_\x80\x91a\x12\x18\x81a\x11\xF9V[\x90` a\x12#a\x11\xFDV[\x91\x01\x90Z\xFAPV[_\x90V[a\x127a\x12+V[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x12;Wa\x12_\x90a\x12\x0CV[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\rV[a\0\x1D_5a\0LV[\x80c\xA2\xD7\xC8\x8E\x14a\0GW\x80c\xD7\xB6WE\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x03\xD8V[a\x03/V[a\x01pV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x90V[a\0{\x90a\0oV[\x90RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x93\x90a\0\x7FV[\x90V[a\0\x9F\x90a\0\x8AV[\x90RV[\x90a\x01 \x80a\x01X\x93a\0\xBC_\x82\x01Q_\x86\x01\x90a\0rV[a\0\xCE` \x82\x01Q` \x86\x01\x90a\0\x96V[a\0\xE0`@\x82\x01Q`@\x86\x01\x90a\0\x96V[a\0\xF2``\x82\x01Q``\x86\x01\x90a\0\x96V[a\x01\x04`\x80\x82\x01Q`\x80\x86\x01\x90a\0\x96V[a\x01\x16`\xA0\x82\x01Q`\xA0\x86\x01\x90a\0\x96V[a\x01(`\xC0\x82\x01Q`\xC0\x86\x01\x90a\0\x96V[a\x01:`\xE0\x82\x01Q`\xE0\x86\x01\x90a\0\x96V[a\x01Na\x01\0\x82\x01Qa\x01\0\x86\x01\x90a\0\x96V[\x01Q\x91\x01\x90a\0\x96V[V[\x91\x90a\x01n\x90_a\x01@\x85\x01\x94\x01\x90a\0\xA3V[V[4a\x01\xA0Wa\x01\x806`\x04a\0`V[a\x01\x9Ca\x01\x8Ba\x067V[a\x01\x93a\0RV[\x91\x82\x91\x82a\x01ZV[\x03\x90\xF3[a\0XV[_\x1C\x90V[\x90V[a\x01\xB9a\x01\xBE\x91a\x01\xA5V[a\x01\xAAV[\x90V[a\x01\xCB\x90Ta\x01\xADV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xA5V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[`\r\x90a\x02\x08_\x83\x01a\x01\xC1V[\x91a\x02\x15`\x01\x82\x01a\x01\xEDV[\x91a\x02\"`\x02\x83\x01a\x01\xEDV[\x91a\x02/`\x03\x82\x01a\x01\xEDV[\x91a\x02<`\x04\x83\x01a\x01\xEDV[\x91a\x02I`\x05\x82\x01a\x01\xEDV[\x91a\x02V`\x06\x83\x01a\x01\xEDV[\x91a\x02c`\x07\x82\x01a\x01\xEDV[\x91a\x02|`\ta\x02u`\x08\x85\x01a\x01\xEDV[\x93\x01a\x01\xEDV[\x90V[a\x02\x88\x90a\0oV[\x90RV[a\x02\x95\x90a\0\x8AV[\x90RV[\x97\x95\x93\x91\x9A\x99\x98\x96\x94\x92\x90\x9Aa\x01@\x89\x01\x9B_\x8A\x01a\x02\xB7\x91a\x02\x7FV[` \x89\x01a\x02\xC4\x91a\x02\x8CV[`@\x88\x01a\x02\xD1\x91a\x02\x8CV[``\x87\x01a\x02\xDE\x91a\x02\x8CV[`\x80\x86\x01a\x02\xEB\x91a\x02\x8CV[`\xA0\x85\x01a\x02\xF8\x91a\x02\x8CV[`\xC0\x84\x01a\x03\x05\x91a\x02\x8CV[`\xE0\x83\x01a\x03\x12\x91a\x02\x8CV[a\x01\0\x82\x01a\x03 \x91a\x02\x8CV[a\x01 \x01a\x03-\x91a\x02\x8CV[V[4a\x03lWa\x03?6`\x04a\0`V[a\x03ha\x03Ja\x01\xFAV[\x96a\x03_\x9A\x98\x9A\x96\x91\x96\x95\x92\x95\x94\x93\x94a\0RV[\x9A\x8B\x9A\x8Ba\x02\x99V[\x03\x90\xF3[a\0XV[\x1C\x90V[`\xFF\x16\x90V[a\x03\x8B\x90`\x08a\x03\x90\x93\x02a\x03qV[a\x03uV[\x90V[\x90a\x03\x9E\x91Ta\x03{V[\x90V[a\x03\xAE`\x0C`\x02\x90a\x03\x93V[\x90V[\x15\x15\x90V[a\x03\xBF\x90a\x03\xB1V[\x90RV[\x91\x90a\x03\xD6\x90_` \x85\x01\x94\x01\x90a\x03\xB6V[V[4a\x04\x08Wa\x03\xE86`\x04a\0`V[a\x04\x04a\x03\xF3a\x03\xA1V[a\x03\xFBa\0RV[\x91\x82\x91\x82a\x03\xC3V[\x03\x90\xF3[a\0XV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x049\x90a\x04\x11V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04SW`@RV[a\x04\x1BV[\x90a\x04ka\x04da\0RV[\x92\x83a\x04/V[V[a\x04xa\x01@a\x04XV[\x90V[_\x90V[_\x90V[a\x04\x8Ba\x04mV[\x90` \x80\x80\x80\x80\x80\x80\x80\x80\x80\x8Ba\x04\xA0a\x04{V[\x81R\x01a\x04\xABa\x04\x7FV[\x81R\x01a\x04\xB6a\x04\x7FV[\x81R\x01a\x04\xC1a\x04\x7FV[\x81R\x01a\x04\xCCa\x04\x7FV[\x81R\x01a\x04\xD7a\x04\x7FV[\x81R\x01a\x04\xE2a\x04\x7FV[\x81R\x01a\x04\xEDa\x04\x7FV[\x81R\x01a\x04\xF8a\x04\x7FV[\x81R\x01a\x05\x03a\x04\x7FV[\x81RPPV[a\x05\x11a\x04\x83V[\x90V[\x90a\x05\x1E\x90a\0oV[\x90RV[\x90a\x05,\x90a\0\x8AV[\x90RV[\x90a\x06)a\x06\x1F`\ta\x05Aa\x04mV[\x94a\x05Xa\x05P_\x83\x01a\x01\xC1V[_\x88\x01a\x05\x14V[a\x05pa\x05g`\x01\x83\x01a\x01\xEDV[` \x88\x01a\x05\"V[a\x05\x88a\x05\x7F`\x02\x83\x01a\x01\xEDV[`@\x88\x01a\x05\"V[a\x05\xA0a\x05\x97`\x03\x83\x01a\x01\xEDV[``\x88\x01a\x05\"V[a\x05\xB8a\x05\xAF`\x04\x83\x01a\x01\xEDV[`\x80\x88\x01a\x05\"V[a\x05\xD0a\x05\xC7`\x05\x83\x01a\x01\xEDV[`\xA0\x88\x01a\x05\"V[a\x05\xE8a\x05\xDF`\x06\x83\x01a\x01\xEDV[`\xC0\x88\x01a\x05\"V[a\x06\0a\x05\xF7`\x07\x83\x01a\x01\xEDV[`\xE0\x88\x01a\x05\"V[a\x06\x19a\x06\x0F`\x08\x83\x01a\x01\xEDV[a\x01\0\x88\x01a\x05\"V[\x01a\x01\xEDV[a\x01 \x84\x01a\x05\"V[V[a\x064\x90a\x050V[\x90V[a\x06?a\x05\tV[Pa\x06J`\ra\x06+V[\x90V\xFE\xA2dipfsX\"\x12 \\\x9E/\xB8\x84:\xFA\xD91c\xD4\x86<\xC6\xE4\xCE\xEFN\xFF\xFA\xEBO7\x0B\xA1\xB3\xB2S\xF4\xF7\xA9FdsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61040d565b61001d5f3561004c565b8063a2d7c88e14610047578063d7b65745146100425763f8ccbf470361000e576103d8565b61032f565b610170565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261006a57565b61005c565b90565b61007b9061006f565b9052565b60018060a01b031690565b6100939061007f565b90565b61009f9061008a565b9052565b9061012080610158936100bc5f8201515f860190610072565b6100ce60208201516020860190610096565b6100e060408201516040860190610096565b6100f260608201516060860190610096565b61010460808201516080860190610096565b61011660a082015160a0860190610096565b61012860c082015160c0860190610096565b61013a60e082015160e0860190610096565b61014e610100820151610100860190610096565b0151910190610096565b565b919061016e905f61014085019401906100a3565b565b346101a057610180366004610060565b61019c61018b610637565b610193610052565b9182918261015a565b0390f35b610058565b5f1c90565b90565b6101b96101be916101a5565b6101aa565b90565b6101cb90546101ad565b90565b60018060a01b031690565b6101e56101ea916101a5565b6101ce565b90565b6101f790546101d9565b90565b600d906102085f83016101c1565b91610215600182016101ed565b91610222600283016101ed565b9161022f600382016101ed565b9161023c600483016101ed565b91610249600582016101ed565b91610256600683016101ed565b91610263600782016101ed565b9161027c6009610275600885016101ed565b93016101ed565b90565b6102889061006f565b9052565b6102959061008a565b9052565b979593919a9998969492909a61014089019b5f8a016102b79161027f565b602089016102c49161028c565b604088016102d19161028c565b606087016102de9161028c565b608086016102eb9161028c565b60a085016102f89161028c565b60c084016103059161028c565b60e083016103129161028c565b61010082016103209161028c565b6101200161032d9161028c565b565b3461036c5761033f366004610060565b61036861034a6101fa565b9661035f9a989a969196959295949394610052565b9a8b9a8b610299565b0390f35b610058565b1c90565b60ff1690565b61038b9060086103909302610371565b610375565b90565b9061039e915461037b565b90565b6103ae600c600290610393565b90565b151590565b6103bf906103b1565b9052565b91906103d6905f602085019401906103b6565b565b34610408576103e8366004610060565b6104046103f36103a1565b6103fb610052565b918291826103c3565b0390f35b610058565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061043990610411565b810190811067ffffffffffffffff82111761045357604052565b61041b565b9061046b610464610052565b928361042f565b565b610478610140610458565b90565b5f90565b5f90565b61048b61046d565b9060208080808080808080808b6104a061047b565b8152016104ab61047f565b8152016104b661047f565b8152016104c161047f565b8152016104cc61047f565b8152016104d761047f565b8152016104e261047f565b8152016104ed61047f565b8152016104f861047f565b81520161050361047f565b81525050565b610511610483565b90565b9061051e9061006f565b9052565b9061052c9061008a565b9052565b9061062961061f600961054161046d565b946105586105505f83016101c1565b5f8801610514565b610570610567600183016101ed565b60208801610522565b61058861057f600283016101ed565b60408801610522565b6105a0610597600383016101ed565b60608801610522565b6105b86105af600483016101ed565b60808801610522565b6105d06105c7600583016101ed565b60a08801610522565b6105e86105df600683016101ed565b60c08801610522565b6106006105f7600783016101ed565b60e08801610522565b61061961060f600883016101ed565b6101008801610522565b016101ed565b6101208401610522565b565b61063490610530565b90565b61063f610509565b5061064a600d61062b565b9056fea26469706673582212205c9e2fb8843afad93163d4863cc6e4ceef4efffaeb4f370ba1b3b253f4f7a94664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\rV[a\0\x1D_5a\0LV[\x80c\xA2\xD7\xC8\x8E\x14a\0GW\x80c\xD7\xB6WE\x14a\0BWc\xF8\xCC\xBFG\x03a\0\x0EWa\x03\xD8V[a\x03/V[a\x01pV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0jWV[a\0\\V[\x90V[a\0{\x90a\0oV[\x90RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x93\x90a\0\x7FV[\x90V[a\0\x9F\x90a\0\x8AV[\x90RV[\x90a\x01 \x80a\x01X\x93a\0\xBC_\x82\x01Q_\x86\x01\x90a\0rV[a\0\xCE` \x82\x01Q` \x86\x01\x90a\0\x96V[a\0\xE0`@\x82\x01Q`@\x86\x01\x90a\0\x96V[a\0\xF2``\x82\x01Q``\x86\x01\x90a\0\x96V[a\x01\x04`\x80\x82\x01Q`\x80\x86\x01\x90a\0\x96V[a\x01\x16`\xA0\x82\x01Q`\xA0\x86\x01\x90a\0\x96V[a\x01(`\xC0\x82\x01Q`\xC0\x86\x01\x90a\0\x96V[a\x01:`\xE0\x82\x01Q`\xE0\x86\x01\x90a\0\x96V[a\x01Na\x01\0\x82\x01Qa\x01\0\x86\x01\x90a\0\x96V[\x01Q\x91\x01\x90a\0\x96V[V[\x91\x90a\x01n\x90_a\x01@\x85\x01\x94\x01\x90a\0\xA3V[V[4a\x01\xA0Wa\x01\x806`\x04a\0`V[a\x01\x9Ca\x01\x8Ba\x067V[a\x01\x93a\0RV[\x91\x82\x91\x82a\x01ZV[\x03\x90\xF3[a\0XV[_\x1C\x90V[\x90V[a\x01\xB9a\x01\xBE\x91a\x01\xA5V[a\x01\xAAV[\x90V[a\x01\xCB\x90Ta\x01\xADV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xA5V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[`\r\x90a\x02\x08_\x83\x01a\x01\xC1V[\x91a\x02\x15`\x01\x82\x01a\x01\xEDV[\x91a\x02\"`\x02\x83\x01a\x01\xEDV[\x91a\x02/`\x03\x82\x01a\x01\xEDV[\x91a\x02<`\x04\x83\x01a\x01\xEDV[\x91a\x02I`\x05\x82\x01a\x01\xEDV[\x91a\x02V`\x06\x83\x01a\x01\xEDV[\x91a\x02c`\x07\x82\x01a\x01\xEDV[\x91a\x02|`\ta\x02u`\x08\x85\x01a\x01\xEDV[\x93\x01a\x01\xEDV[\x90V[a\x02\x88\x90a\0oV[\x90RV[a\x02\x95\x90a\0\x8AV[\x90RV[\x97\x95\x93\x91\x9A\x99\x98\x96\x94\x92\x90\x9Aa\x01@\x89\x01\x9B_\x8A\x01a\x02\xB7\x91a\x02\x7FV[` \x89\x01a\x02\xC4\x91a\x02\x8CV[`@\x88\x01a\x02\xD1\x91a\x02\x8CV[``\x87\x01a\x02\xDE\x91a\x02\x8CV[`\x80\x86\x01a\x02\xEB\x91a\x02\x8CV[`\xA0\x85\x01a\x02\xF8\x91a\x02\x8CV[`\xC0\x84\x01a\x03\x05\x91a\x02\x8CV[`\xE0\x83\x01a\x03\x12\x91a\x02\x8CV[a\x01\0\x82\x01a\x03 \x91a\x02\x8CV[a\x01 \x01a\x03-\x91a\x02\x8CV[V[4a\x03lWa\x03?6`\x04a\0`V[a\x03ha\x03Ja\x01\xFAV[\x96a\x03_\x9A\x98\x9A\x96\x91\x96\x95\x92\x95\x94\x93\x94a\0RV[\x9A\x8B\x9A\x8Ba\x02\x99V[\x03\x90\xF3[a\0XV[\x1C\x90V[`\xFF\x16\x90V[a\x03\x8B\x90`\x08a\x03\x90\x93\x02a\x03qV[a\x03uV[\x90V[\x90a\x03\x9E\x91Ta\x03{V[\x90V[a\x03\xAE`\x0C`\x02\x90a\x03\x93V[\x90V[\x15\x15\x90V[a\x03\xBF\x90a\x03\xB1V[\x90RV[\x91\x90a\x03\xD6\x90_` \x85\x01\x94\x01\x90a\x03\xB6V[V[4a\x04\x08Wa\x03\xE86`\x04a\0`V[a\x04\x04a\x03\xF3a\x03\xA1V[a\x03\xFBa\0RV[\x91\x82\x91\x82a\x03\xC3V[\x03\x90\xF3[a\0XV[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x049\x90a\x04\x11V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04SW`@RV[a\x04\x1BV[\x90a\x04ka\x04da\0RV[\x92\x83a\x04/V[V[a\x04xa\x01@a\x04XV[\x90V[_\x90V[_\x90V[a\x04\x8Ba\x04mV[\x90` \x80\x80\x80\x80\x80\x80\x80\x80\x80\x8Ba\x04\xA0a\x04{V[\x81R\x01a\x04\xABa\x04\x7FV[\x81R\x01a\x04\xB6a\x04\x7FV[\x81R\x01a\x04\xC1a\x04\x7FV[\x81R\x01a\x04\xCCa\x04\x7FV[\x81R\x01a\x04\xD7a\x04\x7FV[\x81R\x01a\x04\xE2a\x04\x7FV[\x81R\x01a\x04\xEDa\x04\x7FV[\x81R\x01a\x04\xF8a\x04\x7FV[\x81R\x01a\x05\x03a\x04\x7FV[\x81RPPV[a\x05\x11a\x04\x83V[\x90V[\x90a\x05\x1E\x90a\0oV[\x90RV[\x90a\x05,\x90a\0\x8AV[\x90RV[\x90a\x06)a\x06\x1F`\ta\x05Aa\x04mV[\x94a\x05Xa\x05P_\x83\x01a\x01\xC1V[_\x88\x01a\x05\x14V[a\x05pa\x05g`\x01\x83\x01a\x01\xEDV[` \x88\x01a\x05\"V[a\x05\x88a\x05\x7F`\x02\x83\x01a\x01\xEDV[`@\x88\x01a\x05\"V[a\x05\xA0a\x05\x97`\x03\x83\x01a\x01\xEDV[``\x88\x01a\x05\"V[a\x05\xB8a\x05\xAF`\x04\x83\x01a\x01\xEDV[`\x80\x88\x01a\x05\"V[a\x05\xD0a\x05\xC7`\x05\x83\x01a\x01\xEDV[`\xA0\x88\x01a\x05\"V[a\x05\xE8a\x05\xDF`\x06\x83\x01a\x01\xEDV[`\xC0\x88\x01a\x05\"V[a\x06\0a\x05\xF7`\x07\x83\x01a\x01\xEDV[`\xE0\x88\x01a\x05\"V[a\x06\x19a\x06\x0F`\x08\x83\x01a\x01\xEDV[a\x01\0\x88\x01a\x05\"V[\x01a\x01\xEDV[a\x01 \x84\x01a\x05\"V[V[a\x064\x90a\x050V[\x90V[a\x06?a\x05\tV[Pa\x06J`\ra\x06+V[\x90V\xFE\xA2dipfsX\"\x12 \\\x9E/\xB8\x84:\xFA\xD91c\xD4\x86<\xC6\xE4\xCE\xEFN\xFF\xFA\xEBO7\x0B\xA1\xB3\xB2S\xF4\xF7\xA9FdsolcC\0\x08\x1A\x003",
    );
    /**```solidity
struct NetworkConfig { uint256 deployerKey; address deployerAddress; address aaveLendingPool; address uniswapV2Router; address uniswapV3Factory; address uniswapV3Router; address aerodromeRouter; address usdc; address usdt; address weth; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NetworkConfig {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub uniswapV2Router: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub aerodromeRouter: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NetworkConfig> for UnderlyingRustTuple<'_> {
            fn from(value: NetworkConfig) -> Self {
                (
                    value.deployerKey,
                    value.deployerAddress,
                    value.aaveLendingPool,
                    value.uniswapV2Router,
                    value.uniswapV3Factory,
                    value.uniswapV3Router,
                    value.aerodromeRouter,
                    value.usdc,
                    value.usdt,
                    value.weth,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NetworkConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    deployerKey: tuple.0,
                    deployerAddress: tuple.1,
                    aaveLendingPool: tuple.2,
                    uniswapV2Router: tuple.3,
                    uniswapV3Factory: tuple.4,
                    uniswapV3Router: tuple.5,
                    aerodromeRouter: tuple.6,
                    usdc: tuple.7,
                    usdt: tuple.8,
                    weth: tuple.9,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for NetworkConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for NetworkConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deployerKey),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.deployerAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aaveLendingPool,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV2Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Factory,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniswapV3Router,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aerodromeRouter,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdc,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.usdt,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.weth,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for NetworkConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for NetworkConfig {
            const NAME: &'static str = "NetworkConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "NetworkConfig(uint256 deployerKey,address deployerAddress,address aaveLendingPool,address uniswapV2Router,address uniswapV3Factory,address uniswapV3Router,address aerodromeRouter,address usdc,address usdt,address weth)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deployerKey)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.deployerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aaveLendingPool,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV2Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Factory,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.uniswapV3Router,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.aerodromeRouter,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.usdt,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.weth,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for NetworkConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerKey,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deployerAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aaveLendingPool,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV2Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Factory,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.uniswapV3Router,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.aerodromeRouter,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdc,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.usdt,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.weth,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerKey,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deployerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aaveLendingPool,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV2Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Factory,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.uniswapV3Router,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.aerodromeRouter,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdc,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.usdt,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.weth,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activeNetworkConfig()` and selector `0xd7b65745`.
```solidity
function activeNetworkConfig() external view returns (uint256 deployerKey, address deployerAddress, address aaveLendingPool, address uniswapV2Router, address uniswapV3Factory, address uniswapV3Router, address aerodromeRouter, address usdc, address usdt, address weth);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigCall {}
    ///Container type for the return parameters of the [`activeNetworkConfig()`](activeNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct activeNetworkConfigReturn {
        pub deployerKey: alloy::sol_types::private::primitives::aliases::U256,
        pub deployerAddress: alloy::sol_types::private::Address,
        pub aaveLendingPool: alloy::sol_types::private::Address,
        pub uniswapV2Router: alloy::sol_types::private::Address,
        pub uniswapV3Factory: alloy::sol_types::private::Address,
        pub uniswapV3Router: alloy::sol_types::private::Address,
        pub aerodromeRouter: alloy::sol_types::private::Address,
        pub usdc: alloy::sol_types::private::Address,
        pub usdt: alloy::sol_types::private::Address,
        pub weth: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activeNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activeNetworkConfigReturn) -> Self {
                    (
                        value.deployerKey,
                        value.deployerAddress,
                        value.aaveLendingPool,
                        value.uniswapV2Router,
                        value.uniswapV3Factory,
                        value.uniswapV3Router,
                        value.aerodromeRouter,
                        value.usdc,
                        value.usdt,
                        value.weth,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activeNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deployerKey: tuple.0,
                        deployerAddress: tuple.1,
                        aaveLendingPool: tuple.2,
                        uniswapV2Router: tuple.3,
                        uniswapV3Factory: tuple.4,
                        uniswapV3Router: tuple.5,
                        aerodromeRouter: tuple.6,
                        usdc: tuple.7,
                        usdt: tuple.8,
                        weth: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activeNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activeNetworkConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activeNetworkConfig()";
            const SELECTOR: [u8; 4] = [215u8, 182u8, 87u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getActiveNetworkConfig()` and selector `0xa2d7c88e`.
```solidity
function getActiveNetworkConfig() external view returns (NetworkConfig memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigCall {}
    ///Container type for the return parameters of the [`getActiveNetworkConfig()`](getActiveNetworkConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getActiveNetworkConfigReturn {
        pub _0: <NetworkConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (NetworkConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <NetworkConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveNetworkConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveNetworkConfigReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveNetworkConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveNetworkConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveNetworkConfigReturn;
            type ReturnTuple<'a> = (NetworkConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveNetworkConfig()";
            const SELECTOR: [u8; 4] = [162u8, 215u8, 200u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HelperConfig`](self) function calls.
    pub enum HelperConfigCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        activeNetworkConfig(activeNetworkConfigCall),
        getActiveNetworkConfig(getActiveNetworkConfigCall),
    }
    #[automatically_derived]
    impl HelperConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [162u8, 215u8, 200u8, 142u8],
            [215u8, 182u8, 87u8, 69u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HelperConfigCalls {
        const NAME: &'static str = "HelperConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activeNetworkConfig(_) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveNetworkConfig(_) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<HelperConfigCalls>] = &[
                {
                    fn getActiveNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::getActiveNetworkConfig)
                    }
                    getActiveNetworkConfig
                },
                {
                    fn activeNetworkConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::activeNetworkConfig)
                    }
                    activeNetworkConfig
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<HelperConfigCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(HelperConfigCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activeNetworkConfig(inner) => {
                    <activeNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveNetworkConfig(inner) => {
                    <getActiveNetworkConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HelperConfigInstance<T, P, N> {
        HelperConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HelperConfigInstance<T, P, N>>,
    > {
        HelperConfigInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        HelperConfigInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`HelperConfig`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HelperConfig`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HelperConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for HelperConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HelperConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`HelperConfig`](self) contract instance.

See the [wrapper's documentation](`HelperConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HelperConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> HelperConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HelperConfigInstance<T, P, N> {
            HelperConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`activeNetworkConfig`] function.
        pub fn activeNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, activeNetworkConfigCall, N> {
            self.call_builder(&activeNetworkConfigCall {})
        }
        ///Creates a new call builder for the [`getActiveNetworkConfig`] function.
        pub fn getActiveNetworkConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getActiveNetworkConfigCall, N> {
            self.call_builder(&getActiveNetworkConfigCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > HelperConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
