/**

Generated by the following Solidity interface...
```solidity
interface MockERC20 {
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(string name, string symbol);

    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function decimals() external view returns (uint8);
    function mint(address to, uint256 amount) external;
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "symbol",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ERC20InsufficientAllowance",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientBalance",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSpender",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod MockERC20 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052346100305761001a610014610187565b906101a9565b610022610035565b610da26104258239610da290f35b61003b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100679061003f565b810190811060018060401b0382111761007f57604052565b610049565b90610097610090610035565b928361005d565b565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b60018060401b0381116100c5576100c160209161003f565b0190565b610049565b90825f9392825e0152565b909291926100ea6100e5826100a9565b610084565b9381855260208501908284011161010657610104926100ca565b565b6100a5565b9080601f8301121561012957816020610126935191016100d5565b90565b6100a1565b919091604081840312610182575f81015160018060401b03811161017d578361015891830161010b565b92602082015160018060401b03811161017857610175920161010b565b90565b61009d565b61009d565b610099565b6101a56111c78038038061019a81610084565b92833981019061012e565b9091565b906101b39161040c565b565b5190565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101ed575b60208310146101e857565b6101b9565b91607f16916101dd565b5f5260205f2090565b601f602091010490565b1b90565b919060086102299102916102235f198461020a565b9261020a565b9181191691161790565b90565b90565b61024d61024861025292610233565b610236565b610233565b90565b90565b919061026e61026961027693610239565b610255565b90835461020e565b9055565b5f90565b6102909161028a61027a565b91610258565b565b5b81811061029e575050565b806102ab5f60019361027e565b01610293565b9190601f81116102c1575b505050565b6102cd6102f2936101f7565b9060206102d984610200565b830193106102fa575b6102eb90610200565b0190610292565b5f80806102bc565b91506102eb819290506102e2565b1c90565b9061031c905f1990600802610308565b191690565b8161032b9161030c565b906002021790565b9061033d816101b5565b9060018060401b0382116103fb5761035f8261035985546101cd565b856102b1565b602090601f831160011461039357918091610382935f92610387575b5050610321565b90555b565b90915001515f8061037b565b601f198316916103a2856101f7565b925f5b8181106103e3575091600293918560019694106103c9575b50505002019055610385565b6103d9910151601f84169061030c565b90555f80806103bd565b919360206001819287870151815501950192016103a5565b610049565b9061040a91610333565b565b9061041b610422926003610400565b6004610400565b56fe60806040526004361015610013575b6104e7565b61001d5f356100bc565b806306fdde03146100b7578063095ea7b3146100b257806318160ddd146100ad57806323b872dd146100a8578063313ce567146100a357806340c10f191461009e57806370a082311461009957806395d89b4114610094578063a9059cbb1461008f5763dd62ed3e0361000e576104b1565b61044e565b610419565b6103e4565b610392565b610358565b6102fa565b61028b565b610233565b61014a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100da57565b6100cc565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61012061012960209361012e93610117816100df565b938480936100e3565b958691016100ec565b6100f7565b0190565b6101479160208201915f818403910152610101565b90565b3461017a5761015a3660046100d0565b610176610165610644565b61016d6100c2565b91829182610132565b0390f35b6100c8565b60018060a01b031690565b6101939061017f565b90565b61019f8161018a565b036101a657565b5f80fd5b905035906101b782610196565b565b90565b6101c5816101b9565b036101cc57565b5f80fd5b905035906101dd826101bc565b565b919060408382031261020757806101fb610204925f86016101aa565b936020016101d0565b90565b6100cc565b151590565b61021a9061020c565b9052565b9190610231905f60208501940190610211565b565b346102645761026061024f6102493660046101df565b9061065e565b6102576100c2565b9182918261021e565b0390f35b6100c8565b610272906101b9565b9052565b9190610289905f60208501940190610269565b565b346102bb5761029b3660046100d0565b6102b76102a66106ad565b6102ae6100c2565b91829182610276565b0390f35b6100c8565b90916060828403126102f5576102f26102db845f85016101aa565b936102e981602086016101aa565b936040016101d0565b90565b6100cc565b3461032b576103276103166103103660046102c0565b916106c3565b61031e6100c2565b9182918261021e565b0390f35b6100c8565b60ff1690565b61033f90610330565b9052565b9190610356905f60208501940190610336565b565b34610388576103683660046100d0565b610384610373610718565b61037b6100c2565b91829182610343565b0390f35b6100c8565b5f0190565b346103c1576103ab6103a53660046101df565b9061072e565b6103b36100c2565b806103bd8161038d565b0390f35b6100c8565b906020828203126103df576103dc915f016101aa565b90565b6100cc565b34610414576104106103ff6103fa3660046103c6565b610784565b6104076100c2565b91829182610276565b0390f35b6100c8565b34610449576104293660046100d0565b6104456104346107a2565b61043c6100c2565b91829182610132565b0390f35b6100c8565b3461047f5761047b61046a6104643660046101df565b906107b8565b6104726100c2565b9182918261021e565b0390f35b6100c8565b91906040838203126104ac57806104a06104a9925f86016101aa565b936020016101aa565b90565b6100cc565b346104e2576104de6104cd6104c7366004610484565b906107f0565b6104d56100c2565b91829182610276565b0390f35b6100c8565b5f80fd5b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610524575b602083101461051f57565b6104f0565b91607f1691610514565b60209181520190565b5f5260205f2090565b905f929180549061055a61055383610504565b809461052e565b916001811690815f146105b15750600114610575575b505050565b6105829192939450610537565b915f925b81841061059957505001905f8080610570565b60018160209295939554848601520191019290610586565b92949550505060ff19168252151560200201905f8080610570565b906105d691610540565b90565b634e487b7160e01b5f52604160045260245ffd5b906105f7906100f7565b810190811067ffffffffffffffff82111761061157604052565b6105d9565b9061063661062f926106266100c2565b938480926105cc565b03836105ed565b565b61064190610616565b90565b61064c6104eb565b506106576003610638565b90565b5f90565b61067b9161066a61065a565b5061067361081c565b919091610829565b600190565b5f90565b5f1c90565b90565b61069861069d91610684565b610689565b90565b6106aa905461068c565b90565b6106b5610680565b506106c060026106a0565b90565b916106ed926106d061065a565b506106e56106dc61081c565b82908491610886565b919091610952565b600190565b5f90565b90565b90565b61071061070b610715926106f6565b6106f9565b610330565b90565b6107206106f2565b5061072b60126106fc565b90565b90610738916109ef565b565b61074e6107496107539261017f565b6106f9565b61017f565b90565b61075f9061073a565b90565b61076b90610756565b90565b9061077890610762565b5f5260205260405f2090565b61079a61079f91610793610680565b505f61076e565b6106a0565b90565b6107aa6104eb565b506107b56004610638565b90565b6107d5916107c461065a565b506107cd61081c565b919091610952565b600190565b906107e490610762565b5f5260205260405f2090565b6108159161080b61081092610803610680565b5060016107da565b61076e565b6106a0565b90565b5f90565b610824610818565b503390565b916108379291600192610aa7565b565b6108429061018a565b9052565b60409061086f610876949695939661086560608401985f850190610839565b6020830190610269565b0190610269565b565b9061088391036101b9565b90565b9291926108948183906107f0565b90816108a96108a35f196101b9565b916101b9565b036108b6575b5050509050565b816108c96108c3876101b9565b916101b9565b106108ef576108e693946108de919392610878565b905f92610aa7565b805f80806108af565b5061090e849291925f938493637dc7a0d960e11b855260048501610846565b0390fd5b90565b61092961092461092e92610912565b6106f9565b61017f565b90565b61093a90610915565b90565b9190610950905f60208501940190610839565b565b918261096e6109686109635f610931565b61018a565b9161018a565b146109c8578161098e6109886109835f610931565b61018a565b9161018a565b146109a15761099f92919091610bfd565b565b6109c46109ad5f610931565b5f91829163ec442f0560e01b83526004830161093d565b0390fd5b6109eb6109d45f610931565b5f918291634b637e8f60e11b83526004830161093d565b0390fd5b80610a0a610a046109ff5f610931565b61018a565b9161018a565b14610a2657610a2491610a1c5f610931565b919091610bfd565b565b610a49610a325f610931565b5f91829163ec442f0560e01b83526004830161093d565b0390fd5b5f1b90565b90610a5e5f1991610a4d565b9181191691161790565b610a7c610a77610a81926101b9565b6106f9565b6101b9565b90565b90565b90610a9c610a97610aa392610a68565b610a84565b8254610a52565b9055565b909281610ac4610abe610ab95f610931565b61018a565b9161018a565b14610b8f5783610ae4610ade610ad95f610931565b61018a565b9161018a565b14610b6857610b0883610b03610afc600186906107da565b879061076e565b610a87565b610b12575b505050565b919091610b5d610b4b610b457f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610762565b93610762565b93610b546100c2565b91829182610276565b0390a35f8080610b0d565b610b8b610b745f610931565b5f918291634a1406b160e11b83526004830161093d565b0390fd5b610bb2610b9b5f610931565b5f91829163e602df0560e01b83526004830161093d565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b610bd9610bdf919392936101b9565b926101b9565b8201809211610bea57565b610bb6565b90610bfa91016101b9565b90565b91909180610c1b610c15610c105f610931565b61018a565b9161018a565b145f14610cfc57610c3f610c3883610c3360026106a0565b610bca565b6002610a87565b5b82610c5b610c55610c505f610931565b61018a565b9161018a565b145f14610cd057610c7f610c7883610c7360026106a0565b610878565b6002610a87565b5b919091610ccb610cb9610cb37fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610762565b93610762565b93610cc26100c2565b91829182610276565b0390a3565b610cf782610cf1610ce25f879061076e565b91610cec836106a0565b610bef565b90610a87565b610c80565b610d0f610d0a5f839061076e565b6106a0565b80610d22610d1c856101b9565b916101b9565b10610d4a57610d35610d45918490610878565b610d405f849061076e565b610a87565b610c40565b90610d689091925f93849363391434e360e21b855260048501610846565b0390fdfea2646970667358221220a0a19aa4a9dca456e0babba7f5b5ff3b3ccf1bb3cde475724e2724f1eb9707f564736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\x000Wa\0\x1Aa\0\x14a\x01\x87V[\x90a\x01\xA9V[a\0\"a\x005V[a\r\xA2a\x04%\x829a\r\xA2\x90\xF3[a\0;V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0g\x90a\0?V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x7FW`@RV[a\0IV[\x90a\0\x97a\0\x90a\x005V[\x92\x83a\0]V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`@\x1B\x03\x81\x11a\0\xC5Wa\0\xC1` \x91a\0?V[\x01\x90V[a\0IV[\x90\x82_\x93\x92\x82^\x01RV[\x90\x92\x91\x92a\0\xEAa\0\xE5\x82a\0\xA9V[a\0\x84V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x01\x06Wa\x01\x04\x92a\0\xCAV[V[a\0\xA5V[\x90\x80`\x1F\x83\x01\x12\x15a\x01)W\x81` a\x01&\x93Q\x91\x01a\0\xD5V[\x90V[a\0\xA1V[\x91\x90\x91`@\x81\x84\x03\x12a\x01\x82W_\x81\x01Q`\x01\x80`@\x1B\x03\x81\x11a\x01}W\x83a\x01X\x91\x83\x01a\x01\x0BV[\x92` \x82\x01Q`\x01\x80`@\x1B\x03\x81\x11a\x01xWa\x01u\x92\x01a\x01\x0BV[\x90V[a\0\x9DV[a\0\x9DV[a\0\x99V[a\x01\xA5a\x11\xC7\x808\x03\x80a\x01\x9A\x81a\0\x84V[\x92\x839\x81\x01\x90a\x01.V[\x90\x91V[\x90a\x01\xB3\x91a\x04\x0CV[V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xEDW[` \x83\x10\x14a\x01\xE8WV[a\x01\xB9V[\x91`\x7F\x16\x91a\x01\xDDV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x02)\x91\x02\x91a\x02#_\x19\x84a\x02\nV[\x92a\x02\nV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90V[a\x02Ma\x02Ha\x02R\x92a\x023V[a\x026V[a\x023V[\x90V[\x90V[\x91\x90a\x02na\x02ia\x02v\x93a\x029V[a\x02UV[\x90\x83Ta\x02\x0EV[\x90UV[_\x90V[a\x02\x90\x91a\x02\x8Aa\x02zV[\x91a\x02XV[V[[\x81\x81\x10a\x02\x9EWPPV[\x80a\x02\xAB_`\x01\x93a\x02~V[\x01a\x02\x93V[\x91\x90`\x1F\x81\x11a\x02\xC1W[PPPV[a\x02\xCDa\x02\xF2\x93a\x01\xF7V[\x90` a\x02\xD9\x84a\x02\0V[\x83\x01\x93\x10a\x02\xFAW[a\x02\xEB\x90a\x02\0V[\x01\x90a\x02\x92V[_\x80\x80a\x02\xBCV[\x91Pa\x02\xEB\x81\x92\x90Pa\x02\xE2V[\x1C\x90V[\x90a\x03\x1C\x90_\x19\x90`\x08\x02a\x03\x08V[\x19\x16\x90V[\x81a\x03+\x91a\x03\x0CV[\x90`\x02\x02\x17\x90V[\x90a\x03=\x81a\x01\xB5V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x03\xFBWa\x03_\x82a\x03Y\x85Ta\x01\xCDV[\x85a\x02\xB1V[` \x90`\x1F\x83\x11`\x01\x14a\x03\x93W\x91\x80\x91a\x03\x82\x93_\x92a\x03\x87W[PPa\x03!V[\x90U[V[\x90\x91P\x01Q_\x80a\x03{V[`\x1F\x19\x83\x16\x91a\x03\xA2\x85a\x01\xF7V[\x92_[\x81\x81\x10a\x03\xE3WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x03\xC9W[PPP\x02\x01\x90Ua\x03\x85V[a\x03\xD9\x91\x01Q`\x1F\x84\x16\x90a\x03\x0CV[\x90U_\x80\x80a\x03\xBDV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x03\xA5V[a\0IV[\x90a\x04\n\x91a\x033V[V[\x90a\x04\x1Ba\x04\"\x92`\x03a\x04\0V[`\x04a\x04\0V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xE7V[a\0\x1D_5a\0\xBCV[\x80c\x06\xFD\xDE\x03\x14a\0\xB7W\x80c\t^\xA7\xB3\x14a\0\xB2W\x80c\x18\x16\r\xDD\x14a\0\xADW\x80c#\xB8r\xDD\x14a\0\xA8W\x80c1<\xE5g\x14a\0\xA3W\x80c@\xC1\x0F\x19\x14a\0\x9EW\x80cp\xA0\x821\x14a\0\x99W\x80c\x95\xD8\x9BA\x14a\0\x94W\x80c\xA9\x05\x9C\xBB\x14a\0\x8FWc\xDDb\xED>\x03a\0\x0EWa\x04\xB1V[a\x04NV[a\x04\x19V[a\x03\xE4V[a\x03\x92V[a\x03XV[a\x02\xFAV[a\x02\x8BV[a\x023V[a\x01JV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xDAWV[a\0\xCCV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01 a\x01)` \x93a\x01.\x93a\x01\x17\x81a\0\xDFV[\x93\x84\x80\x93a\0\xE3V[\x95\x86\x91\x01a\0\xECV[a\0\xF7V[\x01\x90V[a\x01G\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x01V[\x90V[4a\x01zWa\x01Z6`\x04a\0\xD0V[a\x01va\x01ea\x06DV[a\x01ma\0\xC2V[\x91\x82\x91\x82a\x012V[\x03\x90\xF3[a\0\xC8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x93\x90a\x01\x7FV[\x90V[a\x01\x9F\x81a\x01\x8AV[\x03a\x01\xA6WV[_\x80\xFD[\x90P5\x90a\x01\xB7\x82a\x01\x96V[V[\x90V[a\x01\xC5\x81a\x01\xB9V[\x03a\x01\xCCWV[_\x80\xFD[\x90P5\x90a\x01\xDD\x82a\x01\xBCV[V[\x91\x90`@\x83\x82\x03\x12a\x02\x07W\x80a\x01\xFBa\x02\x04\x92_\x86\x01a\x01\xAAV[\x93` \x01a\x01\xD0V[\x90V[a\0\xCCV[\x15\x15\x90V[a\x02\x1A\x90a\x02\x0CV[\x90RV[\x91\x90a\x021\x90_` \x85\x01\x94\x01\x90a\x02\x11V[V[4a\x02dWa\x02`a\x02Oa\x02I6`\x04a\x01\xDFV[\x90a\x06^V[a\x02Wa\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[a\x02r\x90a\x01\xB9V[\x90RV[\x91\x90a\x02\x89\x90_` \x85\x01\x94\x01\x90a\x02iV[V[4a\x02\xBBWa\x02\x9B6`\x04a\0\xD0V[a\x02\xB7a\x02\xA6a\x06\xADV[a\x02\xAEa\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[\x90\x91``\x82\x84\x03\x12a\x02\xF5Wa\x02\xF2a\x02\xDB\x84_\x85\x01a\x01\xAAV[\x93a\x02\xE9\x81` \x86\x01a\x01\xAAV[\x93`@\x01a\x01\xD0V[\x90V[a\0\xCCV[4a\x03+Wa\x03'a\x03\x16a\x03\x106`\x04a\x02\xC0V[\x91a\x06\xC3V[a\x03\x1Ea\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[`\xFF\x16\x90V[a\x03?\x90a\x030V[\x90RV[\x91\x90a\x03V\x90_` \x85\x01\x94\x01\x90a\x036V[V[4a\x03\x88Wa\x03h6`\x04a\0\xD0V[a\x03\x84a\x03sa\x07\x18V[a\x03{a\0\xC2V[\x91\x82\x91\x82a\x03CV[\x03\x90\xF3[a\0\xC8V[_\x01\x90V[4a\x03\xC1Wa\x03\xABa\x03\xA56`\x04a\x01\xDFV[\x90a\x07.V[a\x03\xB3a\0\xC2V[\x80a\x03\xBD\x81a\x03\x8DV[\x03\x90\xF3[a\0\xC8V[\x90` \x82\x82\x03\x12a\x03\xDFWa\x03\xDC\x91_\x01a\x01\xAAV[\x90V[a\0\xCCV[4a\x04\x14Wa\x04\x10a\x03\xFFa\x03\xFA6`\x04a\x03\xC6V[a\x07\x84V[a\x04\x07a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[4a\x04IWa\x04)6`\x04a\0\xD0V[a\x04Ea\x044a\x07\xA2V[a\x04<a\0\xC2V[\x91\x82\x91\x82a\x012V[\x03\x90\xF3[a\0\xC8V[4a\x04\x7FWa\x04{a\x04ja\x04d6`\x04a\x01\xDFV[\x90a\x07\xB8V[a\x04ra\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[\x91\x90`@\x83\x82\x03\x12a\x04\xACW\x80a\x04\xA0a\x04\xA9\x92_\x86\x01a\x01\xAAV[\x93` \x01a\x01\xAAV[\x90V[a\0\xCCV[4a\x04\xE2Wa\x04\xDEa\x04\xCDa\x04\xC76`\x04a\x04\x84V[\x90a\x07\xF0V[a\x04\xD5a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[_\x80\xFD[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x05$W[` \x83\x10\x14a\x05\x1FWV[a\x04\xF0V[\x91`\x7F\x16\x91a\x05\x14V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x05Za\x05S\x83a\x05\x04V[\x80\x94a\x05.V[\x91`\x01\x81\x16\x90\x81_\x14a\x05\xB1WP`\x01\x14a\x05uW[PPPV[a\x05\x82\x91\x92\x93\x94Pa\x057V[\x91_\x92[\x81\x84\x10a\x05\x99WPP\x01\x90_\x80\x80a\x05pV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x05\x86V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x05pV[\x90a\x05\xD6\x91a\x05@V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\xF7\x90a\0\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x11W`@RV[a\x05\xD9V[\x90a\x066a\x06/\x92a\x06&a\0\xC2V[\x93\x84\x80\x92a\x05\xCCV[\x03\x83a\x05\xEDV[V[a\x06A\x90a\x06\x16V[\x90V[a\x06La\x04\xEBV[Pa\x06W`\x03a\x068V[\x90V[_\x90V[a\x06{\x91a\x06ja\x06ZV[Pa\x06sa\x08\x1CV[\x91\x90\x91a\x08)V[`\x01\x90V[_\x90V[_\x1C\x90V[\x90V[a\x06\x98a\x06\x9D\x91a\x06\x84V[a\x06\x89V[\x90V[a\x06\xAA\x90Ta\x06\x8CV[\x90V[a\x06\xB5a\x06\x80V[Pa\x06\xC0`\x02a\x06\xA0V[\x90V[\x91a\x06\xED\x92a\x06\xD0a\x06ZV[Pa\x06\xE5a\x06\xDCa\x08\x1CV[\x82\x90\x84\x91a\x08\x86V[\x91\x90\x91a\tRV[`\x01\x90V[_\x90V[\x90V[\x90V[a\x07\x10a\x07\x0Ba\x07\x15\x92a\x06\xF6V[a\x06\xF9V[a\x030V[\x90V[a\x07 a\x06\xF2V[Pa\x07+`\x12a\x06\xFCV[\x90V[\x90a\x078\x91a\t\xEFV[V[a\x07Na\x07Ia\x07S\x92a\x01\x7FV[a\x06\xF9V[a\x01\x7FV[\x90V[a\x07_\x90a\x07:V[\x90V[a\x07k\x90a\x07VV[\x90V[\x90a\x07x\x90a\x07bV[_R` R`@_ \x90V[a\x07\x9Aa\x07\x9F\x91a\x07\x93a\x06\x80V[P_a\x07nV[a\x06\xA0V[\x90V[a\x07\xAAa\x04\xEBV[Pa\x07\xB5`\x04a\x068V[\x90V[a\x07\xD5\x91a\x07\xC4a\x06ZV[Pa\x07\xCDa\x08\x1CV[\x91\x90\x91a\tRV[`\x01\x90V[\x90a\x07\xE4\x90a\x07bV[_R` R`@_ \x90V[a\x08\x15\x91a\x08\x0Ba\x08\x10\x92a\x08\x03a\x06\x80V[P`\x01a\x07\xDAV[a\x07nV[a\x06\xA0V[\x90V[_\x90V[a\x08$a\x08\x18V[P3\x90V[\x91a\x087\x92\x91`\x01\x92a\n\xA7V[V[a\x08B\x90a\x01\x8AV[\x90RV[`@\x90a\x08oa\x08v\x94\x96\x95\x93\x96a\x08e``\x84\x01\x98_\x85\x01\x90a\x089V[` \x83\x01\x90a\x02iV[\x01\x90a\x02iV[V[\x90a\x08\x83\x91\x03a\x01\xB9V[\x90V[\x92\x91\x92a\x08\x94\x81\x83\x90a\x07\xF0V[\x90\x81a\x08\xA9a\x08\xA3_\x19a\x01\xB9V[\x91a\x01\xB9V[\x03a\x08\xB6W[PPP\x90PV[\x81a\x08\xC9a\x08\xC3\x87a\x01\xB9V[\x91a\x01\xB9V[\x10a\x08\xEFWa\x08\xE6\x93\x94a\x08\xDE\x91\x93\x92a\x08xV[\x90_\x92a\n\xA7V[\x80_\x80\x80a\x08\xAFV[Pa\t\x0E\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a\x08FV[\x03\x90\xFD[\x90V[a\t)a\t$a\t.\x92a\t\x12V[a\x06\xF9V[a\x01\x7FV[\x90V[a\t:\x90a\t\x15V[\x90V[\x91\x90a\tP\x90_` \x85\x01\x94\x01\x90a\x089V[V[\x91\x82a\tna\tha\tc_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\t\xC8W\x81a\t\x8Ea\t\x88a\t\x83_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\t\xA1Wa\t\x9F\x92\x91\x90\x91a\x0B\xFDV[V[a\t\xC4a\t\xAD_a\t1V[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[a\t\xEBa\t\xD4_a\t1V[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[\x80a\n\na\n\x04a\t\xFF_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\n&Wa\n$\x91a\n\x1C_a\t1V[\x91\x90\x91a\x0B\xFDV[V[a\nIa\n2_a\t1V[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[_\x1B\x90V[\x90a\n^_\x19\x91a\nMV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n|a\nwa\n\x81\x92a\x01\xB9V[a\x06\xF9V[a\x01\xB9V[\x90V[\x90V[\x90a\n\x9Ca\n\x97a\n\xA3\x92a\nhV[a\n\x84V[\x82Ta\nRV[\x90UV[\x90\x92\x81a\n\xC4a\n\xBEa\n\xB9_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\x0B\x8FW\x83a\n\xE4a\n\xDEa\n\xD9_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\x0BhWa\x0B\x08\x83a\x0B\x03a\n\xFC`\x01\x86\x90a\x07\xDAV[\x87\x90a\x07nV[a\n\x87V[a\x0B\x12W[PPPV[\x91\x90\x91a\x0B]a\x0BKa\x0BE\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x07bV[\x93a\x07bV[\x93a\x0BTa\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xA3_\x80\x80a\x0B\rV[a\x0B\x8Ba\x0Bt_a\t1V[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[a\x0B\xB2a\x0B\x9B_a\t1V[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\xD9a\x0B\xDF\x91\x93\x92\x93a\x01\xB9V[\x92a\x01\xB9V[\x82\x01\x80\x92\x11a\x0B\xEAWV[a\x0B\xB6V[\x90a\x0B\xFA\x91\x01a\x01\xB9V[\x90V[\x91\x90\x91\x80a\x0C\x1Ba\x0C\x15a\x0C\x10_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14_\x14a\x0C\xFCWa\x0C?a\x0C8\x83a\x0C3`\x02a\x06\xA0V[a\x0B\xCAV[`\x02a\n\x87V[[\x82a\x0C[a\x0CUa\x0CP_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14_\x14a\x0C\xD0Wa\x0C\x7Fa\x0Cx\x83a\x0Cs`\x02a\x06\xA0V[a\x08xV[`\x02a\n\x87V[[\x91\x90\x91a\x0C\xCBa\x0C\xB9a\x0C\xB3\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x07bV[\x93a\x07bV[\x93a\x0C\xC2a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xA3V[a\x0C\xF7\x82a\x0C\xF1a\x0C\xE2_\x87\x90a\x07nV[\x91a\x0C\xEC\x83a\x06\xA0V[a\x0B\xEFV[\x90a\n\x87V[a\x0C\x80V[a\r\x0Fa\r\n_\x83\x90a\x07nV[a\x06\xA0V[\x80a\r\"a\r\x1C\x85a\x01\xB9V[\x91a\x01\xB9V[\x10a\rJWa\r5a\rE\x91\x84\x90a\x08xV[a\r@_\x84\x90a\x07nV[a\n\x87V[a\x0C@V[\x90a\rh\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x08FV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \xA0\xA1\x9A\xA4\xA9\xDC\xA4V\xE0\xBA\xBB\xA7\xF5\xB5\xFF;<\xCF\x1B\xB3\xCD\xE4urN'$\xF1\xEB\x97\x07\xF5dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6104e7565b61001d5f356100bc565b806306fdde03146100b7578063095ea7b3146100b257806318160ddd146100ad57806323b872dd146100a8578063313ce567146100a357806340c10f191461009e57806370a082311461009957806395d89b4114610094578063a9059cbb1461008f5763dd62ed3e0361000e576104b1565b61044e565b610419565b6103e4565b610392565b610358565b6102fa565b61028b565b610233565b61014a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100da57565b6100cc565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61012061012960209361012e93610117816100df565b938480936100e3565b958691016100ec565b6100f7565b0190565b6101479160208201915f818403910152610101565b90565b3461017a5761015a3660046100d0565b610176610165610644565b61016d6100c2565b91829182610132565b0390f35b6100c8565b60018060a01b031690565b6101939061017f565b90565b61019f8161018a565b036101a657565b5f80fd5b905035906101b782610196565b565b90565b6101c5816101b9565b036101cc57565b5f80fd5b905035906101dd826101bc565b565b919060408382031261020757806101fb610204925f86016101aa565b936020016101d0565b90565b6100cc565b151590565b61021a9061020c565b9052565b9190610231905f60208501940190610211565b565b346102645761026061024f6102493660046101df565b9061065e565b6102576100c2565b9182918261021e565b0390f35b6100c8565b610272906101b9565b9052565b9190610289905f60208501940190610269565b565b346102bb5761029b3660046100d0565b6102b76102a66106ad565b6102ae6100c2565b91829182610276565b0390f35b6100c8565b90916060828403126102f5576102f26102db845f85016101aa565b936102e981602086016101aa565b936040016101d0565b90565b6100cc565b3461032b576103276103166103103660046102c0565b916106c3565b61031e6100c2565b9182918261021e565b0390f35b6100c8565b60ff1690565b61033f90610330565b9052565b9190610356905f60208501940190610336565b565b34610388576103683660046100d0565b610384610373610718565b61037b6100c2565b91829182610343565b0390f35b6100c8565b5f0190565b346103c1576103ab6103a53660046101df565b9061072e565b6103b36100c2565b806103bd8161038d565b0390f35b6100c8565b906020828203126103df576103dc915f016101aa565b90565b6100cc565b34610414576104106103ff6103fa3660046103c6565b610784565b6104076100c2565b91829182610276565b0390f35b6100c8565b34610449576104293660046100d0565b6104456104346107a2565b61043c6100c2565b91829182610132565b0390f35b6100c8565b3461047f5761047b61046a6104643660046101df565b906107b8565b6104726100c2565b9182918261021e565b0390f35b6100c8565b91906040838203126104ac57806104a06104a9925f86016101aa565b936020016101aa565b90565b6100cc565b346104e2576104de6104cd6104c7366004610484565b906107f0565b6104d56100c2565b91829182610276565b0390f35b6100c8565b5f80fd5b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610524575b602083101461051f57565b6104f0565b91607f1691610514565b60209181520190565b5f5260205f2090565b905f929180549061055a61055383610504565b809461052e565b916001811690815f146105b15750600114610575575b505050565b6105829192939450610537565b915f925b81841061059957505001905f8080610570565b60018160209295939554848601520191019290610586565b92949550505060ff19168252151560200201905f8080610570565b906105d691610540565b90565b634e487b7160e01b5f52604160045260245ffd5b906105f7906100f7565b810190811067ffffffffffffffff82111761061157604052565b6105d9565b9061063661062f926106266100c2565b938480926105cc565b03836105ed565b565b61064190610616565b90565b61064c6104eb565b506106576003610638565b90565b5f90565b61067b9161066a61065a565b5061067361081c565b919091610829565b600190565b5f90565b5f1c90565b90565b61069861069d91610684565b610689565b90565b6106aa905461068c565b90565b6106b5610680565b506106c060026106a0565b90565b916106ed926106d061065a565b506106e56106dc61081c565b82908491610886565b919091610952565b600190565b5f90565b90565b90565b61071061070b610715926106f6565b6106f9565b610330565b90565b6107206106f2565b5061072b60126106fc565b90565b90610738916109ef565b565b61074e6107496107539261017f565b6106f9565b61017f565b90565b61075f9061073a565b90565b61076b90610756565b90565b9061077890610762565b5f5260205260405f2090565b61079a61079f91610793610680565b505f61076e565b6106a0565b90565b6107aa6104eb565b506107b56004610638565b90565b6107d5916107c461065a565b506107cd61081c565b919091610952565b600190565b906107e490610762565b5f5260205260405f2090565b6108159161080b61081092610803610680565b5060016107da565b61076e565b6106a0565b90565b5f90565b610824610818565b503390565b916108379291600192610aa7565b565b6108429061018a565b9052565b60409061086f610876949695939661086560608401985f850190610839565b6020830190610269565b0190610269565b565b9061088391036101b9565b90565b9291926108948183906107f0565b90816108a96108a35f196101b9565b916101b9565b036108b6575b5050509050565b816108c96108c3876101b9565b916101b9565b106108ef576108e693946108de919392610878565b905f92610aa7565b805f80806108af565b5061090e849291925f938493637dc7a0d960e11b855260048501610846565b0390fd5b90565b61092961092461092e92610912565b6106f9565b61017f565b90565b61093a90610915565b90565b9190610950905f60208501940190610839565b565b918261096e6109686109635f610931565b61018a565b9161018a565b146109c8578161098e6109886109835f610931565b61018a565b9161018a565b146109a15761099f92919091610bfd565b565b6109c46109ad5f610931565b5f91829163ec442f0560e01b83526004830161093d565b0390fd5b6109eb6109d45f610931565b5f918291634b637e8f60e11b83526004830161093d565b0390fd5b80610a0a610a046109ff5f610931565b61018a565b9161018a565b14610a2657610a2491610a1c5f610931565b919091610bfd565b565b610a49610a325f610931565b5f91829163ec442f0560e01b83526004830161093d565b0390fd5b5f1b90565b90610a5e5f1991610a4d565b9181191691161790565b610a7c610a77610a81926101b9565b6106f9565b6101b9565b90565b90565b90610a9c610a97610aa392610a68565b610a84565b8254610a52565b9055565b909281610ac4610abe610ab95f610931565b61018a565b9161018a565b14610b8f5783610ae4610ade610ad95f610931565b61018a565b9161018a565b14610b6857610b0883610b03610afc600186906107da565b879061076e565b610a87565b610b12575b505050565b919091610b5d610b4b610b457f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610762565b93610762565b93610b546100c2565b91829182610276565b0390a35f8080610b0d565b610b8b610b745f610931565b5f918291634a1406b160e11b83526004830161093d565b0390fd5b610bb2610b9b5f610931565b5f91829163e602df0560e01b83526004830161093d565b0390fd5b634e487b7160e01b5f52601160045260245ffd5b610bd9610bdf919392936101b9565b926101b9565b8201809211610bea57565b610bb6565b90610bfa91016101b9565b90565b91909180610c1b610c15610c105f610931565b61018a565b9161018a565b145f14610cfc57610c3f610c3883610c3360026106a0565b610bca565b6002610a87565b5b82610c5b610c55610c505f610931565b61018a565b9161018a565b145f14610cd057610c7f610c7883610c7360026106a0565b610878565b6002610a87565b5b919091610ccb610cb9610cb37fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610762565b93610762565b93610cc26100c2565b91829182610276565b0390a3565b610cf782610cf1610ce25f879061076e565b91610cec836106a0565b610bef565b90610a87565b610c80565b610d0f610d0a5f839061076e565b6106a0565b80610d22610d1c856101b9565b916101b9565b10610d4a57610d35610d45918490610878565b610d405f849061076e565b610a87565b610c40565b90610d689091925f93849363391434e360e21b855260048501610846565b0390fdfea2646970667358221220a0a19aa4a9dca456e0babba7f5b5ff3b3ccf1bb3cde475724e2724f1eb9707f564736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\xE7V[a\0\x1D_5a\0\xBCV[\x80c\x06\xFD\xDE\x03\x14a\0\xB7W\x80c\t^\xA7\xB3\x14a\0\xB2W\x80c\x18\x16\r\xDD\x14a\0\xADW\x80c#\xB8r\xDD\x14a\0\xA8W\x80c1<\xE5g\x14a\0\xA3W\x80c@\xC1\x0F\x19\x14a\0\x9EW\x80cp\xA0\x821\x14a\0\x99W\x80c\x95\xD8\x9BA\x14a\0\x94W\x80c\xA9\x05\x9C\xBB\x14a\0\x8FWc\xDDb\xED>\x03a\0\x0EWa\x04\xB1V[a\x04NV[a\x04\x19V[a\x03\xE4V[a\x03\x92V[a\x03XV[a\x02\xFAV[a\x02\x8BV[a\x023V[a\x01JV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xDAWV[a\0\xCCV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01 a\x01)` \x93a\x01.\x93a\x01\x17\x81a\0\xDFV[\x93\x84\x80\x93a\0\xE3V[\x95\x86\x91\x01a\0\xECV[a\0\xF7V[\x01\x90V[a\x01G\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x01V[\x90V[4a\x01zWa\x01Z6`\x04a\0\xD0V[a\x01va\x01ea\x06DV[a\x01ma\0\xC2V[\x91\x82\x91\x82a\x012V[\x03\x90\xF3[a\0\xC8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x93\x90a\x01\x7FV[\x90V[a\x01\x9F\x81a\x01\x8AV[\x03a\x01\xA6WV[_\x80\xFD[\x90P5\x90a\x01\xB7\x82a\x01\x96V[V[\x90V[a\x01\xC5\x81a\x01\xB9V[\x03a\x01\xCCWV[_\x80\xFD[\x90P5\x90a\x01\xDD\x82a\x01\xBCV[V[\x91\x90`@\x83\x82\x03\x12a\x02\x07W\x80a\x01\xFBa\x02\x04\x92_\x86\x01a\x01\xAAV[\x93` \x01a\x01\xD0V[\x90V[a\0\xCCV[\x15\x15\x90V[a\x02\x1A\x90a\x02\x0CV[\x90RV[\x91\x90a\x021\x90_` \x85\x01\x94\x01\x90a\x02\x11V[V[4a\x02dWa\x02`a\x02Oa\x02I6`\x04a\x01\xDFV[\x90a\x06^V[a\x02Wa\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[a\x02r\x90a\x01\xB9V[\x90RV[\x91\x90a\x02\x89\x90_` \x85\x01\x94\x01\x90a\x02iV[V[4a\x02\xBBWa\x02\x9B6`\x04a\0\xD0V[a\x02\xB7a\x02\xA6a\x06\xADV[a\x02\xAEa\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[\x90\x91``\x82\x84\x03\x12a\x02\xF5Wa\x02\xF2a\x02\xDB\x84_\x85\x01a\x01\xAAV[\x93a\x02\xE9\x81` \x86\x01a\x01\xAAV[\x93`@\x01a\x01\xD0V[\x90V[a\0\xCCV[4a\x03+Wa\x03'a\x03\x16a\x03\x106`\x04a\x02\xC0V[\x91a\x06\xC3V[a\x03\x1Ea\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[`\xFF\x16\x90V[a\x03?\x90a\x030V[\x90RV[\x91\x90a\x03V\x90_` \x85\x01\x94\x01\x90a\x036V[V[4a\x03\x88Wa\x03h6`\x04a\0\xD0V[a\x03\x84a\x03sa\x07\x18V[a\x03{a\0\xC2V[\x91\x82\x91\x82a\x03CV[\x03\x90\xF3[a\0\xC8V[_\x01\x90V[4a\x03\xC1Wa\x03\xABa\x03\xA56`\x04a\x01\xDFV[\x90a\x07.V[a\x03\xB3a\0\xC2V[\x80a\x03\xBD\x81a\x03\x8DV[\x03\x90\xF3[a\0\xC8V[\x90` \x82\x82\x03\x12a\x03\xDFWa\x03\xDC\x91_\x01a\x01\xAAV[\x90V[a\0\xCCV[4a\x04\x14Wa\x04\x10a\x03\xFFa\x03\xFA6`\x04a\x03\xC6V[a\x07\x84V[a\x04\x07a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[4a\x04IWa\x04)6`\x04a\0\xD0V[a\x04Ea\x044a\x07\xA2V[a\x04<a\0\xC2V[\x91\x82\x91\x82a\x012V[\x03\x90\xF3[a\0\xC8V[4a\x04\x7FWa\x04{a\x04ja\x04d6`\x04a\x01\xDFV[\x90a\x07\xB8V[a\x04ra\0\xC2V[\x91\x82\x91\x82a\x02\x1EV[\x03\x90\xF3[a\0\xC8V[\x91\x90`@\x83\x82\x03\x12a\x04\xACW\x80a\x04\xA0a\x04\xA9\x92_\x86\x01a\x01\xAAV[\x93` \x01a\x01\xAAV[\x90V[a\0\xCCV[4a\x04\xE2Wa\x04\xDEa\x04\xCDa\x04\xC76`\x04a\x04\x84V[\x90a\x07\xF0V[a\x04\xD5a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xF3[a\0\xC8V[_\x80\xFD[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x05$W[` \x83\x10\x14a\x05\x1FWV[a\x04\xF0V[\x91`\x7F\x16\x91a\x05\x14V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x05Za\x05S\x83a\x05\x04V[\x80\x94a\x05.V[\x91`\x01\x81\x16\x90\x81_\x14a\x05\xB1WP`\x01\x14a\x05uW[PPPV[a\x05\x82\x91\x92\x93\x94Pa\x057V[\x91_\x92[\x81\x84\x10a\x05\x99WPP\x01\x90_\x80\x80a\x05pV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x05\x86V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x05pV[\x90a\x05\xD6\x91a\x05@V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\xF7\x90a\0\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x11W`@RV[a\x05\xD9V[\x90a\x066a\x06/\x92a\x06&a\0\xC2V[\x93\x84\x80\x92a\x05\xCCV[\x03\x83a\x05\xEDV[V[a\x06A\x90a\x06\x16V[\x90V[a\x06La\x04\xEBV[Pa\x06W`\x03a\x068V[\x90V[_\x90V[a\x06{\x91a\x06ja\x06ZV[Pa\x06sa\x08\x1CV[\x91\x90\x91a\x08)V[`\x01\x90V[_\x90V[_\x1C\x90V[\x90V[a\x06\x98a\x06\x9D\x91a\x06\x84V[a\x06\x89V[\x90V[a\x06\xAA\x90Ta\x06\x8CV[\x90V[a\x06\xB5a\x06\x80V[Pa\x06\xC0`\x02a\x06\xA0V[\x90V[\x91a\x06\xED\x92a\x06\xD0a\x06ZV[Pa\x06\xE5a\x06\xDCa\x08\x1CV[\x82\x90\x84\x91a\x08\x86V[\x91\x90\x91a\tRV[`\x01\x90V[_\x90V[\x90V[\x90V[a\x07\x10a\x07\x0Ba\x07\x15\x92a\x06\xF6V[a\x06\xF9V[a\x030V[\x90V[a\x07 a\x06\xF2V[Pa\x07+`\x12a\x06\xFCV[\x90V[\x90a\x078\x91a\t\xEFV[V[a\x07Na\x07Ia\x07S\x92a\x01\x7FV[a\x06\xF9V[a\x01\x7FV[\x90V[a\x07_\x90a\x07:V[\x90V[a\x07k\x90a\x07VV[\x90V[\x90a\x07x\x90a\x07bV[_R` R`@_ \x90V[a\x07\x9Aa\x07\x9F\x91a\x07\x93a\x06\x80V[P_a\x07nV[a\x06\xA0V[\x90V[a\x07\xAAa\x04\xEBV[Pa\x07\xB5`\x04a\x068V[\x90V[a\x07\xD5\x91a\x07\xC4a\x06ZV[Pa\x07\xCDa\x08\x1CV[\x91\x90\x91a\tRV[`\x01\x90V[\x90a\x07\xE4\x90a\x07bV[_R` R`@_ \x90V[a\x08\x15\x91a\x08\x0Ba\x08\x10\x92a\x08\x03a\x06\x80V[P`\x01a\x07\xDAV[a\x07nV[a\x06\xA0V[\x90V[_\x90V[a\x08$a\x08\x18V[P3\x90V[\x91a\x087\x92\x91`\x01\x92a\n\xA7V[V[a\x08B\x90a\x01\x8AV[\x90RV[`@\x90a\x08oa\x08v\x94\x96\x95\x93\x96a\x08e``\x84\x01\x98_\x85\x01\x90a\x089V[` \x83\x01\x90a\x02iV[\x01\x90a\x02iV[V[\x90a\x08\x83\x91\x03a\x01\xB9V[\x90V[\x92\x91\x92a\x08\x94\x81\x83\x90a\x07\xF0V[\x90\x81a\x08\xA9a\x08\xA3_\x19a\x01\xB9V[\x91a\x01\xB9V[\x03a\x08\xB6W[PPP\x90PV[\x81a\x08\xC9a\x08\xC3\x87a\x01\xB9V[\x91a\x01\xB9V[\x10a\x08\xEFWa\x08\xE6\x93\x94a\x08\xDE\x91\x93\x92a\x08xV[\x90_\x92a\n\xA7V[\x80_\x80\x80a\x08\xAFV[Pa\t\x0E\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a\x08FV[\x03\x90\xFD[\x90V[a\t)a\t$a\t.\x92a\t\x12V[a\x06\xF9V[a\x01\x7FV[\x90V[a\t:\x90a\t\x15V[\x90V[\x91\x90a\tP\x90_` \x85\x01\x94\x01\x90a\x089V[V[\x91\x82a\tna\tha\tc_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\t\xC8W\x81a\t\x8Ea\t\x88a\t\x83_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\t\xA1Wa\t\x9F\x92\x91\x90\x91a\x0B\xFDV[V[a\t\xC4a\t\xAD_a\t1V[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[a\t\xEBa\t\xD4_a\t1V[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[\x80a\n\na\n\x04a\t\xFF_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\n&Wa\n$\x91a\n\x1C_a\t1V[\x91\x90\x91a\x0B\xFDV[V[a\nIa\n2_a\t1V[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[_\x1B\x90V[\x90a\n^_\x19\x91a\nMV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\n|a\nwa\n\x81\x92a\x01\xB9V[a\x06\xF9V[a\x01\xB9V[\x90V[\x90V[\x90a\n\x9Ca\n\x97a\n\xA3\x92a\nhV[a\n\x84V[\x82Ta\nRV[\x90UV[\x90\x92\x81a\n\xC4a\n\xBEa\n\xB9_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\x0B\x8FW\x83a\n\xE4a\n\xDEa\n\xD9_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14a\x0BhWa\x0B\x08\x83a\x0B\x03a\n\xFC`\x01\x86\x90a\x07\xDAV[\x87\x90a\x07nV[a\n\x87V[a\x0B\x12W[PPPV[\x91\x90\x91a\x0B]a\x0BKa\x0BE\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x07bV[\x93a\x07bV[\x93a\x0BTa\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xA3_\x80\x80a\x0B\rV[a\x0B\x8Ba\x0Bt_a\t1V[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[a\x0B\xB2a\x0B\x9B_a\t1V[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\t=V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\xD9a\x0B\xDF\x91\x93\x92\x93a\x01\xB9V[\x92a\x01\xB9V[\x82\x01\x80\x92\x11a\x0B\xEAWV[a\x0B\xB6V[\x90a\x0B\xFA\x91\x01a\x01\xB9V[\x90V[\x91\x90\x91\x80a\x0C\x1Ba\x0C\x15a\x0C\x10_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14_\x14a\x0C\xFCWa\x0C?a\x0C8\x83a\x0C3`\x02a\x06\xA0V[a\x0B\xCAV[`\x02a\n\x87V[[\x82a\x0C[a\x0CUa\x0CP_a\t1V[a\x01\x8AV[\x91a\x01\x8AV[\x14_\x14a\x0C\xD0Wa\x0C\x7Fa\x0Cx\x83a\x0Cs`\x02a\x06\xA0V[a\x08xV[`\x02a\n\x87V[[\x91\x90\x91a\x0C\xCBa\x0C\xB9a\x0C\xB3\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x07bV[\x93a\x07bV[\x93a\x0C\xC2a\0\xC2V[\x91\x82\x91\x82a\x02vV[\x03\x90\xA3V[a\x0C\xF7\x82a\x0C\xF1a\x0C\xE2_\x87\x90a\x07nV[\x91a\x0C\xEC\x83a\x06\xA0V[a\x0B\xEFV[\x90a\n\x87V[a\x0C\x80V[a\r\x0Fa\r\n_\x83\x90a\x07nV[a\x06\xA0V[\x80a\r\"a\r\x1C\x85a\x01\xB9V[\x91a\x01\xB9V[\x10a\rJWa\r5a\rE\x91\x84\x90a\x08xV[a\r@_\x84\x90a\x07nV[a\n\x87V[a\x0C@V[\x90a\rh\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x08FV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 \xA0\xA1\x9A\xA4\xA9\xDC\xA4V\xE0\xBA\xBB\xA7\xF5\xB5\xFF;<\xCF\x1B\xB3\xCD\xE4urN'$\xF1\xEB\x97\x07\xF5dsolcC\0\x08\x1A\x003",
    );
    /**Custom error with signature `ERC20InsufficientAllowance(address,uint256,uint256)` and selector `0xfb8f41b2`.
```solidity
error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InsufficientAllowance {
        pub spender: alloy::sol_types::private::Address,
        pub allowance: alloy::sol_types::private::primitives::aliases::U256,
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientAllowance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientAllowance) -> Self {
                (value.spender, value.allowance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientAllowance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    spender: tuple.0,
                    allowance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientAllowance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientAllowance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [251u8, 143u8, 65u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InsufficientBalance(address,uint256,uint256)` and selector `0xe450d38c`.
```solidity
error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InsufficientBalance {
        pub sender: alloy::sol_types::private::Address,
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientBalance) -> Self {
                (value.sender, value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    balance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientBalance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [228u8, 80u8, 211u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidApprover(address)` and selector `0xe602df05`.
```solidity
error ERC20InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InvalidApprover {
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [230u8, 2u8, 223u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidReceiver(address)` and selector `0xec442f05`.
```solidity
error ERC20InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InvalidReceiver {
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [236u8, 68u8, 47u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidSender(address)` and selector `0x96c6fd1e`.
```solidity
error ERC20InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InvalidSender {
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSender(address)";
            const SELECTOR: [u8; 4] = [150u8, 198u8, 253u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidSpender(address)` and selector `0x94280d62`.
```solidity
error ERC20InvalidSpender(address spender);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ERC20InvalidSpender {
        pub spender: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSpender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSpender) -> Self {
                (value.spender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSpender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { spender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSpender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSpender(address)";
            const SELECTOR: [u8; 4] = [148u8, 40u8, 13u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
        }
    };
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(string name, string symbol);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub name: alloy::sol_types::private::String,
        pub symbol: alloy::sol_types::private::String,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.name, value.symbol)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        symbol: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.symbol,
                    ),
                )
            }
        }
    };
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address owner, address spender) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceCall {
        pub owner: alloy::sol_types::private::Address,
        pub spender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveCall {
        pub spender: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsCall {}
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        pub _0: u8,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,uint256)` and selector `0x40c10f19`.
```solidity
function mint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mintCall {
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 193u8, 15u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferCall {
        pub to: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockERC20`](self) function calls.
    pub enum MockERC20Calls {
        allowance(allowanceCall),
        approve(approveCall),
        balanceOf(balanceOfCall),
        decimals(decimalsCall),
        mint(mintCall),
        name(nameCall),
        symbol(symbolCall),
        totalSupply(totalSupplyCall),
        transfer(transferCall),
        transferFrom(transferFromCall),
    }
    #[automatically_derived]
    impl MockERC20Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [24u8, 22u8, 13u8, 221u8],
            [35u8, 184u8, 114u8, 221u8],
            [49u8, 60u8, 229u8, 103u8],
            [64u8, 193u8, 15u8, 25u8],
            [112u8, 160u8, 130u8, 49u8],
            [149u8, 216u8, 155u8, 65u8],
            [169u8, 5u8, 156u8, 187u8],
            [221u8, 98u8, 237u8, 62u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockERC20Calls {
        const NAME: &'static str = "MockERC20Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockERC20Calls>] = &[
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn decimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::decimals)
                    }
                    decimals
                },
                {
                    fn mint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::mint)
                    }
                    mint
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::symbol)
                    }
                    symbol
                },
                {
                    fn transfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::transfer)
                    }
                    transfer
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Calls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Calls::allowance)
                    }
                    allowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockERC20`](self) custom errors.
    pub enum MockERC20Errors {
        ERC20InsufficientAllowance(ERC20InsufficientAllowance),
        ERC20InsufficientBalance(ERC20InsufficientBalance),
        ERC20InvalidApprover(ERC20InvalidApprover),
        ERC20InvalidReceiver(ERC20InvalidReceiver),
        ERC20InvalidSender(ERC20InvalidSender),
        ERC20InvalidSpender(ERC20InvalidSpender),
    }
    #[automatically_derived]
    impl MockERC20Errors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [148u8, 40u8, 13u8, 98u8],
            [150u8, 198u8, 253u8, 30u8],
            [228u8, 80u8, 211u8, 140u8],
            [230u8, 2u8, 223u8, 5u8],
            [236u8, 68u8, 47u8, 5u8],
            [251u8, 143u8, 65u8, 178u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockERC20Errors {
        const NAME: &'static str = "MockERC20Errors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ERC20InsufficientAllowance(_) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientBalance(_) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidApprover(_) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidReceiver(_) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSender(_) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSpender(_) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockERC20Errors>] = &[
                {
                    fn ERC20InvalidSpender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InvalidSpender)
                    }
                    ERC20InvalidSpender
                },
                {
                    fn ERC20InvalidSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InvalidSender)
                    }
                    ERC20InvalidSender
                },
                {
                    fn ERC20InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InsufficientBalance)
                    }
                    ERC20InsufficientBalance
                },
                {
                    fn ERC20InvalidApprover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InvalidApprover)
                    }
                    ERC20InvalidApprover
                },
                {
                    fn ERC20InvalidReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InvalidReceiver)
                    }
                    ERC20InvalidReceiver
                },
                {
                    fn ERC20InsufficientAllowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC20Errors> {
                        <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC20Errors::ERC20InsufficientAllowance)
                    }
                    ERC20InsufficientAllowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockERC20`](self) events.
    pub enum MockERC20Events {
        Approval(Approval),
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl MockERC20Events {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MockERC20Events {
        const NAME: &'static str = "MockERC20Events";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MockERC20Events {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockERC20`](self) contract instance.

See the [wrapper's documentation](`MockERC20Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockERC20Instance<T, P, N> {
        MockERC20Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        name: alloy::sol_types::private::String,
        symbol: alloy::sol_types::private::String,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockERC20Instance<T, P, N>>,
    > {
        MockERC20Instance::<T, P, N>::deploy(provider, name, symbol)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        name: alloy::sol_types::private::String,
        symbol: alloy::sol_types::private::String,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockERC20Instance::<T, P, N>::deploy_builder(provider, name, symbol)
    }
    /**A [`MockERC20`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockERC20`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockERC20Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockERC20Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockERC20Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockERC20`](self) contract instance.

See the [wrapper's documentation](`MockERC20Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            name: alloy::sol_types::private::String,
            symbol: alloy::sol_types::private::String,
        ) -> alloy_contract::Result<MockERC20Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, name, symbol);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            name: alloy::sol_types::private::String,
            symbol: alloy::sol_types::private::String,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { name, symbol },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockERC20Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockERC20Instance<T, P, N> {
            MockERC20Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, value })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { account })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, decimalsCall, N> {
            self.call_builder(&decimalsCall {})
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall { to, amount })
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall { to, value })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    value,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC20Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
