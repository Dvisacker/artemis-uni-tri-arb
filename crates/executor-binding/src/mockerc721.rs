/**

Generated by the following Solidity interface...
```solidity
interface MockERC721 {
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);

    function approve(address spender, uint256 id) external payable;
    function balanceOf(address owner) external view returns (uint256);
    function getApproved(uint256 id) external view returns (address);
    function initialize(string memory name_, string memory symbol_) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function name() external view returns (string memory);
    function ownerOf(uint256 id) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 id) external payable;
    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) external payable;
    function setApprovalForAll(address operator, bool approved) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 id) external view returns (string memory);
    function transferFrom(address from, address to, uint256 id) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getApproved",
    "inputs": [
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "name_",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "symbol_",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isApprovedForAll",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ownerOf",
    "inputs": [
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "setApprovalForAll",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenURI",
    "inputs": [
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_approved",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApprovalForAll",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_approved",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "_from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod MockERC721 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b611a6d61002b8239611a6d90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6108a0565b61001d5f356100fc565b806301ffc9a7146100f757806306fdde03146100f2578063081812fc146100ed578063095ea7b3146100e857806323b872dd146100e357806342842e0e146100de5780634cd88b76146100d95780636352211e146100d457806370a08231146100cf57806395d89b41146100ca578063a22cb465146100c5578063b88d4fde146100c0578063c87b56dd146100bb5763e985e9c50361000e5761086a565b610808565b6107db565b6106cc565b610647565b610612565b61059d565b610569565b610401565b6103d7565b610373565b6102e9565b610237565b610188565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61012981610114565b0361013057565b5f80fd5b9050359061014182610120565b565b9060208282031261015c57610159915f01610134565b90565b61010c565b151590565b61016f90610161565b9052565b9190610186905f60208501940190610166565b565b346101b8576101b46101a361019e366004610143565b61090b565b6101ab610102565b91829182610173565b0390f35b610108565b5f9103126101c757565b61010c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61020d61021660209361021b93610204816101cc565b938480936101d0565b958691016101d9565b6101e4565b0190565b6102349160208201915f8184039101526101ee565b90565b34610267576102473660046101bd565b610263610252610a98565b61025a610102565b9182918261021f565b0390f35b610108565b90565b6102788161026c565b0361027f57565b5f80fd5b905035906102908261026f565b565b906020828203126102ab576102a8915f01610283565b90565b61010c565b60018060a01b031690565b6102c4906102b0565b90565b6102d0906102bb565b9052565b91906102e7905f602085019401906102c7565b565b34610319576103156103046102ff366004610292565b610b17565b61030c610102565b918291826102d4565b0390f35b610108565b610327816102bb565b0361032e57565b5f80fd5b9050359061033f8261031e565b565b9190604083820312610369578061035d610366925f8601610332565b93602001610283565b90565b61010c565b5f0190565b610387610381366004610341565b90610c82565b61038f610102565b806103998161036e565b0390f35b90916060828403126103d2576103cf6103b8845f8501610332565b936103c68160208601610332565b93604001610283565b90565b61010c565b6103eb6103e536600461039d565b91610fa0565b6103f3610102565b806103fd8161036e565b0390f35b61041561040f36600461039d565b91611280565b61041d610102565b806104278161036e565b0390f35b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610451906101e4565b810190811067ffffffffffffffff82111761046b57604052565b610433565b9061048361047c610102565b9283610447565b565b67ffffffffffffffff81116104a35761049f6020916101e4565b0190565b610433565b90825f939282370152565b909291926104c86104c382610485565b610470565b938185526020850190828401116104e4576104e2926104a8565b565b61042f565b9080601f8301121561050757816020610504933591016104b3565b90565b61042b565b919091604081840312610564575f81013567ffffffffffffffff811161055f57836105389183016104e9565b92602082013567ffffffffffffffff811161055a5761055792016104e9565b90565b610110565b610110565b61010c565b346105985761058261057c36600461050c565b9061160d565b61058a610102565b806105948161036e565b0390f35b610108565b346105cd576105c96105b86105b3366004610292565b6116cd565b6105c0610102565b918291826102d4565b0390f35b610108565b906020828203126105eb576105e8915f01610332565b90565b61010c565b6105f99061026c565b9052565b9190610610905f602085019401906105f0565b565b346106425761063e61062d6106283660046105d2565b611793565b610635610102565b918291826105fd565b0390f35b610108565b34610677576106573660046101bd565b6106736106626117d7565b61066a610102565b9182918261021f565b0390f35b610108565b61068581610161565b0361068c57565b5f80fd5b9050359061069d8261067c565b565b91906040838203126106c757806106bb6106c4925f8601610332565b93602001610690565b90565b61010c565b346106fb576106e56106df36600461069f565b906117ed565b6106ed610102565b806106f78161036e565b0390f35b610108565b67ffffffffffffffff811161071e5761071a6020916101e4565b0190565b610433565b9092919261073861073382610700565b610470565b9381855260208501908284011161075457610752926104a8565b565b61042f565b9080601f830112156107775781602061077493359101610723565b90565b61042b565b906080828203126107d657610793815f8401610332565b926107a18260208501610332565b926107af8360408301610283565b92606082013567ffffffffffffffff81116107d1576107ce9201610759565b90565b610110565b61010c565b6107f26107e936600461077c565b929190916118d6565b6107fa610102565b806108048161036e565b0390f35b346108385761083461082361081e366004610292565b6119be565b61082b610102565b9182918261021f565b0390f35b610108565b91906040838203126108655780610859610862925f8601610332565b93602001610332565b90565b61010c565b3461089b5761089761088661088036600461083d565b906119ca565b61088e610102565b91829182610173565b0390f35b610108565b5f80fd5b5f90565b90565b60e01b90565b6108c56108c06108ca926108a8565b6108ab565b610114565b90565b90565b6108e46108df6108e9926108cd565b6108ab565b610114565b90565b90565b6109036108fe610908926108ec565b6108ab565b610114565b90565b6109136108a4565b508061092b6109256301ffc9a76108b1565b91610114565b14801561095e575b90811561093f575b5090565b9050610957610951635b5e139f6108ef565b91610114565b145f61093b565b50806109766109706380ac58cd6108d0565b91610114565b14610933565b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156109b5575b60208310146109b057565b610981565b91607f16916109a5565b60209181520190565b5f5260205f2090565b905f92918054906109eb6109e483610995565b80946109bf565b916001811690815f14610a425750600114610a06575b505050565b610a1391929394506109c8565b915f925b818410610a2a57505001905f8080610a01565b60018160209295939554848601520191019290610a17565b92949550505060ff19168252151560200201905f8080610a01565b90610a67916109d1565b90565b90610a8a610a8392610a7a610102565b93848092610a5d565b0383610447565b565b610a9590610a6a565b90565b610aa061097c565b50610aaa5f610a8c565b90565b5f90565b90565b610ac8610ac3610acd9261026c565b610ab1565b61026c565b90565b90610ada90610ab4565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b610b02610b0791610ae6565b610aeb565b90565b610b149054610af6565b90565b610b2e610b3391610b26610aad565b506004610ad0565b610b0a565b90565b610b4a610b45610b4f926102b0565b610ab1565b6102b0565b90565b610b5b90610b36565b90565b610b6790610b52565b90565b90610b7490610b5e565b5f5260205260405f2090565b90610b8a90610b5e565b5f5260205260405f2090565b60ff1690565b610ba8610bad91610ae6565b610b96565b90565b610bba9054610b9c565b90565b5f7f4e4f545f415554484f52495a4544000000000000000000000000000000000000910152565b610bf1600e6020926101d0565b610bfa81610bbd565b0190565b610c139060208101905f818303910152610be4565b90565b15610c1d57565b610c25610102565b62461bcd60e51b815280610c3b60048201610bfe565b0390fd5b5f1b90565b90610c5560018060a01b0391610c3f565b9181191691161790565b90565b90610c77610c72610c7e92610b5e565b610c5f565b8254610c44565b9055565b90610c97610c9260028390610ad0565b610b0a565b33610caa610ca4836102bb565b916102bb565b148015610d25575b610cbb90610c16565b610cd083610ccb60048590610ad0565b610c62565b91610d0d610d07610d017f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595610b5e565b92610b5e565b92610ab4565b92610d16610102565b80610d208161036e565b0390a4565b50610cbb610d47610d42610d3b60058590610b6a565b3390610b80565b610bb0565b9050610cb2565b5f7f57524f4e475f46524f4d00000000000000000000000000000000000000000000910152565b610d82600a6020926101d0565b610d8b81610d4e565b0190565b610da49060208101905f818303910152610d75565b90565b15610dae57565b610db6610102565b62461bcd60e51b815280610dcc60048201610d8f565b0390fd5b90565b610de7610de2610dec92610dd0565b610ab1565b6102b0565b90565b610df890610dd3565b90565b5f7f494e56414c49445f524543495049454e54000000000000000000000000000000910152565b610e2f60116020926101d0565b610e3881610dfb565b0190565b610e519060208101905f818303910152610e22565b90565b15610e5b57565b610e63610102565b62461bcd60e51b815280610e7960048201610e3c565b0390fd5b90610e8790610b5e565b5f5260205260405f2090565b90565b610ea2610ea791610ae6565b610e93565b90565b610eb49054610e96565b90565b634e487b7160e01b5f52601160045260245ffd5b610ed49061026c565b5f8114610ee2576001900390565b610eb7565b90610ef35f1991610c3f565b9181191691161790565b90565b90610f15610f10610f1c92610ab4565b610efd565b8254610ee7565b9055565b610f299061026c565b5f198114610f375760010190565b610eb7565b1b90565b91906008610f60910291610f5a60018060a01b0384610f3c565b92610f3c565b9181191691161790565b9190610f80610f7b610f8893610b5e565b610c5f565b908354610f40565b9055565b610f9e91610f98610aad565b91610f6a565b565b919091610fd281610fcc610fc6610fc1610fbc60028890610ad0565b610b0a565b6102bb565b916102bb565b14610da7565b610ff783610ff0610fea610fe55f610def565b6102bb565b916102bb565b1415610e54565b3361100a611004836102bb565b916102bb565b14801561111f575b80156110ed575b61102290610c16565b61104861103160038390610e7d565b61104261103d82610eaa565b610ecb565b90610f00565b61106e61105760038590610e7d565b61106861106382610eaa565b610f20565b90610f00565b6110838361107e60028590610ad0565b610c62565b6110985f61109360048590610ad0565b610f8c565b916110d56110cf6110c97fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95610b5e565b92610b5e565b92610ab4565b926110de610102565b806110e88161036e565b0390a4565b506110223361111761111161110c61110760048890610ad0565b610b0a565b6102bb565b916102bb565b149050611019565b5061113e61113961113260058490610b6a565b3390610b80565b610bb0565b611012565b61114c90610b36565b90565b61115890611143565b90565b61116490610b52565b90565b9050519061117482610120565b565b9060208282031261118f5761118c915f01611167565b90565b61010c565b60209181520190565b6111a85f8092611194565b0190565b90916111eb936111d46111de926111ca60808601965f8701906102c7565b60208501906102c7565b60408301906105f0565b606081830391015261119d565b90565b6111f6610102565b3d5f823e3d90fd5b5f7f554e534146455f524543495049454e5400000000000000000000000000000000910152565b61123260106020926101d0565b61123b816111fe565b0190565b6112549060208101905f818303910152611225565b90565b1561125e57565b611266610102565b62461bcd60e51b81528061127c6004820161123f565b0390fd5b61128c81838591610fa0565b61129e61129883611a0e565b15610161565b9182156112b4575b50506112b29150611257565b565b602092506112c46112c99161114f565b61115b565b6112ec5f63150b7a026112f73395976112e0610102565b988997889687956108ab565b8552600485016111ac565b03925af1801561135c576112b2915f9161132e575b50611326611320630a85bd0160e11b610114565b91610114565b145f806112a6565b61134f915060203d8111611355575b6113478183610447565b810190611176565b5f61130c565b503d61133d565b6111ee565b5f7f414c52454144595f494e495449414c495a454400000000000000000000000000910152565b61139560136020926101d0565b61139e81611361565b0190565b6113b79060208101905f818303910152611388565b90565b156113c157565b6113c9610102565b62461bcd60e51b8152806113df600482016113a2565b0390fd5b601f602091010490565b919060086114089102916114025f1984610f3c565b92610f3c565b9181191691161790565b919061142861142361143093610ab4565b610efd565b9083546113ed565b9055565b5f90565b61144a91611444611434565b91611412565b565b5b818110611458575050565b806114655f600193611438565b0161144d565b9190601f811161147b575b505050565b6114876114ac936109c8565b906020611493846113e3565b830193106114b4575b6114a5906113e3565b019061144c565b5f8080611476565b91506114a58192905061149c565b1c90565b906114d6905f19906008026114c2565b191690565b816114e5916114c6565b906002021790565b906114f7816101cc565b9067ffffffffffffffff82116115b75761151b826115158554610995565b8561146b565b602090601f831160011461154f5791809161153e935f92611543575b50506114db565b90555b565b90915001515f80611537565b601f1983169161155e856109c8565b925f5b81811061159f57509160029391856001969410611585575b50505002019055611541565b611595910151601f8416906114c6565b90555f8080611579565b91936020600181928787015181550195019201611561565b610433565b906115c6916114ed565b565b906115d460ff91610c3f565b9181191691161790565b6115e790610161565b90565b90565b906116026115fd611609926115de565b6115ea565b82546115c8565b9055565b9061163661163d9261163061162b6116256006610bb0565b15610161565b6113ba565b5f6115bc565b60016115bc565b611649600160066115ed565b565b5f7f4e4f545f4d494e54454400000000000000000000000000000000000000000000910152565b61167f600a6020926101d0565b6116888161164b565b0190565b6116a19060208101905f818303910152611672565b90565b156116ab57565b6116b3610102565b62461bcd60e51b8152806116c96004820161168c565b0390fd5b6116e46116e9916116dc610aad565b506002610ad0565b610b0a565b9061170f826117086117026116fd5f610def565b6102bb565b916102bb565b14156116a4565b565b5f7f5a45524f5f414444524553530000000000000000000000000000000000000000910152565b611745600c6020926101d0565b61174e81611711565b0190565b6117679060208101905f818303910152611738565b90565b1561177157565b611779610102565b62461bcd60e51b81528061178f60048201611752565b0390fd5b6117cf6117d4916117a2611434565b506117c8816117c16117bb6117b65f610def565b6102bb565b916102bb565b141561176a565b6003610e7d565b610eaa565b90565b6117df61097c565b506117ea6001610a8c565b90565b9061180d8161180861180160053390610b6a565b8590610b80565b6115ed565b339190916118596118476118417f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193610b5e565b93610b5e565b93611850610102565b91829182610173565b0390a3565b5190565b61188161188a60209361188f936118788161185e565b93848093611194565b958691016101d9565b6101e4565b0190565b90926118c6906118bc6118d396946118b260808601975f8701906102c7565b60208501906102c7565b60408301906105f0565b6060818403910152611862565b90565b9091926118e582848691610fa0565b6118f76118f184611a0e565b15610161565b92831561190e575b50505061190c9150611257565b565b602093505f6119276119226119489361114f565b61115b565b9261195363150b7a029133969861193c610102565b998a98899788966108ab565b865260048601611893565b03925af180156119b95761190c915f9161198b575b5061198261197c630a85bd0160e11b610114565b91610114565b145f80806118ff565b6119ac915060203d81116119b2575b6119a48183610447565b810190611176565b5f611968565b503d61199a565b6111ee565b506119c761097c565b90565b6119ef916119e56119ea926119dd6108a4565b506005610b6a565b610b80565b610bb0565b90565b611a06611a01611a0b92610dd0565b610ab1565b61026c565b90565b611a166108a4565b50611a1f611434565b503b611a33611a2d5f6119f2565b9161026c565b119056fea2646970667358221220a66f0a3c020528ed21431cdacecce6755bd693ad47681561d84a0d20b601818364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x1Ama\0+\x829a\x1Am\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\xA0V[a\0\x1D_5a\0\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\0\xF7W\x80c\x06\xFD\xDE\x03\x14a\0\xF2W\x80c\x08\x18\x12\xFC\x14a\0\xEDW\x80c\t^\xA7\xB3\x14a\0\xE8W\x80c#\xB8r\xDD\x14a\0\xE3W\x80cB\x84.\x0E\x14a\0\xDEW\x80cL\xD8\x8Bv\x14a\0\xD9W\x80ccR!\x1E\x14a\0\xD4W\x80cp\xA0\x821\x14a\0\xCFW\x80c\x95\xD8\x9BA\x14a\0\xCAW\x80c\xA2,\xB4e\x14a\0\xC5W\x80c\xB8\x8DO\xDE\x14a\0\xC0W\x80c\xC8{V\xDD\x14a\0\xBBWc\xE9\x85\xE9\xC5\x03a\0\x0EWa\x08jV[a\x08\x08V[a\x07\xDBV[a\x06\xCCV[a\x06GV[a\x06\x12V[a\x05\x9DV[a\x05iV[a\x04\x01V[a\x03\xD7V[a\x03sV[a\x02\xE9V[a\x027V[a\x01\x88V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01)\x81a\x01\x14V[\x03a\x010WV[_\x80\xFD[\x90P5\x90a\x01A\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x01\\Wa\x01Y\x91_\x01a\x014V[\x90V[a\x01\x0CV[\x15\x15\x90V[a\x01o\x90a\x01aV[\x90RV[\x91\x90a\x01\x86\x90_` \x85\x01\x94\x01\x90a\x01fV[V[4a\x01\xB8Wa\x01\xB4a\x01\xA3a\x01\x9E6`\x04a\x01CV[a\t\x0BV[a\x01\xABa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x01\xC7WV[a\x01\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\ra\x02\x16` \x93a\x02\x1B\x93a\x02\x04\x81a\x01\xCCV[\x93\x84\x80\x93a\x01\xD0V[\x95\x86\x91\x01a\x01\xD9V[a\x01\xE4V[\x01\x90V[a\x024\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\xEEV[\x90V[4a\x02gWa\x02G6`\x04a\x01\xBDV[a\x02ca\x02Ra\n\x98V[a\x02Za\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x02x\x81a\x02lV[\x03a\x02\x7FWV[_\x80\xFD[\x90P5\x90a\x02\x90\x82a\x02oV[V[\x90` \x82\x82\x03\x12a\x02\xABWa\x02\xA8\x91_\x01a\x02\x83V[\x90V[a\x01\x0CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xC4\x90a\x02\xB0V[\x90V[a\x02\xD0\x90a\x02\xBBV[\x90RV[\x91\x90a\x02\xE7\x90_` \x85\x01\x94\x01\x90a\x02\xC7V[V[4a\x03\x19Wa\x03\x15a\x03\x04a\x02\xFF6`\x04a\x02\x92V[a\x0B\x17V[a\x03\x0Ca\x01\x02V[\x91\x82\x91\x82a\x02\xD4V[\x03\x90\xF3[a\x01\x08V[a\x03'\x81a\x02\xBBV[\x03a\x03.WV[_\x80\xFD[\x90P5\x90a\x03?\x82a\x03\x1EV[V[\x91\x90`@\x83\x82\x03\x12a\x03iW\x80a\x03]a\x03f\x92_\x86\x01a\x032V[\x93` \x01a\x02\x83V[\x90V[a\x01\x0CV[_\x01\x90V[a\x03\x87a\x03\x816`\x04a\x03AV[\x90a\x0C\x82V[a\x03\x8Fa\x01\x02V[\x80a\x03\x99\x81a\x03nV[\x03\x90\xF3[\x90\x91``\x82\x84\x03\x12a\x03\xD2Wa\x03\xCFa\x03\xB8\x84_\x85\x01a\x032V[\x93a\x03\xC6\x81` \x86\x01a\x032V[\x93`@\x01a\x02\x83V[\x90V[a\x01\x0CV[a\x03\xEBa\x03\xE56`\x04a\x03\x9DV[\x91a\x0F\xA0V[a\x03\xF3a\x01\x02V[\x80a\x03\xFD\x81a\x03nV[\x03\x90\xF3[a\x04\x15a\x04\x0F6`\x04a\x03\x9DV[\x91a\x12\x80V[a\x04\x1Da\x01\x02V[\x80a\x04'\x81a\x03nV[\x03\x90\xF3[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04Q\x90a\x01\xE4V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04kW`@RV[a\x043V[\x90a\x04\x83a\x04|a\x01\x02V[\x92\x83a\x04GV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xA3Wa\x04\x9F` \x91a\x01\xE4V[\x01\x90V[a\x043V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x04\xC8a\x04\xC3\x82a\x04\x85V[a\x04pV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\xE4Wa\x04\xE2\x92a\x04\xA8V[V[a\x04/V[\x90\x80`\x1F\x83\x01\x12\x15a\x05\x07W\x81` a\x05\x04\x935\x91\x01a\x04\xB3V[\x90V[a\x04+V[\x91\x90\x91`@\x81\x84\x03\x12a\x05dW_\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05_W\x83a\x058\x91\x83\x01a\x04\xE9V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05ZWa\x05W\x92\x01a\x04\xE9V[\x90V[a\x01\x10V[a\x01\x10V[a\x01\x0CV[4a\x05\x98Wa\x05\x82a\x05|6`\x04a\x05\x0CV[\x90a\x16\rV[a\x05\x8Aa\x01\x02V[\x80a\x05\x94\x81a\x03nV[\x03\x90\xF3[a\x01\x08V[4a\x05\xCDWa\x05\xC9a\x05\xB8a\x05\xB36`\x04a\x02\x92V[a\x16\xCDV[a\x05\xC0a\x01\x02V[\x91\x82\x91\x82a\x02\xD4V[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x05\xEBWa\x05\xE8\x91_\x01a\x032V[\x90V[a\x01\x0CV[a\x05\xF9\x90a\x02lV[\x90RV[\x91\x90a\x06\x10\x90_` \x85\x01\x94\x01\x90a\x05\xF0V[V[4a\x06BWa\x06>a\x06-a\x06(6`\x04a\x05\xD2V[a\x17\x93V[a\x065a\x01\x02V[\x91\x82\x91\x82a\x05\xFDV[\x03\x90\xF3[a\x01\x08V[4a\x06wWa\x06W6`\x04a\x01\xBDV[a\x06sa\x06ba\x17\xD7V[a\x06ja\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[a\x06\x85\x81a\x01aV[\x03a\x06\x8CWV[_\x80\xFD[\x90P5\x90a\x06\x9D\x82a\x06|V[V[\x91\x90`@\x83\x82\x03\x12a\x06\xC7W\x80a\x06\xBBa\x06\xC4\x92_\x86\x01a\x032V[\x93` \x01a\x06\x90V[\x90V[a\x01\x0CV[4a\x06\xFBWa\x06\xE5a\x06\xDF6`\x04a\x06\x9FV[\x90a\x17\xEDV[a\x06\xEDa\x01\x02V[\x80a\x06\xF7\x81a\x03nV[\x03\x90\xF3[a\x01\x08V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x1EWa\x07\x1A` \x91a\x01\xE4V[\x01\x90V[a\x043V[\x90\x92\x91\x92a\x078a\x073\x82a\x07\0V[a\x04pV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07TWa\x07R\x92a\x04\xA8V[V[a\x04/V[\x90\x80`\x1F\x83\x01\x12\x15a\x07wW\x81` a\x07t\x935\x91\x01a\x07#V[\x90V[a\x04+V[\x90`\x80\x82\x82\x03\x12a\x07\xD6Wa\x07\x93\x81_\x84\x01a\x032V[\x92a\x07\xA1\x82` \x85\x01a\x032V[\x92a\x07\xAF\x83`@\x83\x01a\x02\x83V[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xD1Wa\x07\xCE\x92\x01a\x07YV[\x90V[a\x01\x10V[a\x01\x0CV[a\x07\xF2a\x07\xE96`\x04a\x07|V[\x92\x91\x90\x91a\x18\xD6V[a\x07\xFAa\x01\x02V[\x80a\x08\x04\x81a\x03nV[\x03\x90\xF3[4a\x088Wa\x084a\x08#a\x08\x1E6`\x04a\x02\x92V[a\x19\xBEV[a\x08+a\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[\x91\x90`@\x83\x82\x03\x12a\x08eW\x80a\x08Ya\x08b\x92_\x86\x01a\x032V[\x93` \x01a\x032V[\x90V[a\x01\x0CV[4a\x08\x9BWa\x08\x97a\x08\x86a\x08\x806`\x04a\x08=V[\x90a\x19\xCAV[a\x08\x8Ea\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[\x90V[`\xE0\x1B\x90V[a\x08\xC5a\x08\xC0a\x08\xCA\x92a\x08\xA8V[a\x08\xABV[a\x01\x14V[\x90V[\x90V[a\x08\xE4a\x08\xDFa\x08\xE9\x92a\x08\xCDV[a\x08\xABV[a\x01\x14V[\x90V[\x90V[a\t\x03a\x08\xFEa\t\x08\x92a\x08\xECV[a\x08\xABV[a\x01\x14V[\x90V[a\t\x13a\x08\xA4V[P\x80a\t+a\t%c\x01\xFF\xC9\xA7a\x08\xB1V[\x91a\x01\x14V[\x14\x80\x15a\t^W[\x90\x81\x15a\t?W[P\x90V[\x90Pa\tWa\tQc[^\x13\x9Fa\x08\xEFV[\x91a\x01\x14V[\x14_a\t;V[P\x80a\tva\tpc\x80\xACX\xCDa\x08\xD0V[\x91a\x01\x14V[\x14a\t3V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t\xB5W[` \x83\x10\x14a\t\xB0WV[a\t\x81V[\x91`\x7F\x16\x91a\t\xA5V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\t\xEBa\t\xE4\x83a\t\x95V[\x80\x94a\t\xBFV[\x91`\x01\x81\x16\x90\x81_\x14a\nBWP`\x01\x14a\n\x06W[PPPV[a\n\x13\x91\x92\x93\x94Pa\t\xC8V[\x91_\x92[\x81\x84\x10a\n*WPP\x01\x90_\x80\x80a\n\x01V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\x17V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\n\x01V[\x90a\ng\x91a\t\xD1V[\x90V[\x90a\n\x8Aa\n\x83\x92a\nza\x01\x02V[\x93\x84\x80\x92a\n]V[\x03\x83a\x04GV[V[a\n\x95\x90a\njV[\x90V[a\n\xA0a\t|V[Pa\n\xAA_a\n\x8CV[\x90V[_\x90V[\x90V[a\n\xC8a\n\xC3a\n\xCD\x92a\x02lV[a\n\xB1V[a\x02lV[\x90V[\x90a\n\xDA\x90a\n\xB4V[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\x02a\x0B\x07\x91a\n\xE6V[a\n\xEBV[\x90V[a\x0B\x14\x90Ta\n\xF6V[\x90V[a\x0B.a\x0B3\x91a\x0B&a\n\xADV[P`\x04a\n\xD0V[a\x0B\nV[\x90V[a\x0BJa\x0BEa\x0BO\x92a\x02\xB0V[a\n\xB1V[a\x02\xB0V[\x90V[a\x0B[\x90a\x0B6V[\x90V[a\x0Bg\x90a\x0BRV[\x90V[\x90a\x0Bt\x90a\x0B^V[_R` R`@_ \x90V[\x90a\x0B\x8A\x90a\x0B^V[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0B\xA8a\x0B\xAD\x91a\n\xE6V[a\x0B\x96V[\x90V[a\x0B\xBA\x90Ta\x0B\x9CV[\x90V[_\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xF1`\x0E` \x92a\x01\xD0V[a\x0B\xFA\x81a\x0B\xBDV[\x01\x90V[a\x0C\x13\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xE4V[\x90V[\x15a\x0C\x1DWV[a\x0C%a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C;`\x04\x82\x01a\x0B\xFEV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0CU`\x01\x80`\xA0\x1B\x03\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0Cwa\x0Cra\x0C~\x92a\x0B^V[a\x0C_V[\x82Ta\x0CDV[\x90UV[\x90a\x0C\x97a\x0C\x92`\x02\x83\x90a\n\xD0V[a\x0B\nV[3a\x0C\xAAa\x0C\xA4\x83a\x02\xBBV[\x91a\x02\xBBV[\x14\x80\x15a\r%W[a\x0C\xBB\x90a\x0C\x16V[a\x0C\xD0\x83a\x0C\xCB`\x04\x85\x90a\n\xD0V[a\x0CbV[\x91a\r\ra\r\x07a\r\x01\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x95a\x0B^V[\x92a\x0B^V[\x92a\n\xB4V[\x92a\r\x16a\x01\x02V[\x80a\r \x81a\x03nV[\x03\x90\xA4V[Pa\x0C\xBBa\rGa\rBa\r;`\x05\x85\x90a\x0BjV[3\x90a\x0B\x80V[a\x0B\xB0V[\x90Pa\x0C\xB2V[_\x7FWRONG_FROM\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\x82`\n` \x92a\x01\xD0V[a\r\x8B\x81a\rNV[\x01\x90V[a\r\xA4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\ruV[\x90V[\x15a\r\xAEWV[a\r\xB6a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xCC`\x04\x82\x01a\r\x8FV[\x03\x90\xFD[\x90V[a\r\xE7a\r\xE2a\r\xEC\x92a\r\xD0V[a\n\xB1V[a\x02\xB0V[\x90V[a\r\xF8\x90a\r\xD3V[\x90V[_\x7FINVALID_RECIPIENT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E/`\x11` \x92a\x01\xD0V[a\x0E8\x81a\r\xFBV[\x01\x90V[a\x0EQ\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\"V[\x90V[\x15a\x0E[WV[a\x0Eca\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Ey`\x04\x82\x01a\x0E<V[\x03\x90\xFD[\x90a\x0E\x87\x90a\x0B^V[_R` R`@_ \x90V[\x90V[a\x0E\xA2a\x0E\xA7\x91a\n\xE6V[a\x0E\x93V[\x90V[a\x0E\xB4\x90Ta\x0E\x96V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E\xD4\x90a\x02lV[_\x81\x14a\x0E\xE2W`\x01\x90\x03\x90V[a\x0E\xB7V[\x90a\x0E\xF3_\x19\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0F\x15a\x0F\x10a\x0F\x1C\x92a\n\xB4V[a\x0E\xFDV[\x82Ta\x0E\xE7V[\x90UV[a\x0F)\x90a\x02lV[_\x19\x81\x14a\x0F7W`\x01\x01\x90V[a\x0E\xB7V[\x1B\x90V[\x91\x90`\x08a\x0F`\x91\x02\x91a\x0FZ`\x01\x80`\xA0\x1B\x03\x84a\x0F<V[\x92a\x0F<V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0F\x80a\x0F{a\x0F\x88\x93a\x0B^V[a\x0C_V[\x90\x83Ta\x0F@V[\x90UV[a\x0F\x9E\x91a\x0F\x98a\n\xADV[\x91a\x0FjV[V[\x91\x90\x91a\x0F\xD2\x81a\x0F\xCCa\x0F\xC6a\x0F\xC1a\x0F\xBC`\x02\x88\x90a\n\xD0V[a\x0B\nV[a\x02\xBBV[\x91a\x02\xBBV[\x14a\r\xA7V[a\x0F\xF7\x83a\x0F\xF0a\x0F\xEAa\x0F\xE5_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x0ETV[3a\x10\na\x10\x04\x83a\x02\xBBV[\x91a\x02\xBBV[\x14\x80\x15a\x11\x1FW[\x80\x15a\x10\xEDW[a\x10\"\x90a\x0C\x16V[a\x10Ha\x101`\x03\x83\x90a\x0E}V[a\x10Ba\x10=\x82a\x0E\xAAV[a\x0E\xCBV[\x90a\x0F\0V[a\x10na\x10W`\x03\x85\x90a\x0E}V[a\x10ha\x10c\x82a\x0E\xAAV[a\x0F V[\x90a\x0F\0V[a\x10\x83\x83a\x10~`\x02\x85\x90a\n\xD0V[a\x0CbV[a\x10\x98_a\x10\x93`\x04\x85\x90a\n\xD0V[a\x0F\x8CV[\x91a\x10\xD5a\x10\xCFa\x10\xC9\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x95a\x0B^V[\x92a\x0B^V[\x92a\n\xB4V[\x92a\x10\xDEa\x01\x02V[\x80a\x10\xE8\x81a\x03nV[\x03\x90\xA4V[Pa\x10\"3a\x11\x17a\x11\x11a\x11\x0Ca\x11\x07`\x04\x88\x90a\n\xD0V[a\x0B\nV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x90Pa\x10\x19V[Pa\x11>a\x119a\x112`\x05\x84\x90a\x0BjV[3\x90a\x0B\x80V[a\x0B\xB0V[a\x10\x12V[a\x11L\x90a\x0B6V[\x90V[a\x11X\x90a\x11CV[\x90V[a\x11d\x90a\x0BRV[\x90V[\x90PQ\x90a\x11t\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x11\x8FWa\x11\x8C\x91_\x01a\x11gV[\x90V[a\x01\x0CV[` \x91\x81R\x01\x90V[a\x11\xA8_\x80\x92a\x11\x94V[\x01\x90V[\x90\x91a\x11\xEB\x93a\x11\xD4a\x11\xDE\x92a\x11\xCA`\x80\x86\x01\x96_\x87\x01\x90a\x02\xC7V[` \x85\x01\x90a\x02\xC7V[`@\x83\x01\x90a\x05\xF0V[``\x81\x83\x03\x91\x01Ra\x11\x9DV[\x90V[a\x11\xF6a\x01\x02V[=_\x82>=\x90\xFD[_\x7FUNSAFE_RECIPIENT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x122`\x10` \x92a\x01\xD0V[a\x12;\x81a\x11\xFEV[\x01\x90V[a\x12T\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12%V[\x90V[\x15a\x12^WV[a\x12fa\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12|`\x04\x82\x01a\x12?V[\x03\x90\xFD[a\x12\x8C\x81\x83\x85\x91a\x0F\xA0V[a\x12\x9Ea\x12\x98\x83a\x1A\x0EV[\x15a\x01aV[\x91\x82\x15a\x12\xB4W[PPa\x12\xB2\x91Pa\x12WV[V[` \x92Pa\x12\xC4a\x12\xC9\x91a\x11OV[a\x11[V[a\x12\xEC_c\x15\x0Bz\x02a\x12\xF73\x95\x97a\x12\xE0a\x01\x02V[\x98\x89\x97\x88\x96\x87\x95a\x08\xABV[\x85R`\x04\x85\x01a\x11\xACV[\x03\x92Z\xF1\x80\x15a\x13\\Wa\x12\xB2\x91_\x91a\x13.W[Pa\x13&a\x13 c\n\x85\xBD\x01`\xE1\x1Ba\x01\x14V[\x91a\x01\x14V[\x14_\x80a\x12\xA6V[a\x13O\x91P` =\x81\x11a\x13UW[a\x13G\x81\x83a\x04GV[\x81\x01\x90a\x11vV[_a\x13\x0CV[P=a\x13=V[a\x11\xEEV[_\x7FALREADY_INITIALIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\x95`\x13` \x92a\x01\xD0V[a\x13\x9E\x81a\x13aV[\x01\x90V[a\x13\xB7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x88V[\x90V[\x15a\x13\xC1WV[a\x13\xC9a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13\xDF`\x04\x82\x01a\x13\xA2V[\x03\x90\xFD[`\x1F` \x91\x01\x04\x90V[\x91\x90`\x08a\x14\x08\x91\x02\x91a\x14\x02_\x19\x84a\x0F<V[\x92a\x0F<V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x14(a\x14#a\x140\x93a\n\xB4V[a\x0E\xFDV[\x90\x83Ta\x13\xEDV[\x90UV[_\x90V[a\x14J\x91a\x14Da\x144V[\x91a\x14\x12V[V[[\x81\x81\x10a\x14XWPPV[\x80a\x14e_`\x01\x93a\x148V[\x01a\x14MV[\x91\x90`\x1F\x81\x11a\x14{W[PPPV[a\x14\x87a\x14\xAC\x93a\t\xC8V[\x90` a\x14\x93\x84a\x13\xE3V[\x83\x01\x93\x10a\x14\xB4W[a\x14\xA5\x90a\x13\xE3V[\x01\x90a\x14LV[_\x80\x80a\x14vV[\x91Pa\x14\xA5\x81\x92\x90Pa\x14\x9CV[\x1C\x90V[\x90a\x14\xD6\x90_\x19\x90`\x08\x02a\x14\xC2V[\x19\x16\x90V[\x81a\x14\xE5\x91a\x14\xC6V[\x90`\x02\x02\x17\x90V[\x90a\x14\xF7\x81a\x01\xCCV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x15\xB7Wa\x15\x1B\x82a\x15\x15\x85Ta\t\x95V[\x85a\x14kV[` \x90`\x1F\x83\x11`\x01\x14a\x15OW\x91\x80\x91a\x15>\x93_\x92a\x15CW[PPa\x14\xDBV[\x90U[V[\x90\x91P\x01Q_\x80a\x157V[`\x1F\x19\x83\x16\x91a\x15^\x85a\t\xC8V[\x92_[\x81\x81\x10a\x15\x9FWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x15\x85W[PPP\x02\x01\x90Ua\x15AV[a\x15\x95\x91\x01Q`\x1F\x84\x16\x90a\x14\xC6V[\x90U_\x80\x80a\x15yV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x15aV[a\x043V[\x90a\x15\xC6\x91a\x14\xEDV[V[\x90a\x15\xD4`\xFF\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xE7\x90a\x01aV[\x90V[\x90V[\x90a\x16\x02a\x15\xFDa\x16\t\x92a\x15\xDEV[a\x15\xEAV[\x82Ta\x15\xC8V[\x90UV[\x90a\x166a\x16=\x92a\x160a\x16+a\x16%`\x06a\x0B\xB0V[\x15a\x01aV[a\x13\xBAV[_a\x15\xBCV[`\x01a\x15\xBCV[a\x16I`\x01`\x06a\x15\xEDV[V[_\x7FNOT_MINTED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16\x7F`\n` \x92a\x01\xD0V[a\x16\x88\x81a\x16KV[\x01\x90V[a\x16\xA1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16rV[\x90V[\x15a\x16\xABWV[a\x16\xB3a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xC9`\x04\x82\x01a\x16\x8CV[\x03\x90\xFD[a\x16\xE4a\x16\xE9\x91a\x16\xDCa\n\xADV[P`\x02a\n\xD0V[a\x0B\nV[\x90a\x17\x0F\x82a\x17\x08a\x17\x02a\x16\xFD_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x16\xA4V[V[_\x7FZERO_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x17E`\x0C` \x92a\x01\xD0V[a\x17N\x81a\x17\x11V[\x01\x90V[a\x17g\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x178V[\x90V[\x15a\x17qWV[a\x17ya\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x8F`\x04\x82\x01a\x17RV[\x03\x90\xFD[a\x17\xCFa\x17\xD4\x91a\x17\xA2a\x144V[Pa\x17\xC8\x81a\x17\xC1a\x17\xBBa\x17\xB6_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x17jV[`\x03a\x0E}V[a\x0E\xAAV[\x90V[a\x17\xDFa\t|V[Pa\x17\xEA`\x01a\n\x8CV[\x90V[\x90a\x18\r\x81a\x18\x08a\x18\x01`\x053\x90a\x0BjV[\x85\x90a\x0B\x80V[a\x15\xEDV[3\x91\x90\x91a\x18Ya\x18Ga\x18A\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x93a\x0B^V[\x93a\x0B^V[\x93a\x18Pa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xA3V[Q\x90V[a\x18\x81a\x18\x8A` \x93a\x18\x8F\x93a\x18x\x81a\x18^V[\x93\x84\x80\x93a\x11\x94V[\x95\x86\x91\x01a\x01\xD9V[a\x01\xE4V[\x01\x90V[\x90\x92a\x18\xC6\x90a\x18\xBCa\x18\xD3\x96\x94a\x18\xB2`\x80\x86\x01\x97_\x87\x01\x90a\x02\xC7V[` \x85\x01\x90a\x02\xC7V[`@\x83\x01\x90a\x05\xF0V[``\x81\x84\x03\x91\x01Ra\x18bV[\x90V[\x90\x91\x92a\x18\xE5\x82\x84\x86\x91a\x0F\xA0V[a\x18\xF7a\x18\xF1\x84a\x1A\x0EV[\x15a\x01aV[\x92\x83\x15a\x19\x0EW[PPPa\x19\x0C\x91Pa\x12WV[V[` \x93P_a\x19'a\x19\"a\x19H\x93a\x11OV[a\x11[V[\x92a\x19Sc\x15\x0Bz\x02\x913\x96\x98a\x19<a\x01\x02V[\x99\x8A\x98\x89\x97\x88\x96a\x08\xABV[\x86R`\x04\x86\x01a\x18\x93V[\x03\x92Z\xF1\x80\x15a\x19\xB9Wa\x19\x0C\x91_\x91a\x19\x8BW[Pa\x19\x82a\x19|c\n\x85\xBD\x01`\xE1\x1Ba\x01\x14V[\x91a\x01\x14V[\x14_\x80\x80a\x18\xFFV[a\x19\xAC\x91P` =\x81\x11a\x19\xB2W[a\x19\xA4\x81\x83a\x04GV[\x81\x01\x90a\x11vV[_a\x19hV[P=a\x19\x9AV[a\x11\xEEV[Pa\x19\xC7a\t|V[\x90V[a\x19\xEF\x91a\x19\xE5a\x19\xEA\x92a\x19\xDDa\x08\xA4V[P`\x05a\x0BjV[a\x0B\x80V[a\x0B\xB0V[\x90V[a\x1A\x06a\x1A\x01a\x1A\x0B\x92a\r\xD0V[a\n\xB1V[a\x02lV[\x90V[a\x1A\x16a\x08\xA4V[Pa\x1A\x1Fa\x144V[P;a\x1A3a\x1A-_a\x19\xF2V[\x91a\x02lV[\x11\x90V\xFE\xA2dipfsX\"\x12 \xA6o\n<\x02\x05(\xED!C\x1C\xDA\xCE\xCC\xE6u[\xD6\x93\xADGh\x15a\xD8J\r \xB6\x01\x81\x83dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6108a0565b61001d5f356100fc565b806301ffc9a7146100f757806306fdde03146100f2578063081812fc146100ed578063095ea7b3146100e857806323b872dd146100e357806342842e0e146100de5780634cd88b76146100d95780636352211e146100d457806370a08231146100cf57806395d89b41146100ca578063a22cb465146100c5578063b88d4fde146100c0578063c87b56dd146100bb5763e985e9c50361000e5761086a565b610808565b6107db565b6106cc565b610647565b610612565b61059d565b610569565b610401565b6103d7565b610373565b6102e9565b610237565b610188565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61012981610114565b0361013057565b5f80fd5b9050359061014182610120565b565b9060208282031261015c57610159915f01610134565b90565b61010c565b151590565b61016f90610161565b9052565b9190610186905f60208501940190610166565b565b346101b8576101b46101a361019e366004610143565b61090b565b6101ab610102565b91829182610173565b0390f35b610108565b5f9103126101c757565b61010c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61020d61021660209361021b93610204816101cc565b938480936101d0565b958691016101d9565b6101e4565b0190565b6102349160208201915f8184039101526101ee565b90565b34610267576102473660046101bd565b610263610252610a98565b61025a610102565b9182918261021f565b0390f35b610108565b90565b6102788161026c565b0361027f57565b5f80fd5b905035906102908261026f565b565b906020828203126102ab576102a8915f01610283565b90565b61010c565b60018060a01b031690565b6102c4906102b0565b90565b6102d0906102bb565b9052565b91906102e7905f602085019401906102c7565b565b34610319576103156103046102ff366004610292565b610b17565b61030c610102565b918291826102d4565b0390f35b610108565b610327816102bb565b0361032e57565b5f80fd5b9050359061033f8261031e565b565b9190604083820312610369578061035d610366925f8601610332565b93602001610283565b90565b61010c565b5f0190565b610387610381366004610341565b90610c82565b61038f610102565b806103998161036e565b0390f35b90916060828403126103d2576103cf6103b8845f8501610332565b936103c68160208601610332565b93604001610283565b90565b61010c565b6103eb6103e536600461039d565b91610fa0565b6103f3610102565b806103fd8161036e565b0390f35b61041561040f36600461039d565b91611280565b61041d610102565b806104278161036e565b0390f35b5f80fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610451906101e4565b810190811067ffffffffffffffff82111761046b57604052565b610433565b9061048361047c610102565b9283610447565b565b67ffffffffffffffff81116104a35761049f6020916101e4565b0190565b610433565b90825f939282370152565b909291926104c86104c382610485565b610470565b938185526020850190828401116104e4576104e2926104a8565b565b61042f565b9080601f8301121561050757816020610504933591016104b3565b90565b61042b565b919091604081840312610564575f81013567ffffffffffffffff811161055f57836105389183016104e9565b92602082013567ffffffffffffffff811161055a5761055792016104e9565b90565b610110565b610110565b61010c565b346105985761058261057c36600461050c565b9061160d565b61058a610102565b806105948161036e565b0390f35b610108565b346105cd576105c96105b86105b3366004610292565b6116cd565b6105c0610102565b918291826102d4565b0390f35b610108565b906020828203126105eb576105e8915f01610332565b90565b61010c565b6105f99061026c565b9052565b9190610610905f602085019401906105f0565b565b346106425761063e61062d6106283660046105d2565b611793565b610635610102565b918291826105fd565b0390f35b610108565b34610677576106573660046101bd565b6106736106626117d7565b61066a610102565b9182918261021f565b0390f35b610108565b61068581610161565b0361068c57565b5f80fd5b9050359061069d8261067c565b565b91906040838203126106c757806106bb6106c4925f8601610332565b93602001610690565b90565b61010c565b346106fb576106e56106df36600461069f565b906117ed565b6106ed610102565b806106f78161036e565b0390f35b610108565b67ffffffffffffffff811161071e5761071a6020916101e4565b0190565b610433565b9092919261073861073382610700565b610470565b9381855260208501908284011161075457610752926104a8565b565b61042f565b9080601f830112156107775781602061077493359101610723565b90565b61042b565b906080828203126107d657610793815f8401610332565b926107a18260208501610332565b926107af8360408301610283565b92606082013567ffffffffffffffff81116107d1576107ce9201610759565b90565b610110565b61010c565b6107f26107e936600461077c565b929190916118d6565b6107fa610102565b806108048161036e565b0390f35b346108385761083461082361081e366004610292565b6119be565b61082b610102565b9182918261021f565b0390f35b610108565b91906040838203126108655780610859610862925f8601610332565b93602001610332565b90565b61010c565b3461089b5761089761088661088036600461083d565b906119ca565b61088e610102565b91829182610173565b0390f35b610108565b5f80fd5b5f90565b90565b60e01b90565b6108c56108c06108ca926108a8565b6108ab565b610114565b90565b90565b6108e46108df6108e9926108cd565b6108ab565b610114565b90565b90565b6109036108fe610908926108ec565b6108ab565b610114565b90565b6109136108a4565b508061092b6109256301ffc9a76108b1565b91610114565b14801561095e575b90811561093f575b5090565b9050610957610951635b5e139f6108ef565b91610114565b145f61093b565b50806109766109706380ac58cd6108d0565b91610114565b14610933565b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156109b5575b60208310146109b057565b610981565b91607f16916109a5565b60209181520190565b5f5260205f2090565b905f92918054906109eb6109e483610995565b80946109bf565b916001811690815f14610a425750600114610a06575b505050565b610a1391929394506109c8565b915f925b818410610a2a57505001905f8080610a01565b60018160209295939554848601520191019290610a17565b92949550505060ff19168252151560200201905f8080610a01565b90610a67916109d1565b90565b90610a8a610a8392610a7a610102565b93848092610a5d565b0383610447565b565b610a9590610a6a565b90565b610aa061097c565b50610aaa5f610a8c565b90565b5f90565b90565b610ac8610ac3610acd9261026c565b610ab1565b61026c565b90565b90610ada90610ab4565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b610b02610b0791610ae6565b610aeb565b90565b610b149054610af6565b90565b610b2e610b3391610b26610aad565b506004610ad0565b610b0a565b90565b610b4a610b45610b4f926102b0565b610ab1565b6102b0565b90565b610b5b90610b36565b90565b610b6790610b52565b90565b90610b7490610b5e565b5f5260205260405f2090565b90610b8a90610b5e565b5f5260205260405f2090565b60ff1690565b610ba8610bad91610ae6565b610b96565b90565b610bba9054610b9c565b90565b5f7f4e4f545f415554484f52495a4544000000000000000000000000000000000000910152565b610bf1600e6020926101d0565b610bfa81610bbd565b0190565b610c139060208101905f818303910152610be4565b90565b15610c1d57565b610c25610102565b62461bcd60e51b815280610c3b60048201610bfe565b0390fd5b5f1b90565b90610c5560018060a01b0391610c3f565b9181191691161790565b90565b90610c77610c72610c7e92610b5e565b610c5f565b8254610c44565b9055565b90610c97610c9260028390610ad0565b610b0a565b33610caa610ca4836102bb565b916102bb565b148015610d25575b610cbb90610c16565b610cd083610ccb60048590610ad0565b610c62565b91610d0d610d07610d017f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92595610b5e565b92610b5e565b92610ab4565b92610d16610102565b80610d208161036e565b0390a4565b50610cbb610d47610d42610d3b60058590610b6a565b3390610b80565b610bb0565b9050610cb2565b5f7f57524f4e475f46524f4d00000000000000000000000000000000000000000000910152565b610d82600a6020926101d0565b610d8b81610d4e565b0190565b610da49060208101905f818303910152610d75565b90565b15610dae57565b610db6610102565b62461bcd60e51b815280610dcc60048201610d8f565b0390fd5b90565b610de7610de2610dec92610dd0565b610ab1565b6102b0565b90565b610df890610dd3565b90565b5f7f494e56414c49445f524543495049454e54000000000000000000000000000000910152565b610e2f60116020926101d0565b610e3881610dfb565b0190565b610e519060208101905f818303910152610e22565b90565b15610e5b57565b610e63610102565b62461bcd60e51b815280610e7960048201610e3c565b0390fd5b90610e8790610b5e565b5f5260205260405f2090565b90565b610ea2610ea791610ae6565b610e93565b90565b610eb49054610e96565b90565b634e487b7160e01b5f52601160045260245ffd5b610ed49061026c565b5f8114610ee2576001900390565b610eb7565b90610ef35f1991610c3f565b9181191691161790565b90565b90610f15610f10610f1c92610ab4565b610efd565b8254610ee7565b9055565b610f299061026c565b5f198114610f375760010190565b610eb7565b1b90565b91906008610f60910291610f5a60018060a01b0384610f3c565b92610f3c565b9181191691161790565b9190610f80610f7b610f8893610b5e565b610c5f565b908354610f40565b9055565b610f9e91610f98610aad565b91610f6a565b565b919091610fd281610fcc610fc6610fc1610fbc60028890610ad0565b610b0a565b6102bb565b916102bb565b14610da7565b610ff783610ff0610fea610fe55f610def565b6102bb565b916102bb565b1415610e54565b3361100a611004836102bb565b916102bb565b14801561111f575b80156110ed575b61102290610c16565b61104861103160038390610e7d565b61104261103d82610eaa565b610ecb565b90610f00565b61106e61105760038590610e7d565b61106861106382610eaa565b610f20565b90610f00565b6110838361107e60028590610ad0565b610c62565b6110985f61109360048590610ad0565b610f8c565b916110d56110cf6110c97fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95610b5e565b92610b5e565b92610ab4565b926110de610102565b806110e88161036e565b0390a4565b506110223361111761111161110c61110760048890610ad0565b610b0a565b6102bb565b916102bb565b149050611019565b5061113e61113961113260058490610b6a565b3390610b80565b610bb0565b611012565b61114c90610b36565b90565b61115890611143565b90565b61116490610b52565b90565b9050519061117482610120565b565b9060208282031261118f5761118c915f01611167565b90565b61010c565b60209181520190565b6111a85f8092611194565b0190565b90916111eb936111d46111de926111ca60808601965f8701906102c7565b60208501906102c7565b60408301906105f0565b606081830391015261119d565b90565b6111f6610102565b3d5f823e3d90fd5b5f7f554e534146455f524543495049454e5400000000000000000000000000000000910152565b61123260106020926101d0565b61123b816111fe565b0190565b6112549060208101905f818303910152611225565b90565b1561125e57565b611266610102565b62461bcd60e51b81528061127c6004820161123f565b0390fd5b61128c81838591610fa0565b61129e61129883611a0e565b15610161565b9182156112b4575b50506112b29150611257565b565b602092506112c46112c99161114f565b61115b565b6112ec5f63150b7a026112f73395976112e0610102565b988997889687956108ab565b8552600485016111ac565b03925af1801561135c576112b2915f9161132e575b50611326611320630a85bd0160e11b610114565b91610114565b145f806112a6565b61134f915060203d8111611355575b6113478183610447565b810190611176565b5f61130c565b503d61133d565b6111ee565b5f7f414c52454144595f494e495449414c495a454400000000000000000000000000910152565b61139560136020926101d0565b61139e81611361565b0190565b6113b79060208101905f818303910152611388565b90565b156113c157565b6113c9610102565b62461bcd60e51b8152806113df600482016113a2565b0390fd5b601f602091010490565b919060086114089102916114025f1984610f3c565b92610f3c565b9181191691161790565b919061142861142361143093610ab4565b610efd565b9083546113ed565b9055565b5f90565b61144a91611444611434565b91611412565b565b5b818110611458575050565b806114655f600193611438565b0161144d565b9190601f811161147b575b505050565b6114876114ac936109c8565b906020611493846113e3565b830193106114b4575b6114a5906113e3565b019061144c565b5f8080611476565b91506114a58192905061149c565b1c90565b906114d6905f19906008026114c2565b191690565b816114e5916114c6565b906002021790565b906114f7816101cc565b9067ffffffffffffffff82116115b75761151b826115158554610995565b8561146b565b602090601f831160011461154f5791809161153e935f92611543575b50506114db565b90555b565b90915001515f80611537565b601f1983169161155e856109c8565b925f5b81811061159f57509160029391856001969410611585575b50505002019055611541565b611595910151601f8416906114c6565b90555f8080611579565b91936020600181928787015181550195019201611561565b610433565b906115c6916114ed565b565b906115d460ff91610c3f565b9181191691161790565b6115e790610161565b90565b90565b906116026115fd611609926115de565b6115ea565b82546115c8565b9055565b9061163661163d9261163061162b6116256006610bb0565b15610161565b6113ba565b5f6115bc565b60016115bc565b611649600160066115ed565b565b5f7f4e4f545f4d494e54454400000000000000000000000000000000000000000000910152565b61167f600a6020926101d0565b6116888161164b565b0190565b6116a19060208101905f818303910152611672565b90565b156116ab57565b6116b3610102565b62461bcd60e51b8152806116c96004820161168c565b0390fd5b6116e46116e9916116dc610aad565b506002610ad0565b610b0a565b9061170f826117086117026116fd5f610def565b6102bb565b916102bb565b14156116a4565b565b5f7f5a45524f5f414444524553530000000000000000000000000000000000000000910152565b611745600c6020926101d0565b61174e81611711565b0190565b6117679060208101905f818303910152611738565b90565b1561177157565b611779610102565b62461bcd60e51b81528061178f60048201611752565b0390fd5b6117cf6117d4916117a2611434565b506117c8816117c16117bb6117b65f610def565b6102bb565b916102bb565b141561176a565b6003610e7d565b610eaa565b90565b6117df61097c565b506117ea6001610a8c565b90565b9061180d8161180861180160053390610b6a565b8590610b80565b6115ed565b339190916118596118476118417f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3193610b5e565b93610b5e565b93611850610102565b91829182610173565b0390a3565b5190565b61188161188a60209361188f936118788161185e565b93848093611194565b958691016101d9565b6101e4565b0190565b90926118c6906118bc6118d396946118b260808601975f8701906102c7565b60208501906102c7565b60408301906105f0565b6060818403910152611862565b90565b9091926118e582848691610fa0565b6118f76118f184611a0e565b15610161565b92831561190e575b50505061190c9150611257565b565b602093505f6119276119226119489361114f565b61115b565b9261195363150b7a029133969861193c610102565b998a98899788966108ab565b865260048601611893565b03925af180156119b95761190c915f9161198b575b5061198261197c630a85bd0160e11b610114565b91610114565b145f80806118ff565b6119ac915060203d81116119b2575b6119a48183610447565b810190611176565b5f611968565b503d61199a565b6111ee565b506119c761097c565b90565b6119ef916119e56119ea926119dd6108a4565b506005610b6a565b610b80565b610bb0565b90565b611a06611a01611a0b92610dd0565b610ab1565b61026c565b90565b611a166108a4565b50611a1f611434565b503b611a33611a2d5f6119f2565b9161026c565b119056fea2646970667358221220a66f0a3c020528ed21431cdacecce6755bd693ad47681561d84a0d20b601818364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\xA0V[a\0\x1D_5a\0\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\0\xF7W\x80c\x06\xFD\xDE\x03\x14a\0\xF2W\x80c\x08\x18\x12\xFC\x14a\0\xEDW\x80c\t^\xA7\xB3\x14a\0\xE8W\x80c#\xB8r\xDD\x14a\0\xE3W\x80cB\x84.\x0E\x14a\0\xDEW\x80cL\xD8\x8Bv\x14a\0\xD9W\x80ccR!\x1E\x14a\0\xD4W\x80cp\xA0\x821\x14a\0\xCFW\x80c\x95\xD8\x9BA\x14a\0\xCAW\x80c\xA2,\xB4e\x14a\0\xC5W\x80c\xB8\x8DO\xDE\x14a\0\xC0W\x80c\xC8{V\xDD\x14a\0\xBBWc\xE9\x85\xE9\xC5\x03a\0\x0EWa\x08jV[a\x08\x08V[a\x07\xDBV[a\x06\xCCV[a\x06GV[a\x06\x12V[a\x05\x9DV[a\x05iV[a\x04\x01V[a\x03\xD7V[a\x03sV[a\x02\xE9V[a\x027V[a\x01\x88V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01)\x81a\x01\x14V[\x03a\x010WV[_\x80\xFD[\x90P5\x90a\x01A\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x01\\Wa\x01Y\x91_\x01a\x014V[\x90V[a\x01\x0CV[\x15\x15\x90V[a\x01o\x90a\x01aV[\x90RV[\x91\x90a\x01\x86\x90_` \x85\x01\x94\x01\x90a\x01fV[V[4a\x01\xB8Wa\x01\xB4a\x01\xA3a\x01\x9E6`\x04a\x01CV[a\t\x0BV[a\x01\xABa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x91\x03\x12a\x01\xC7WV[a\x01\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\ra\x02\x16` \x93a\x02\x1B\x93a\x02\x04\x81a\x01\xCCV[\x93\x84\x80\x93a\x01\xD0V[\x95\x86\x91\x01a\x01\xD9V[a\x01\xE4V[\x01\x90V[a\x024\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\xEEV[\x90V[4a\x02gWa\x02G6`\x04a\x01\xBDV[a\x02ca\x02Ra\n\x98V[a\x02Za\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[\x90V[a\x02x\x81a\x02lV[\x03a\x02\x7FWV[_\x80\xFD[\x90P5\x90a\x02\x90\x82a\x02oV[V[\x90` \x82\x82\x03\x12a\x02\xABWa\x02\xA8\x91_\x01a\x02\x83V[\x90V[a\x01\x0CV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\xC4\x90a\x02\xB0V[\x90V[a\x02\xD0\x90a\x02\xBBV[\x90RV[\x91\x90a\x02\xE7\x90_` \x85\x01\x94\x01\x90a\x02\xC7V[V[4a\x03\x19Wa\x03\x15a\x03\x04a\x02\xFF6`\x04a\x02\x92V[a\x0B\x17V[a\x03\x0Ca\x01\x02V[\x91\x82\x91\x82a\x02\xD4V[\x03\x90\xF3[a\x01\x08V[a\x03'\x81a\x02\xBBV[\x03a\x03.WV[_\x80\xFD[\x90P5\x90a\x03?\x82a\x03\x1EV[V[\x91\x90`@\x83\x82\x03\x12a\x03iW\x80a\x03]a\x03f\x92_\x86\x01a\x032V[\x93` \x01a\x02\x83V[\x90V[a\x01\x0CV[_\x01\x90V[a\x03\x87a\x03\x816`\x04a\x03AV[\x90a\x0C\x82V[a\x03\x8Fa\x01\x02V[\x80a\x03\x99\x81a\x03nV[\x03\x90\xF3[\x90\x91``\x82\x84\x03\x12a\x03\xD2Wa\x03\xCFa\x03\xB8\x84_\x85\x01a\x032V[\x93a\x03\xC6\x81` \x86\x01a\x032V[\x93`@\x01a\x02\x83V[\x90V[a\x01\x0CV[a\x03\xEBa\x03\xE56`\x04a\x03\x9DV[\x91a\x0F\xA0V[a\x03\xF3a\x01\x02V[\x80a\x03\xFD\x81a\x03nV[\x03\x90\xF3[a\x04\x15a\x04\x0F6`\x04a\x03\x9DV[\x91a\x12\x80V[a\x04\x1Da\x01\x02V[\x80a\x04'\x81a\x03nV[\x03\x90\xF3[_\x80\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04Q\x90a\x01\xE4V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04kW`@RV[a\x043V[\x90a\x04\x83a\x04|a\x01\x02V[\x92\x83a\x04GV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04\xA3Wa\x04\x9F` \x91a\x01\xE4V[\x01\x90V[a\x043V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x04\xC8a\x04\xC3\x82a\x04\x85V[a\x04pV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x04\xE4Wa\x04\xE2\x92a\x04\xA8V[V[a\x04/V[\x90\x80`\x1F\x83\x01\x12\x15a\x05\x07W\x81` a\x05\x04\x935\x91\x01a\x04\xB3V[\x90V[a\x04+V[\x91\x90\x91`@\x81\x84\x03\x12a\x05dW_\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05_W\x83a\x058\x91\x83\x01a\x04\xE9V[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05ZWa\x05W\x92\x01a\x04\xE9V[\x90V[a\x01\x10V[a\x01\x10V[a\x01\x0CV[4a\x05\x98Wa\x05\x82a\x05|6`\x04a\x05\x0CV[\x90a\x16\rV[a\x05\x8Aa\x01\x02V[\x80a\x05\x94\x81a\x03nV[\x03\x90\xF3[a\x01\x08V[4a\x05\xCDWa\x05\xC9a\x05\xB8a\x05\xB36`\x04a\x02\x92V[a\x16\xCDV[a\x05\xC0a\x01\x02V[\x91\x82\x91\x82a\x02\xD4V[\x03\x90\xF3[a\x01\x08V[\x90` \x82\x82\x03\x12a\x05\xEBWa\x05\xE8\x91_\x01a\x032V[\x90V[a\x01\x0CV[a\x05\xF9\x90a\x02lV[\x90RV[\x91\x90a\x06\x10\x90_` \x85\x01\x94\x01\x90a\x05\xF0V[V[4a\x06BWa\x06>a\x06-a\x06(6`\x04a\x05\xD2V[a\x17\x93V[a\x065a\x01\x02V[\x91\x82\x91\x82a\x05\xFDV[\x03\x90\xF3[a\x01\x08V[4a\x06wWa\x06W6`\x04a\x01\xBDV[a\x06sa\x06ba\x17\xD7V[a\x06ja\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[a\x06\x85\x81a\x01aV[\x03a\x06\x8CWV[_\x80\xFD[\x90P5\x90a\x06\x9D\x82a\x06|V[V[\x91\x90`@\x83\x82\x03\x12a\x06\xC7W\x80a\x06\xBBa\x06\xC4\x92_\x86\x01a\x032V[\x93` \x01a\x06\x90V[\x90V[a\x01\x0CV[4a\x06\xFBWa\x06\xE5a\x06\xDF6`\x04a\x06\x9FV[\x90a\x17\xEDV[a\x06\xEDa\x01\x02V[\x80a\x06\xF7\x81a\x03nV[\x03\x90\xF3[a\x01\x08V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x1EWa\x07\x1A` \x91a\x01\xE4V[\x01\x90V[a\x043V[\x90\x92\x91\x92a\x078a\x073\x82a\x07\0V[a\x04pV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x07TWa\x07R\x92a\x04\xA8V[V[a\x04/V[\x90\x80`\x1F\x83\x01\x12\x15a\x07wW\x81` a\x07t\x935\x91\x01a\x07#V[\x90V[a\x04+V[\x90`\x80\x82\x82\x03\x12a\x07\xD6Wa\x07\x93\x81_\x84\x01a\x032V[\x92a\x07\xA1\x82` \x85\x01a\x032V[\x92a\x07\xAF\x83`@\x83\x01a\x02\x83V[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xD1Wa\x07\xCE\x92\x01a\x07YV[\x90V[a\x01\x10V[a\x01\x0CV[a\x07\xF2a\x07\xE96`\x04a\x07|V[\x92\x91\x90\x91a\x18\xD6V[a\x07\xFAa\x01\x02V[\x80a\x08\x04\x81a\x03nV[\x03\x90\xF3[4a\x088Wa\x084a\x08#a\x08\x1E6`\x04a\x02\x92V[a\x19\xBEV[a\x08+a\x01\x02V[\x91\x82\x91\x82a\x02\x1FV[\x03\x90\xF3[a\x01\x08V[\x91\x90`@\x83\x82\x03\x12a\x08eW\x80a\x08Ya\x08b\x92_\x86\x01a\x032V[\x93` \x01a\x032V[\x90V[a\x01\x0CV[4a\x08\x9BWa\x08\x97a\x08\x86a\x08\x806`\x04a\x08=V[\x90a\x19\xCAV[a\x08\x8Ea\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xF3[a\x01\x08V[_\x80\xFD[_\x90V[\x90V[`\xE0\x1B\x90V[a\x08\xC5a\x08\xC0a\x08\xCA\x92a\x08\xA8V[a\x08\xABV[a\x01\x14V[\x90V[\x90V[a\x08\xE4a\x08\xDFa\x08\xE9\x92a\x08\xCDV[a\x08\xABV[a\x01\x14V[\x90V[\x90V[a\t\x03a\x08\xFEa\t\x08\x92a\x08\xECV[a\x08\xABV[a\x01\x14V[\x90V[a\t\x13a\x08\xA4V[P\x80a\t+a\t%c\x01\xFF\xC9\xA7a\x08\xB1V[\x91a\x01\x14V[\x14\x80\x15a\t^W[\x90\x81\x15a\t?W[P\x90V[\x90Pa\tWa\tQc[^\x13\x9Fa\x08\xEFV[\x91a\x01\x14V[\x14_a\t;V[P\x80a\tva\tpc\x80\xACX\xCDa\x08\xD0V[\x91a\x01\x14V[\x14a\t3V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\t\xB5W[` \x83\x10\x14a\t\xB0WV[a\t\x81V[\x91`\x7F\x16\x91a\t\xA5V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\t\xEBa\t\xE4\x83a\t\x95V[\x80\x94a\t\xBFV[\x91`\x01\x81\x16\x90\x81_\x14a\nBWP`\x01\x14a\n\x06W[PPPV[a\n\x13\x91\x92\x93\x94Pa\t\xC8V[\x91_\x92[\x81\x84\x10a\n*WPP\x01\x90_\x80\x80a\n\x01V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\x17V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\n\x01V[\x90a\ng\x91a\t\xD1V[\x90V[\x90a\n\x8Aa\n\x83\x92a\nza\x01\x02V[\x93\x84\x80\x92a\n]V[\x03\x83a\x04GV[V[a\n\x95\x90a\njV[\x90V[a\n\xA0a\t|V[Pa\n\xAA_a\n\x8CV[\x90V[_\x90V[\x90V[a\n\xC8a\n\xC3a\n\xCD\x92a\x02lV[a\n\xB1V[a\x02lV[\x90V[\x90a\n\xDA\x90a\n\xB4V[_R` R`@_ \x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0B\x02a\x0B\x07\x91a\n\xE6V[a\n\xEBV[\x90V[a\x0B\x14\x90Ta\n\xF6V[\x90V[a\x0B.a\x0B3\x91a\x0B&a\n\xADV[P`\x04a\n\xD0V[a\x0B\nV[\x90V[a\x0BJa\x0BEa\x0BO\x92a\x02\xB0V[a\n\xB1V[a\x02\xB0V[\x90V[a\x0B[\x90a\x0B6V[\x90V[a\x0Bg\x90a\x0BRV[\x90V[\x90a\x0Bt\x90a\x0B^V[_R` R`@_ \x90V[\x90a\x0B\x8A\x90a\x0B^V[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0B\xA8a\x0B\xAD\x91a\n\xE6V[a\x0B\x96V[\x90V[a\x0B\xBA\x90Ta\x0B\x9CV[\x90V[_\x7FNOT_AUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xF1`\x0E` \x92a\x01\xD0V[a\x0B\xFA\x81a\x0B\xBDV[\x01\x90V[a\x0C\x13\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xE4V[\x90V[\x15a\x0C\x1DWV[a\x0C%a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C;`\x04\x82\x01a\x0B\xFEV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0CU`\x01\x80`\xA0\x1B\x03\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0Cwa\x0Cra\x0C~\x92a\x0B^V[a\x0C_V[\x82Ta\x0CDV[\x90UV[\x90a\x0C\x97a\x0C\x92`\x02\x83\x90a\n\xD0V[a\x0B\nV[3a\x0C\xAAa\x0C\xA4\x83a\x02\xBBV[\x91a\x02\xBBV[\x14\x80\x15a\r%W[a\x0C\xBB\x90a\x0C\x16V[a\x0C\xD0\x83a\x0C\xCB`\x04\x85\x90a\n\xD0V[a\x0CbV[\x91a\r\ra\r\x07a\r\x01\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x95a\x0B^V[\x92a\x0B^V[\x92a\n\xB4V[\x92a\r\x16a\x01\x02V[\x80a\r \x81a\x03nV[\x03\x90\xA4V[Pa\x0C\xBBa\rGa\rBa\r;`\x05\x85\x90a\x0BjV[3\x90a\x0B\x80V[a\x0B\xB0V[\x90Pa\x0C\xB2V[_\x7FWRONG_FROM\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\x82`\n` \x92a\x01\xD0V[a\r\x8B\x81a\rNV[\x01\x90V[a\r\xA4\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\ruV[\x90V[\x15a\r\xAEWV[a\r\xB6a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xCC`\x04\x82\x01a\r\x8FV[\x03\x90\xFD[\x90V[a\r\xE7a\r\xE2a\r\xEC\x92a\r\xD0V[a\n\xB1V[a\x02\xB0V[\x90V[a\r\xF8\x90a\r\xD3V[\x90V[_\x7FINVALID_RECIPIENT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E/`\x11` \x92a\x01\xD0V[a\x0E8\x81a\r\xFBV[\x01\x90V[a\x0EQ\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\"V[\x90V[\x15a\x0E[WV[a\x0Eca\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Ey`\x04\x82\x01a\x0E<V[\x03\x90\xFD[\x90a\x0E\x87\x90a\x0B^V[_R` R`@_ \x90V[\x90V[a\x0E\xA2a\x0E\xA7\x91a\n\xE6V[a\x0E\x93V[\x90V[a\x0E\xB4\x90Ta\x0E\x96V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E\xD4\x90a\x02lV[_\x81\x14a\x0E\xE2W`\x01\x90\x03\x90V[a\x0E\xB7V[\x90a\x0E\xF3_\x19\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0F\x15a\x0F\x10a\x0F\x1C\x92a\n\xB4V[a\x0E\xFDV[\x82Ta\x0E\xE7V[\x90UV[a\x0F)\x90a\x02lV[_\x19\x81\x14a\x0F7W`\x01\x01\x90V[a\x0E\xB7V[\x1B\x90V[\x91\x90`\x08a\x0F`\x91\x02\x91a\x0FZ`\x01\x80`\xA0\x1B\x03\x84a\x0F<V[\x92a\x0F<V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0F\x80a\x0F{a\x0F\x88\x93a\x0B^V[a\x0C_V[\x90\x83Ta\x0F@V[\x90UV[a\x0F\x9E\x91a\x0F\x98a\n\xADV[\x91a\x0FjV[V[\x91\x90\x91a\x0F\xD2\x81a\x0F\xCCa\x0F\xC6a\x0F\xC1a\x0F\xBC`\x02\x88\x90a\n\xD0V[a\x0B\nV[a\x02\xBBV[\x91a\x02\xBBV[\x14a\r\xA7V[a\x0F\xF7\x83a\x0F\xF0a\x0F\xEAa\x0F\xE5_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x0ETV[3a\x10\na\x10\x04\x83a\x02\xBBV[\x91a\x02\xBBV[\x14\x80\x15a\x11\x1FW[\x80\x15a\x10\xEDW[a\x10\"\x90a\x0C\x16V[a\x10Ha\x101`\x03\x83\x90a\x0E}V[a\x10Ba\x10=\x82a\x0E\xAAV[a\x0E\xCBV[\x90a\x0F\0V[a\x10na\x10W`\x03\x85\x90a\x0E}V[a\x10ha\x10c\x82a\x0E\xAAV[a\x0F V[\x90a\x0F\0V[a\x10\x83\x83a\x10~`\x02\x85\x90a\n\xD0V[a\x0CbV[a\x10\x98_a\x10\x93`\x04\x85\x90a\n\xD0V[a\x0F\x8CV[\x91a\x10\xD5a\x10\xCFa\x10\xC9\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x95a\x0B^V[\x92a\x0B^V[\x92a\n\xB4V[\x92a\x10\xDEa\x01\x02V[\x80a\x10\xE8\x81a\x03nV[\x03\x90\xA4V[Pa\x10\"3a\x11\x17a\x11\x11a\x11\x0Ca\x11\x07`\x04\x88\x90a\n\xD0V[a\x0B\nV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x90Pa\x10\x19V[Pa\x11>a\x119a\x112`\x05\x84\x90a\x0BjV[3\x90a\x0B\x80V[a\x0B\xB0V[a\x10\x12V[a\x11L\x90a\x0B6V[\x90V[a\x11X\x90a\x11CV[\x90V[a\x11d\x90a\x0BRV[\x90V[\x90PQ\x90a\x11t\x82a\x01 V[V[\x90` \x82\x82\x03\x12a\x11\x8FWa\x11\x8C\x91_\x01a\x11gV[\x90V[a\x01\x0CV[` \x91\x81R\x01\x90V[a\x11\xA8_\x80\x92a\x11\x94V[\x01\x90V[\x90\x91a\x11\xEB\x93a\x11\xD4a\x11\xDE\x92a\x11\xCA`\x80\x86\x01\x96_\x87\x01\x90a\x02\xC7V[` \x85\x01\x90a\x02\xC7V[`@\x83\x01\x90a\x05\xF0V[``\x81\x83\x03\x91\x01Ra\x11\x9DV[\x90V[a\x11\xF6a\x01\x02V[=_\x82>=\x90\xFD[_\x7FUNSAFE_RECIPIENT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x122`\x10` \x92a\x01\xD0V[a\x12;\x81a\x11\xFEV[\x01\x90V[a\x12T\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12%V[\x90V[\x15a\x12^WV[a\x12fa\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12|`\x04\x82\x01a\x12?V[\x03\x90\xFD[a\x12\x8C\x81\x83\x85\x91a\x0F\xA0V[a\x12\x9Ea\x12\x98\x83a\x1A\x0EV[\x15a\x01aV[\x91\x82\x15a\x12\xB4W[PPa\x12\xB2\x91Pa\x12WV[V[` \x92Pa\x12\xC4a\x12\xC9\x91a\x11OV[a\x11[V[a\x12\xEC_c\x15\x0Bz\x02a\x12\xF73\x95\x97a\x12\xE0a\x01\x02V[\x98\x89\x97\x88\x96\x87\x95a\x08\xABV[\x85R`\x04\x85\x01a\x11\xACV[\x03\x92Z\xF1\x80\x15a\x13\\Wa\x12\xB2\x91_\x91a\x13.W[Pa\x13&a\x13 c\n\x85\xBD\x01`\xE1\x1Ba\x01\x14V[\x91a\x01\x14V[\x14_\x80a\x12\xA6V[a\x13O\x91P` =\x81\x11a\x13UW[a\x13G\x81\x83a\x04GV[\x81\x01\x90a\x11vV[_a\x13\x0CV[P=a\x13=V[a\x11\xEEV[_\x7FALREADY_INITIALIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\x95`\x13` \x92a\x01\xD0V[a\x13\x9E\x81a\x13aV[\x01\x90V[a\x13\xB7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x13\x88V[\x90V[\x15a\x13\xC1WV[a\x13\xC9a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13\xDF`\x04\x82\x01a\x13\xA2V[\x03\x90\xFD[`\x1F` \x91\x01\x04\x90V[\x91\x90`\x08a\x14\x08\x91\x02\x91a\x14\x02_\x19\x84a\x0F<V[\x92a\x0F<V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x14(a\x14#a\x140\x93a\n\xB4V[a\x0E\xFDV[\x90\x83Ta\x13\xEDV[\x90UV[_\x90V[a\x14J\x91a\x14Da\x144V[\x91a\x14\x12V[V[[\x81\x81\x10a\x14XWPPV[\x80a\x14e_`\x01\x93a\x148V[\x01a\x14MV[\x91\x90`\x1F\x81\x11a\x14{W[PPPV[a\x14\x87a\x14\xAC\x93a\t\xC8V[\x90` a\x14\x93\x84a\x13\xE3V[\x83\x01\x93\x10a\x14\xB4W[a\x14\xA5\x90a\x13\xE3V[\x01\x90a\x14LV[_\x80\x80a\x14vV[\x91Pa\x14\xA5\x81\x92\x90Pa\x14\x9CV[\x1C\x90V[\x90a\x14\xD6\x90_\x19\x90`\x08\x02a\x14\xC2V[\x19\x16\x90V[\x81a\x14\xE5\x91a\x14\xC6V[\x90`\x02\x02\x17\x90V[\x90a\x14\xF7\x81a\x01\xCCV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x15\xB7Wa\x15\x1B\x82a\x15\x15\x85Ta\t\x95V[\x85a\x14kV[` \x90`\x1F\x83\x11`\x01\x14a\x15OW\x91\x80\x91a\x15>\x93_\x92a\x15CW[PPa\x14\xDBV[\x90U[V[\x90\x91P\x01Q_\x80a\x157V[`\x1F\x19\x83\x16\x91a\x15^\x85a\t\xC8V[\x92_[\x81\x81\x10a\x15\x9FWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x15\x85W[PPP\x02\x01\x90Ua\x15AV[a\x15\x95\x91\x01Q`\x1F\x84\x16\x90a\x14\xC6V[\x90U_\x80\x80a\x15yV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x15aV[a\x043V[\x90a\x15\xC6\x91a\x14\xEDV[V[\x90a\x15\xD4`\xFF\x91a\x0C?V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xE7\x90a\x01aV[\x90V[\x90V[\x90a\x16\x02a\x15\xFDa\x16\t\x92a\x15\xDEV[a\x15\xEAV[\x82Ta\x15\xC8V[\x90UV[\x90a\x166a\x16=\x92a\x160a\x16+a\x16%`\x06a\x0B\xB0V[\x15a\x01aV[a\x13\xBAV[_a\x15\xBCV[`\x01a\x15\xBCV[a\x16I`\x01`\x06a\x15\xEDV[V[_\x7FNOT_MINTED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x16\x7F`\n` \x92a\x01\xD0V[a\x16\x88\x81a\x16KV[\x01\x90V[a\x16\xA1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16rV[\x90V[\x15a\x16\xABWV[a\x16\xB3a\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x16\xC9`\x04\x82\x01a\x16\x8CV[\x03\x90\xFD[a\x16\xE4a\x16\xE9\x91a\x16\xDCa\n\xADV[P`\x02a\n\xD0V[a\x0B\nV[\x90a\x17\x0F\x82a\x17\x08a\x17\x02a\x16\xFD_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x16\xA4V[V[_\x7FZERO_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x17E`\x0C` \x92a\x01\xD0V[a\x17N\x81a\x17\x11V[\x01\x90V[a\x17g\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x178V[\x90V[\x15a\x17qWV[a\x17ya\x01\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x8F`\x04\x82\x01a\x17RV[\x03\x90\xFD[a\x17\xCFa\x17\xD4\x91a\x17\xA2a\x144V[Pa\x17\xC8\x81a\x17\xC1a\x17\xBBa\x17\xB6_a\r\xEFV[a\x02\xBBV[\x91a\x02\xBBV[\x14\x15a\x17jV[`\x03a\x0E}V[a\x0E\xAAV[\x90V[a\x17\xDFa\t|V[Pa\x17\xEA`\x01a\n\x8CV[\x90V[\x90a\x18\r\x81a\x18\x08a\x18\x01`\x053\x90a\x0BjV[\x85\x90a\x0B\x80V[a\x15\xEDV[3\x91\x90\x91a\x18Ya\x18Ga\x18A\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x93a\x0B^V[\x93a\x0B^V[\x93a\x18Pa\x01\x02V[\x91\x82\x91\x82a\x01sV[\x03\x90\xA3V[Q\x90V[a\x18\x81a\x18\x8A` \x93a\x18\x8F\x93a\x18x\x81a\x18^V[\x93\x84\x80\x93a\x11\x94V[\x95\x86\x91\x01a\x01\xD9V[a\x01\xE4V[\x01\x90V[\x90\x92a\x18\xC6\x90a\x18\xBCa\x18\xD3\x96\x94a\x18\xB2`\x80\x86\x01\x97_\x87\x01\x90a\x02\xC7V[` \x85\x01\x90a\x02\xC7V[`@\x83\x01\x90a\x05\xF0V[``\x81\x84\x03\x91\x01Ra\x18bV[\x90V[\x90\x91\x92a\x18\xE5\x82\x84\x86\x91a\x0F\xA0V[a\x18\xF7a\x18\xF1\x84a\x1A\x0EV[\x15a\x01aV[\x92\x83\x15a\x19\x0EW[PPPa\x19\x0C\x91Pa\x12WV[V[` \x93P_a\x19'a\x19\"a\x19H\x93a\x11OV[a\x11[V[\x92a\x19Sc\x15\x0Bz\x02\x913\x96\x98a\x19<a\x01\x02V[\x99\x8A\x98\x89\x97\x88\x96a\x08\xABV[\x86R`\x04\x86\x01a\x18\x93V[\x03\x92Z\xF1\x80\x15a\x19\xB9Wa\x19\x0C\x91_\x91a\x19\x8BW[Pa\x19\x82a\x19|c\n\x85\xBD\x01`\xE1\x1Ba\x01\x14V[\x91a\x01\x14V[\x14_\x80\x80a\x18\xFFV[a\x19\xAC\x91P` =\x81\x11a\x19\xB2W[a\x19\xA4\x81\x83a\x04GV[\x81\x01\x90a\x11vV[_a\x19hV[P=a\x19\x9AV[a\x11\xEEV[Pa\x19\xC7a\t|V[\x90V[a\x19\xEF\x91a\x19\xE5a\x19\xEA\x92a\x19\xDDa\x08\xA4V[P`\x05a\x0BjV[a\x0B\x80V[a\x0B\xB0V[\x90V[a\x1A\x06a\x1A\x01a\x1A\x0B\x92a\r\xD0V[a\n\xB1V[a\x02lV[\x90V[a\x1A\x16a\x08\xA4V[Pa\x1A\x1Fa\x144V[P;a\x1A3a\x1A-_a\x19\xF2V[\x91a\x02lV[\x11\x90V\xFE\xA2dipfsX\"\x12 \xA6o\n<\x02\x05(\xED!C\x1C\xDA\xCE\xCC\xE6u[\xD6\x93\xADGh\x15a\xD8J\r \xB6\x01\x81\x83dsolcC\0\x08\x1A\x003",
    );
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _approved: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _owner: topics.1,
                    _approved: topics.2,
                    _tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._owner.clone(),
                    self._approved.clone(),
                    self._tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._approved,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApprovalForAll(address,address,bool)` and selector `0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31`.
```solidity
event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct ApprovalForAll {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _approved: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApprovalForAll {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApprovalForAll(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _owner: topics.1,
                    _operator: topics.2,
                    _approved: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._approved,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._owner.clone(),
                    self._operator.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApprovalForAll {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApprovalForAll> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApprovalForAll) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub _from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _from: topics.1,
                    _to: topics.2,
                    _tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._from.clone(),
                    self._to.clone(),
                    self._tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._to,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 id) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveCall {
        pub spender: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        id: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub owner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApproved(uint256)` and selector `0x081812fc`.
```solidity
function getApproved(uint256 id) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getApprovedCall {
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApproved(uint256)`](getApprovedCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getApprovedReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedCall> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedCall) -> Self {
                    (value.id,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApprovedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApprovedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApproved(uint256)";
            const SELECTOR: [u8; 4] = [8u8, 24u8, 18u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(string,string)` and selector `0x4cd88b76`.
```solidity
function initialize(string memory name_, string memory symbol_) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeCall {
        pub name_: alloy::sol_types::private::String,
        pub symbol_: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`initialize(string,string)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.name_, value.symbol_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name_: tuple.0,
                        symbol_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(string,string)";
            const SELECTOR: [u8; 4] = [76u8, 216u8, 139u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name_,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.symbol_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isApprovedForAll(address,address)` and selector `0xe985e9c5`.
```solidity
function isApprovedForAll(address owner, address operator) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isApprovedForAllCall {
        pub owner: alloy::sol_types::private::Address,
        pub operator: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isApprovedForAll(address,address)`](isApprovedForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct isApprovedForAllReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllCall) -> Self {
                    (value.owner, value.operator)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        operator: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isApprovedForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isApprovedForAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isApprovedForAll(address,address)";
            const SELECTOR: [u8; 4] = [233u8, 133u8, 233u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ownerOf(uint256)` and selector `0x6352211e`.
```solidity
function ownerOf(uint256 id) external view returns (address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerOfCall {
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ownerOf(uint256)`](ownerOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerOfReturn {
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfCall) -> Self {
                    (value.id,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfReturn) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerOf(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 82u8, 33u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256)` and selector `0x42842e0e`.
```solidity
function safeTransferFrom(address from, address to, uint256 id) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Call {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256)`](safeTransferFrom_0Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Call) -> Self {
                    (value.from, value.to, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        id: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [66u8, 132u8, 46u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256,bytes)` and selector `0xb88d4fde`.
```solidity
function safeTransferFrom(address from, address to, uint256 id, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Call {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256,bytes)`](safeTransferFrom_1Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Return {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Call) -> Self {
                    (value.from, value.to, value.id, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        id: tuple.2,
                        data: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [184u8, 141u8, 79u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setApprovalForAll(address,bool)` and selector `0xa22cb465`.
```solidity
function setApprovalForAll(address operator, bool approved) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setApprovalForAllCall {
        pub operator: alloy::sol_types::private::Address,
        pub approved: bool,
    }
    ///Container type for the return parameters of the [`setApprovalForAll(address,bool)`](setApprovalForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setApprovalForAllReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllCall) -> Self {
                    (value.operator, value.approved)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        operator: tuple.0,
                        approved: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setApprovalForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setApprovalForAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setApprovalForAll(address,bool)";
            const SELECTOR: [u8; 4] = [162u8, 44u8, 180u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenURI(uint256)` and selector `0xc87b56dd`.
```solidity
function tokenURI(uint256 id) external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tokenURICall {
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`tokenURI(uint256)`](tokenURICall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tokenURIReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURICall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURICall) -> Self {
                    (value.id,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { id: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURIReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenURICall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenURI(uint256)";
            const SELECTOR: [u8; 4] = [200u8, 123u8, 86u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 id) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        id: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockERC721`](self) function calls.
    pub enum MockERC721Calls {
        approve(approveCall),
        balanceOf(balanceOfCall),
        getApproved(getApprovedCall),
        initialize(initializeCall),
        isApprovedForAll(isApprovedForAllCall),
        name(nameCall),
        ownerOf(ownerOfCall),
        safeTransferFrom_0(safeTransferFrom_0Call),
        safeTransferFrom_1(safeTransferFrom_1Call),
        setApprovalForAll(setApprovalForAllCall),
        supportsInterface(supportsInterfaceCall),
        symbol(symbolCall),
        tokenURI(tokenURICall),
        transferFrom(transferFromCall),
    }
    #[automatically_derived]
    impl MockERC721Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [6u8, 253u8, 222u8, 3u8],
            [8u8, 24u8, 18u8, 252u8],
            [9u8, 94u8, 167u8, 179u8],
            [35u8, 184u8, 114u8, 221u8],
            [66u8, 132u8, 46u8, 14u8],
            [76u8, 216u8, 139u8, 118u8],
            [99u8, 82u8, 33u8, 30u8],
            [112u8, 160u8, 130u8, 49u8],
            [149u8, 216u8, 155u8, 65u8],
            [162u8, 44u8, 180u8, 101u8],
            [184u8, 141u8, 79u8, 222u8],
            [200u8, 123u8, 86u8, 221u8],
            [233u8, 133u8, 233u8, 197u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockERC721Calls {
        const NAME: &'static str = "MockERC721Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApproved(_) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isApprovedForAll(_) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ownerOf(_) => <ownerOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::safeTransferFrom_0(_) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::safeTransferFrom_1(_) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setApprovalForAll(_) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::tokenURI(_) => <tokenURICall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockERC721Calls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::name)
                    }
                    name
                },
                {
                    fn getApproved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <getApprovedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::getApproved)
                    }
                    getApproved
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::approve)
                    }
                    approve
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn safeTransferFrom_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::safeTransferFrom_0)
                    }
                    safeTransferFrom_0
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::initialize)
                    }
                    initialize
                },
                {
                    fn ownerOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <ownerOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::ownerOf)
                    }
                    ownerOf
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::symbol)
                    }
                    symbol
                },
                {
                    fn setApprovalForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::setApprovalForAll)
                    }
                    setApprovalForAll
                },
                {
                    fn safeTransferFrom_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::safeTransferFrom_1)
                    }
                    safeTransferFrom_1
                },
                {
                    fn tokenURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <tokenURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::tokenURI)
                    }
                    tokenURI
                },
                {
                    fn isApprovedForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockERC721Calls> {
                        <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockERC721Calls::isApprovedForAll)
                    }
                    isApprovedForAll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockERC721`](self) events.
    pub enum MockERC721Events {
        Approval(Approval),
        ApprovalForAll(ApprovalForAll),
        Transfer(Transfer),
    }
    #[automatically_derived]
    impl MockERC721Events {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ],
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MockERC721Events {
        const NAME: &'static str = "MockERC721Events";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<ApprovalForAll as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApprovalForAll as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApprovalForAll)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MockERC721Events {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockERC721`](self) contract instance.

See the [wrapper's documentation](`MockERC721Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockERC721Instance<T, P, N> {
        MockERC721Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockERC721Instance<T, P, N>>,
    > {
        MockERC721Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockERC721Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockERC721`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockERC721`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockERC721Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockERC721Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockERC721Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC721Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockERC721`](self) contract instance.

See the [wrapper's documentation](`MockERC721Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockERC721Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockERC721Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockERC721Instance<T, P, N> {
            MockERC721Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC721Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, id })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { owner })
        }
        ///Creates a new call builder for the [`getApproved`] function.
        pub fn getApproved(
            &self,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApprovedCall, N> {
            self.call_builder(&getApprovedCall { id })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            name_: alloy::sol_types::private::String,
            symbol_: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(&initializeCall { name_, symbol_ })
        }
        ///Creates a new call builder for the [`isApprovedForAll`] function.
        pub fn isApprovedForAll(
            &self,
            owner: alloy::sol_types::private::Address,
            operator: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isApprovedForAllCall, N> {
            self.call_builder(
                &isApprovedForAllCall {
                    owner,
                    operator,
                },
            )
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`ownerOf`] function.
        pub fn ownerOf(
            &self,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ownerOfCall, N> {
            self.call_builder(&ownerOfCall { id })
        }
        ///Creates a new call builder for the [`safeTransferFrom_0`] function.
        pub fn safeTransferFrom_0(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_0Call, N> {
            self.call_builder(
                &safeTransferFrom_0Call {
                    from,
                    to,
                    id,
                },
            )
        }
        ///Creates a new call builder for the [`safeTransferFrom_1`] function.
        pub fn safeTransferFrom_1(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_1Call, N> {
            self.call_builder(
                &safeTransferFrom_1Call {
                    from,
                    to,
                    id,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`setApprovalForAll`] function.
        pub fn setApprovalForAll(
            &self,
            operator: alloy::sol_types::private::Address,
            approved: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setApprovalForAllCall, N> {
            self.call_builder(
                &setApprovalForAllCall {
                    operator,
                    approved,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`tokenURI`] function.
        pub fn tokenURI(
            &self,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenURICall, N> {
            self.call_builder(&tokenURICall { id })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(&transferFromCall { from, to, id })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockERC721Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`ApprovalForAll`] event.
        pub fn ApprovalForAll_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApprovalForAll, N> {
            self.event_filter::<ApprovalForAll>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
    }
}
