/**

Generated by the following Solidity interface...
```solidity
interface Multicall3 {
    struct Call {
        address target;
        bytes callData;
    }
    struct Call3 {
        address target;
        bool allowFailure;
        bytes callData;
    }
    struct Call3Value {
        address target;
        bool allowFailure;
        uint256 value;
        bytes callData;
    }
    struct Result {
        bool success;
        bytes returnData;
    }

    function aggregate(Call[] memory calls) external payable returns (uint256 blockNumber, bytes[] memory returnData);
    function aggregate3(Call3[] memory calls) external payable returns (Result[] memory returnData);
    function aggregate3Value(Call3Value[] memory calls) external payable returns (Result[] memory returnData);
    function blockAndAggregate(Call[] memory calls) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
    function getBasefee() external view returns (uint256 basefee);
    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);
    function getBlockNumber() external view returns (uint256 blockNumber);
    function getChainId() external view returns (uint256 chainid);
    function getCurrentBlockCoinbase() external view returns (address coinbase);
    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);
    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);
    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);
    function getEthBalance(address addr) external view returns (uint256 balance);
    function getLastBlockHash() external view returns (bytes32 blockHash);
    function tryAggregate(bool requireSuccess, Call[] memory calls) external payable returns (Result[] memory returnData);
    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "aggregate",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "returnData",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "aggregate3",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call3[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "allowFailure",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "returnData",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Result[]",
        "components": [
          {
            "name": "success",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "returnData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "aggregate3Value",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call3Value[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "allowFailure",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "returnData",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Result[]",
        "components": [
          {
            "name": "success",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "returnData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "blockAndAggregate",
    "inputs": [
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "returnData",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Result[]",
        "components": [
          {
            "name": "success",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "returnData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "getBasefee",
    "inputs": [],
    "outputs": [
      {
        "name": "basefee",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBlockHash",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBlockNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "chainid",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentBlockCoinbase",
    "inputs": [],
    "outputs": [
      {
        "name": "coinbase",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentBlockDifficulty",
    "inputs": [],
    "outputs": [
      {
        "name": "difficulty",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentBlockGasLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "gaslimit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentBlockTimestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "timestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEthBalance",
    "inputs": [
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getLastBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tryAggregate",
    "inputs": [
      {
        "name": "requireSuccess",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "returnData",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Result[]",
        "components": [
          {
            "name": "success",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "returnData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "tryBlockAndAggregate",
    "inputs": [
      {
        "name": "requireSuccess",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "calls",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Call[]",
        "components": [
          {
            "name": "target",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "callData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "returnData",
        "type": "tuple[]",
        "internalType": "struct Multicall3.Result[]",
        "components": [
          {
            "name": "success",
            "type": "bool",
            "internalType": "bool"
          },
          {
            "name": "returnData",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "payable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Multicall3 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506115b9806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e14610325578063bce38bd714610350578063c3077fa914610380578063ee82ac5e146103b2576100f3565b80634d2301cc1461026257806372425d9d1461029f57806382ad56cb146102ca57806386d516e8146102fa576100f3565b80633408e470116100c65780633408e470146101af578063399542e9146101da5780633e64a6961461020c57806342cbb15c14610237576100f3565b80630f28c97d146100f8578063174dea7114610123578063252dba421461015357806327e86d6e14610184575b600080fd5b34801561010457600080fd5b5061010d6103ef565b60405161011a9190610c0a565b60405180910390f35b61013d60048036038101906101389190610c94565b6103f7565b60405161014a9190610e94565b60405180910390f35b61016d60048036038101906101689190610f0c565b610615565b60405161017b92919061101b565b60405180910390f35b34801561019057600080fd5b506101996107ab565b6040516101a69190611064565b60405180910390f35b3480156101bb57600080fd5b506101c46107b7565b6040516101d19190610c0a565b60405180910390f35b6101f460048036038101906101ef91906110ab565b6107bf565b6040516102039392919061110b565b60405180910390f35b34801561021857600080fd5b506102216107e1565b60405161022e9190610c0a565b60405180910390f35b34801561024357600080fd5b5061024c6107e9565b6040516102599190610c0a565b60405180910390f35b34801561026e57600080fd5b50610289600480360381019061028491906111a7565b6107f1565b6040516102969190610c0a565b60405180910390f35b3480156102ab57600080fd5b506102b4610812565b6040516102c19190610c0a565b60405180910390f35b6102e460048036038101906102df919061122a565b61081a565b6040516102f19190610e94565b60405180910390f35b34801561030657600080fd5b5061030f6109e4565b60405161031c9190610c0a565b60405180910390f35b34801561033157600080fd5b5061033a6109ec565b6040516103479190611286565b60405180910390f35b61036a600480360381019061036591906110ab565b6109f4565b6040516103779190610e94565b60405180910390f35b61039a60048036038101906103959190610f0c565b610ba6565b6040516103a99392919061110b565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d491906112cd565b610bca565b6040516103e69190611064565b60405180910390f35b600042905090565b60606000808484905090508067ffffffffffffffff81111561041c5761041b6112fa565b5b60405190808252806020026020018201604052801561045557816020015b610442610bd5565b81526020019060019003908161043a5790505b5092503660005b828110156105c957600085828151811061047957610478611329565b5b6020026020010151905087878381811061049657610495611329565b5b90506020028101906104a89190611367565b925060008360400135905080860195508360000160208101906104cb91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906104f2919061138f565b604051610500929190611431565b60006040518083038185875af1925050503d806000811461053d576040519150601f19603f3d011682016040523d82523d6000602084013e610542565b606091505b5083600001846020018290528215151515815250505081516020850135176105bc577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b826001019250505061045c565b5082341461060c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610603906114a7565b60405180910390fd5b50505092915050565b6000606043915060008484905090508067ffffffffffffffff81111561063e5761063d6112fa565b5b60405190808252806020026020018201604052801561067157816020015b606081526020019060019003908161065c5790505b5091503660005b828110156107a157600087878381811061069557610694611329565b5b90506020028101906106a791906114c7565b92508260000160208101906106bc91906111a7565b73ffffffffffffffffffffffffffffffffffffffff168380602001906106e2919061138f565b6040516106f0929190611431565b6000604051808303816000865af19150503d806000811461072d576040519150601f19603f3d011682016040523d82523d6000602084013e610732565b606091505b5086848151811061074657610745611329565b5b60200260200101819052819250505080610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c9061153b565b60405180910390fd5b81600101915050610678565b5050509250929050565b60006001430340905090565b600046905090565b6000806060439250434091506107d68686866109f4565b905093509350939050565b600048905090565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b606060008383905090508067ffffffffffffffff81111561083e5761083d6112fa565b5b60405190808252806020026020018201604052801561087757816020015b610864610bd5565b81526020019060019003908161085c5790505b5091503660005b828110156109db57600084828151811061089b5761089a611329565b5b602002602001015190508686838181106108b8576108b7611329565b5b90506020028101906108ca919061155b565b92508260000160208101906108df91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610905919061138f565b604051610913929190611431565b6000604051808303816000865af19150503d8060008114610950576040519150601f19603f3d011682016040523d82523d6000602084013e610955565b606091505b5082600001836020018290528215151515815250505080516020840135176109cf577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b8160010191505061087e565b50505092915050565b600045905090565b600041905090565b606060008383905090508067ffffffffffffffff811115610a1857610a176112fa565b5b604051908082528060200260200182016040528015610a5157816020015b610a3e610bd5565b815260200190600190039081610a365790505b5091503660005b82811015610b9c576000848281518110610a7557610a74611329565b5b60200260200101519050868683818110610a9257610a91611329565b5b9050602002810190610aa491906114c7565b9250826000016020810190610ab991906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060200190610adf919061138f565b604051610aed929190611431565b6000604051808303816000865af19150503d8060008114610b2a576040519150601f19603f3d011682016040523d82523d6000602084013e610b2f565b606091505b508260000183602001829052821515151581525050508715610b90578060000151610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869061153b565b60405180910390fd5b5b81600101915050610a58565b5050509392505050565b6000806060610bb7600186866107bf565b8093508194508295505050509250925092565b600081409050919050565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b610c0481610bf1565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610c5457610c53610c2f565b5b8235905067ffffffffffffffff811115610c7157610c70610c34565b5b602083019150836020820283011115610c8d57610c8c610c39565b5b9250929050565b60008060208385031215610cab57610caa610c25565b5b600083013567ffffffffffffffff811115610cc957610cc8610c2a565b5b610cd585828601610c3e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b610d2281610d0d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d62578082015181840152602081019050610d47565b83811115610d71576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9382610d28565b610d9d8185610d33565b9350610dad818560208601610d44565b610db681610d77565b840191505092915050565b6000604083016000830151610dd96000860182610d19565b5060208301518482036020860152610df18282610d88565b9150508091505092915050565b6000610e0a8383610dc1565b905092915050565b6000602082019050919050565b6000610e2a82610ce1565b610e348185610cec565b935083602082028501610e4685610cfd565b8060005b85811015610e825784840389528151610e638582610dfe565b9450610e6e83610e12565b925060208a01995050600181019050610e4a565b50829750879550505050505092915050565b60006020820190508181036000830152610eae8184610e1f565b905092915050565b60008083601f840112610ecc57610ecb610c2f565b5b8235905067ffffffffffffffff811115610ee957610ee8610c34565b5b602083019150836020820283011115610f0557610f04610c39565b5b9250929050565b60008060208385031215610f2357610f22610c25565b5b600083013567ffffffffffffffff811115610f4157610f40610c2a565b5b610f4d85828601610eb6565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610f918383610d88565b905092915050565b6000602082019050919050565b6000610fb182610f59565b610fbb8185610f64565b935083602082028501610fcd85610f75565b8060005b858110156110095784840389528151610fea8582610f85565b9450610ff583610f99565b925060208a01995050600181019050610fd1565b50829750879550505050505092915050565b60006040820190506110306000830185610bfb565b81810360208301526110428184610fa6565b90509392505050565b6000819050919050565b61105e8161104b565b82525050565b60006020820190506110796000830184611055565b92915050565b61108881610d0d565b811461109357600080fd5b50565b6000813590506110a58161107f565b92915050565b6000806000604084860312156110c4576110c3610c25565b5b60006110d286828701611096565b935050602084013567ffffffffffffffff8111156110f3576110f2610c2a565b5b6110ff86828701610eb6565b92509250509250925092565b60006060820190506111206000830186610bfb565b61112d6020830185611055565b818103604083015261113f8184610e1f565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117482611149565b9050919050565b61118481611169565b811461118f57600080fd5b50565b6000813590506111a18161117b565b92915050565b6000602082840312156111bd576111bc610c25565b5b60006111cb84828501611192565b91505092915050565b60008083601f8401126111ea576111e9610c2f565b5b8235905067ffffffffffffffff81111561120757611206610c34565b5b60208301915083602082028301111561122357611222610c39565b5b9250929050565b6000806020838503121561124157611240610c25565b5b600083013567ffffffffffffffff81111561125f5761125e610c2a565b5b61126b858286016111d4565b92509250509250929050565b61128081611169565b82525050565b600060208201905061129b6000830184611277565b92915050565b6112aa81610bf1565b81146112b557600080fd5b50565b6000813590506112c7816112a1565b92915050565b6000602082840312156112e3576112e2610c25565b5b60006112f1848285016112b8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261138357611382611358565b5b80830191505092915050565b600080833560016020038436030381126113ac576113ab611358565b5b80840192508235915067ffffffffffffffff8211156113ce576113cd61135d565b5b6020830192506001820236038313156113ea576113e9611362565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061141883856113f2565b93506114258385846113fd565b82840190509392505050565b600061143e82848661140c565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611491601a8361144a565b915061149c8261145b565b602082019050919050565b600060208201905081810360008301526114c081611484565b9050919050565b6000823560016040038336030381126114e3576114e2611358565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b600061152560178361144a565b9150611530826114ef565b602082019050919050565b6000602082019050818103600083015261155481611518565b9050919050565b60008235600160600383360303811261157757611576611358565b5b8083019150509291505056fea2646970667358221220c0117a85ea2e197e6b81078be68cf5dcdcaadd969c6d71baacda33ed9a285e4164736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x15\xB9\x80a\0 `\09`\0\xF3\xFE`\x80`@R`\x046\x10a\0\xF3W`\x005`\xE0\x1C\x80cM#\x01\xCC\x11a\0\x8AW\x80c\xA8\xB0WN\x11a\0YW\x80c\xA8\xB0WN\x14a\x03%W\x80c\xBC\xE3\x8B\xD7\x14a\x03PW\x80c\xC3\x07\x7F\xA9\x14a\x03\x80W\x80c\xEE\x82\xAC^\x14a\x03\xB2Wa\0\xF3V[\x80cM#\x01\xCC\x14a\x02bW\x80crB]\x9D\x14a\x02\x9FW\x80c\x82\xADV\xCB\x14a\x02\xCAW\x80c\x86\xD5\x16\xE8\x14a\x02\xFAWa\0\xF3V[\x80c4\x08\xE4p\x11a\0\xC6W\x80c4\x08\xE4p\x14a\x01\xAFW\x80c9\x95B\xE9\x14a\x01\xDAW\x80c>d\xA6\x96\x14a\x02\x0CW\x80cB\xCB\xB1\\\x14a\x027Wa\0\xF3V[\x80c\x0F(\xC9}\x14a\0\xF8W\x80c\x17M\xEAq\x14a\x01#W\x80c%-\xBAB\x14a\x01SW\x80c'\xE8mn\x14a\x01\x84W[`\0\x80\xFD[4\x80\x15a\x01\x04W`\0\x80\xFD[Pa\x01\ra\x03\xEFV[`@Qa\x01\x1A\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x0C\x94V[a\x03\xF7V[`@Qa\x01J\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[a\x01m`\x04\x806\x03\x81\x01\x90a\x01h\x91\x90a\x0F\x0CV[a\x06\x15V[`@Qa\x01{\x92\x91\x90a\x10\x1BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x90W`\0\x80\xFD[Pa\x01\x99a\x07\xABV[`@Qa\x01\xA6\x91\x90a\x10dV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBBW`\0\x80\xFD[Pa\x01\xC4a\x07\xB7V[`@Qa\x01\xD1\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x01\xF4`\x04\x806\x03\x81\x01\x90a\x01\xEF\x91\x90a\x10\xABV[a\x07\xBFV[`@Qa\x02\x03\x93\x92\x91\x90a\x11\x0BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x18W`\0\x80\xFD[Pa\x02!a\x07\xE1V[`@Qa\x02.\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02CW`\0\x80\xFD[Pa\x02La\x07\xE9V[`@Qa\x02Y\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02nW`\0\x80\xFD[Pa\x02\x89`\x04\x806\x03\x81\x01\x90a\x02\x84\x91\x90a\x11\xA7V[a\x07\xF1V[`@Qa\x02\x96\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xABW`\0\x80\xFD[Pa\x02\xB4a\x08\x12V[`@Qa\x02\xC1\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x02\xE4`\x04\x806\x03\x81\x01\x90a\x02\xDF\x91\x90a\x12*V[a\x08\x1AV[`@Qa\x02\xF1\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x06W`\0\x80\xFD[Pa\x03\x0Fa\t\xE4V[`@Qa\x03\x1C\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x031W`\0\x80\xFD[Pa\x03:a\t\xECV[`@Qa\x03G\x91\x90a\x12\x86V[`@Q\x80\x91\x03\x90\xF3[a\x03j`\x04\x806\x03\x81\x01\x90a\x03e\x91\x90a\x10\xABV[a\t\xF4V[`@Qa\x03w\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[a\x03\x9A`\x04\x806\x03\x81\x01\x90a\x03\x95\x91\x90a\x0F\x0CV[a\x0B\xA6V[`@Qa\x03\xA9\x93\x92\x91\x90a\x11\x0BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xBEW`\0\x80\xFD[Pa\x03\xD9`\x04\x806\x03\x81\x01\x90a\x03\xD4\x91\x90a\x12\xCDV[a\x0B\xCAV[`@Qa\x03\xE6\x91\x90a\x10dV[`@Q\x80\x91\x03\x90\xF3[`\0B\x90P\x90V[```\0\x80\x84\x84\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x1CWa\x04\x1Ba\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04UW\x81` \x01[a\x04Ba\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x04:W\x90P[P\x92P6`\0[\x82\x81\x10\x15a\x05\xC9W`\0\x85\x82\x81Q\x81\x10a\x04yWa\x04xa\x13)V[[` \x02` \x01\x01Q\x90P\x87\x87\x83\x81\x81\x10a\x04\x96Wa\x04\x95a\x13)V[[\x90P` \x02\x81\x01\x90a\x04\xA8\x91\x90a\x13gV[\x92P`\0\x83`@\x015\x90P\x80\x86\x01\x95P\x83`\0\x01` \x81\x01\x90a\x04\xCB\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x85\x80``\x01\x90a\x04\xF2\x91\x90a\x13\x8FV[`@Qa\x05\0\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x05=W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05BV[``\x91P[P\x83`\0\x01\x84` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x81Q` \x85\x015\x17a\x05\xBCW\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R` `\x04R`\x17`$R\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`DR`\x84`\0\xFD[\x82`\x01\x01\x92PPPa\x04\\V[P\x824\x14a\x06\x0CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x03\x90a\x14\xA7V[`@Q\x80\x91\x03\x90\xFD[PPP\x92\x91PPV[`\0``C\x91P`\0\x84\x84\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06>Wa\x06=a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x06qW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x06\\W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\x07\xA1W`\0\x87\x87\x83\x81\x81\x10a\x06\x95Wa\x06\x94a\x13)V[[\x90P` \x02\x81\x01\x90a\x06\xA7\x91\x90a\x14\xC7V[\x92P\x82`\0\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\x06\xE2\x91\x90a\x13\x8FV[`@Qa\x06\xF0\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x07-W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x072V[``\x91P[P\x86\x84\x81Q\x81\x10a\x07FWa\x07Ea\x13)V[[` \x02` \x01\x01\x81\x90R\x81\x92PPP\x80a\x07\x95W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x8C\x90a\x15;V[`@Q\x80\x91\x03\x90\xFD[\x81`\x01\x01\x91PPa\x06xV[PPP\x92P\x92\x90PV[`\0`\x01C\x03@\x90P\x90V[`\0F\x90P\x90V[`\0\x80``C\x92PC@\x91Pa\x07\xD6\x86\x86\x86a\t\xF4V[\x90P\x93P\x93P\x93\x90PV[`\0H\x90P\x90V[`\0C\x90P\x90V[`\0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x161\x90P\x91\x90PV[`\0D\x90P\x90V[```\0\x83\x83\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08>Wa\x08=a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x08wW\x81` \x01[a\x08da\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x08\\W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\t\xDBW`\0\x84\x82\x81Q\x81\x10a\x08\x9BWa\x08\x9Aa\x13)V[[` \x02` \x01\x01Q\x90P\x86\x86\x83\x81\x81\x10a\x08\xB8Wa\x08\xB7a\x13)V[[\x90P` \x02\x81\x01\x90a\x08\xCA\x91\x90a\x15[V[\x92P\x82`\0\x01` \x81\x01\x90a\x08\xDF\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80`@\x01\x90a\t\x05\x91\x90a\x13\x8FV[`@Qa\t\x13\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\tPW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\tUV[``\x91P[P\x82`\0\x01\x83` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x80Q` \x84\x015\x17a\t\xCFW\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R` `\x04R`\x17`$R\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`DR`d`\0\xFD[\x81`\x01\x01\x91PPa\x08~V[PPP\x92\x91PPV[`\0E\x90P\x90V[`\0A\x90P\x90V[```\0\x83\x83\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x18Wa\n\x17a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\nQW\x81` \x01[a\n>a\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n6W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\x0B\x9CW`\0\x84\x82\x81Q\x81\x10a\nuWa\nta\x13)V[[` \x02` \x01\x01Q\x90P\x86\x86\x83\x81\x81\x10a\n\x92Wa\n\x91a\x13)V[[\x90P` \x02\x81\x01\x90a\n\xA4\x91\x90a\x14\xC7V[\x92P\x82`\0\x01` \x81\x01\x90a\n\xB9\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\n\xDF\x91\x90a\x13\x8FV[`@Qa\n\xED\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x0B*W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0B/V[``\x91P[P\x82`\0\x01\x83` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x87\x15a\x0B\x90W\x80`\0\x01Qa\x0B\x8FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x86\x90a\x15;V[`@Q\x80\x91\x03\x90\xFD[[\x81`\x01\x01\x91PPa\nXV[PPP\x93\x92PPPV[`\0\x80``a\x0B\xB7`\x01\x86\x86a\x07\xBFV[\x80\x93P\x81\x94P\x82\x95PPPP\x92P\x92P\x92V[`\0\x81@\x90P\x91\x90PV[`@Q\x80`@\x01`@R\x80`\0\x15\x15\x81R` \x01``\x81RP\x90V[`\0\x81\x90P\x91\x90PV[a\x0C\x04\x81a\x0B\xF1V[\x82RPPV[`\0` \x82\x01\x90Pa\x0C\x1F`\0\x83\x01\x84a\x0B\xFBV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x0CTWa\x0CSa\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CqWa\x0Cpa\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0C\x8DWa\x0C\x8Ca\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x0C\xABWa\x0C\xAAa\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xC9Wa\x0C\xC8a\x0C*V[[a\x0C\xD5\x85\x82\x86\x01a\x0C>V[\x92P\x92PP\x92P\x92\x90PV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0\x81\x15\x15\x90P\x91\x90PV[a\r\"\x81a\r\rV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\rbW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\rGV[\x83\x81\x11\x15a\rqW`\0\x84\x84\x01R[PPPPV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\r\x93\x82a\r(V[a\r\x9D\x81\x85a\r3V[\x93Pa\r\xAD\x81\x85` \x86\x01a\rDV[a\r\xB6\x81a\rwV[\x84\x01\x91PP\x92\x91PPV[`\0`@\x83\x01`\0\x83\x01Qa\r\xD9`\0\x86\x01\x82a\r\x19V[P` \x83\x01Q\x84\x82\x03` \x86\x01Ra\r\xF1\x82\x82a\r\x88V[\x91PP\x80\x91PP\x92\x91PPV[`\0a\x0E\n\x83\x83a\r\xC1V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0E*\x82a\x0C\xE1V[a\x0E4\x81\x85a\x0C\xECV[\x93P\x83` \x82\x02\x85\x01a\x0EF\x85a\x0C\xFDV[\x80`\0[\x85\x81\x10\x15a\x0E\x82W\x84\x84\x03\x89R\x81Qa\x0Ec\x85\x82a\r\xFEV[\x94Pa\x0En\x83a\x0E\x12V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x0EJV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\xAE\x81\x84a\x0E\x1FV[\x90P\x92\x91PPV[`\0\x80\x83`\x1F\x84\x01\x12a\x0E\xCCWa\x0E\xCBa\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xE9Wa\x0E\xE8a\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0F\x05Wa\x0F\x04a\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x0F#Wa\x0F\"a\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0FAWa\x0F@a\x0C*V[[a\x0FM\x85\x82\x86\x01a\x0E\xB6V[\x92P\x92PP\x92P\x92\x90PV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x0F\x91\x83\x83a\r\x88V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0F\xB1\x82a\x0FYV[a\x0F\xBB\x81\x85a\x0FdV[\x93P\x83` \x82\x02\x85\x01a\x0F\xCD\x85a\x0FuV[\x80`\0[\x85\x81\x10\x15a\x10\tW\x84\x84\x03\x89R\x81Qa\x0F\xEA\x85\x82a\x0F\x85V[\x94Pa\x0F\xF5\x83a\x0F\x99V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x0F\xD1V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x100`\0\x83\x01\x85a\x0B\xFBV[\x81\x81\x03` \x83\x01Ra\x10B\x81\x84a\x0F\xA6V[\x90P\x93\x92PPPV[`\0\x81\x90P\x91\x90PV[a\x10^\x81a\x10KV[\x82RPPV[`\0` \x82\x01\x90Pa\x10y`\0\x83\x01\x84a\x10UV[\x92\x91PPV[a\x10\x88\x81a\r\rV[\x81\x14a\x10\x93W`\0\x80\xFD[PV[`\0\x815\x90Pa\x10\xA5\x81a\x10\x7FV[\x92\x91PPV[`\0\x80`\0`@\x84\x86\x03\x12\x15a\x10\xC4Wa\x10\xC3a\x0C%V[[`\0a\x10\xD2\x86\x82\x87\x01a\x10\x96V[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xF3Wa\x10\xF2a\x0C*V[[a\x10\xFF\x86\x82\x87\x01a\x0E\xB6V[\x92P\x92PP\x92P\x92P\x92V[`\0``\x82\x01\x90Pa\x11 `\0\x83\x01\x86a\x0B\xFBV[a\x11-` \x83\x01\x85a\x10UV[\x81\x81\x03`@\x83\x01Ra\x11?\x81\x84a\x0E\x1FV[\x90P\x94\x93PPPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x11t\x82a\x11IV[\x90P\x91\x90PV[a\x11\x84\x81a\x11iV[\x81\x14a\x11\x8FW`\0\x80\xFD[PV[`\0\x815\x90Pa\x11\xA1\x81a\x11{V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\xBDWa\x11\xBCa\x0C%V[[`\0a\x11\xCB\x84\x82\x85\x01a\x11\x92V[\x91PP\x92\x91PPV[`\0\x80\x83`\x1F\x84\x01\x12a\x11\xEAWa\x11\xE9a\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x07Wa\x12\x06a\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x12#Wa\x12\"a\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x12AWa\x12@a\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12_Wa\x12^a\x0C*V[[a\x12k\x85\x82\x86\x01a\x11\xD4V[\x92P\x92PP\x92P\x92\x90PV[a\x12\x80\x81a\x11iV[\x82RPPV[`\0` \x82\x01\x90Pa\x12\x9B`\0\x83\x01\x84a\x12wV[\x92\x91PPV[a\x12\xAA\x81a\x0B\xF1V[\x81\x14a\x12\xB5W`\0\x80\xFD[PV[`\0\x815\x90Pa\x12\xC7\x81a\x12\xA1V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x12\xE3Wa\x12\xE2a\x0C%V[[`\0a\x12\xF1\x84\x82\x85\x01a\x12\xB8V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x825`\x01`\x80\x03\x836\x03\x03\x81\x12a\x13\x83Wa\x13\x82a\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x13\xACWa\x13\xABa\x13XV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13\xCEWa\x13\xCDa\x13]V[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15a\x13\xEAWa\x13\xE9a\x13bV[[P\x92P\x92\x90PV[`\0\x81\x90P\x92\x91PPV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x14\x18\x83\x85a\x13\xF2V[\x93Pa\x14%\x83\x85\x84a\x13\xFDV[\x82\x84\x01\x90P\x93\x92PPPV[`\0a\x14>\x82\x84\x86a\x14\x0CV[\x91P\x81\x90P\x93\x92PPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FMulticall3: value mismatch\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x14\x91`\x1A\x83a\x14JV[\x91Pa\x14\x9C\x82a\x14[V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xC0\x81a\x14\x84V[\x90P\x91\x90PV[`\0\x825`\x01`@\x03\x836\x03\x03\x81\x12a\x14\xE3Wa\x14\xE2a\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV[\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x15%`\x17\x83a\x14JV[\x91Pa\x150\x82a\x14\xEFV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15T\x81a\x15\x18V[\x90P\x91\x90PV[`\0\x825`\x01``\x03\x836\x03\x03\x81\x12a\x15wWa\x15va\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xC0\x11z\x85\xEA.\x19~k\x81\x07\x8B\xE6\x8C\xF5\xDC\xDC\xAA\xDD\x96\x9Cmq\xBA\xAC\xDA3\xED\x9A(^AdsolcC\0\x08\x0C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e14610325578063bce38bd714610350578063c3077fa914610380578063ee82ac5e146103b2576100f3565b80634d2301cc1461026257806372425d9d1461029f57806382ad56cb146102ca57806386d516e8146102fa576100f3565b80633408e470116100c65780633408e470146101af578063399542e9146101da5780633e64a6961461020c57806342cbb15c14610237576100f3565b80630f28c97d146100f8578063174dea7114610123578063252dba421461015357806327e86d6e14610184575b600080fd5b34801561010457600080fd5b5061010d6103ef565b60405161011a9190610c0a565b60405180910390f35b61013d60048036038101906101389190610c94565b6103f7565b60405161014a9190610e94565b60405180910390f35b61016d60048036038101906101689190610f0c565b610615565b60405161017b92919061101b565b60405180910390f35b34801561019057600080fd5b506101996107ab565b6040516101a69190611064565b60405180910390f35b3480156101bb57600080fd5b506101c46107b7565b6040516101d19190610c0a565b60405180910390f35b6101f460048036038101906101ef91906110ab565b6107bf565b6040516102039392919061110b565b60405180910390f35b34801561021857600080fd5b506102216107e1565b60405161022e9190610c0a565b60405180910390f35b34801561024357600080fd5b5061024c6107e9565b6040516102599190610c0a565b60405180910390f35b34801561026e57600080fd5b50610289600480360381019061028491906111a7565b6107f1565b6040516102969190610c0a565b60405180910390f35b3480156102ab57600080fd5b506102b4610812565b6040516102c19190610c0a565b60405180910390f35b6102e460048036038101906102df919061122a565b61081a565b6040516102f19190610e94565b60405180910390f35b34801561030657600080fd5b5061030f6109e4565b60405161031c9190610c0a565b60405180910390f35b34801561033157600080fd5b5061033a6109ec565b6040516103479190611286565b60405180910390f35b61036a600480360381019061036591906110ab565b6109f4565b6040516103779190610e94565b60405180910390f35b61039a60048036038101906103959190610f0c565b610ba6565b6040516103a99392919061110b565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d491906112cd565b610bca565b6040516103e69190611064565b60405180910390f35b600042905090565b60606000808484905090508067ffffffffffffffff81111561041c5761041b6112fa565b5b60405190808252806020026020018201604052801561045557816020015b610442610bd5565b81526020019060019003908161043a5790505b5092503660005b828110156105c957600085828151811061047957610478611329565b5b6020026020010151905087878381811061049657610495611329565b5b90506020028101906104a89190611367565b925060008360400135905080860195508360000160208101906104cb91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906104f2919061138f565b604051610500929190611431565b60006040518083038185875af1925050503d806000811461053d576040519150601f19603f3d011682016040523d82523d6000602084013e610542565b606091505b5083600001846020018290528215151515815250505081516020850135176105bc577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b826001019250505061045c565b5082341461060c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610603906114a7565b60405180910390fd5b50505092915050565b6000606043915060008484905090508067ffffffffffffffff81111561063e5761063d6112fa565b5b60405190808252806020026020018201604052801561067157816020015b606081526020019060019003908161065c5790505b5091503660005b828110156107a157600087878381811061069557610694611329565b5b90506020028101906106a791906114c7565b92508260000160208101906106bc91906111a7565b73ffffffffffffffffffffffffffffffffffffffff168380602001906106e2919061138f565b6040516106f0929190611431565b6000604051808303816000865af19150503d806000811461072d576040519150601f19603f3d011682016040523d82523d6000602084013e610732565b606091505b5086848151811061074657610745611329565b5b60200260200101819052819250505080610795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078c9061153b565b60405180910390fd5b81600101915050610678565b5050509250929050565b60006001430340905090565b600046905090565b6000806060439250434091506107d68686866109f4565b905093509350939050565b600048905090565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b606060008383905090508067ffffffffffffffff81111561083e5761083d6112fa565b5b60405190808252806020026020018201604052801561087757816020015b610864610bd5565b81526020019060019003908161085c5790505b5091503660005b828110156109db57600084828151811061089b5761089a611329565b5b602002602001015190508686838181106108b8576108b7611329565b5b90506020028101906108ca919061155b565b92508260000160208101906108df91906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610905919061138f565b604051610913929190611431565b6000604051808303816000865af19150503d8060008114610950576040519150601f19603f3d011682016040523d82523d6000602084013e610955565b606091505b5082600001836020018290528215151515815250505080516020840135176109cf577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b8160010191505061087e565b50505092915050565b600045905090565b600041905090565b606060008383905090508067ffffffffffffffff811115610a1857610a176112fa565b5b604051908082528060200260200182016040528015610a5157816020015b610a3e610bd5565b815260200190600190039081610a365790505b5091503660005b82811015610b9c576000848281518110610a7557610a74611329565b5b60200260200101519050868683818110610a9257610a91611329565b5b9050602002810190610aa491906114c7565b9250826000016020810190610ab991906111a7565b73ffffffffffffffffffffffffffffffffffffffff16838060200190610adf919061138f565b604051610aed929190611431565b6000604051808303816000865af19150503d8060008114610b2a576040519150601f19603f3d011682016040523d82523d6000602084013e610b2f565b606091505b508260000183602001829052821515151581525050508715610b90578060000151610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869061153b565b60405180910390fd5b5b81600101915050610a58565b5050509392505050565b6000806060610bb7600186866107bf565b8093508194508295505050509250925092565b600081409050919050565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b610c0481610bf1565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610c5457610c53610c2f565b5b8235905067ffffffffffffffff811115610c7157610c70610c34565b5b602083019150836020820283011115610c8d57610c8c610c39565b5b9250929050565b60008060208385031215610cab57610caa610c25565b5b600083013567ffffffffffffffff811115610cc957610cc8610c2a565b5b610cd585828601610c3e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b610d2281610d0d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d62578082015181840152602081019050610d47565b83811115610d71576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9382610d28565b610d9d8185610d33565b9350610dad818560208601610d44565b610db681610d77565b840191505092915050565b6000604083016000830151610dd96000860182610d19565b5060208301518482036020860152610df18282610d88565b9150508091505092915050565b6000610e0a8383610dc1565b905092915050565b6000602082019050919050565b6000610e2a82610ce1565b610e348185610cec565b935083602082028501610e4685610cfd565b8060005b85811015610e825784840389528151610e638582610dfe565b9450610e6e83610e12565b925060208a01995050600181019050610e4a565b50829750879550505050505092915050565b60006020820190508181036000830152610eae8184610e1f565b905092915050565b60008083601f840112610ecc57610ecb610c2f565b5b8235905067ffffffffffffffff811115610ee957610ee8610c34565b5b602083019150836020820283011115610f0557610f04610c39565b5b9250929050565b60008060208385031215610f2357610f22610c25565b5b600083013567ffffffffffffffff811115610f4157610f40610c2a565b5b610f4d85828601610eb6565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610f918383610d88565b905092915050565b6000602082019050919050565b6000610fb182610f59565b610fbb8185610f64565b935083602082028501610fcd85610f75565b8060005b858110156110095784840389528151610fea8582610f85565b9450610ff583610f99565b925060208a01995050600181019050610fd1565b50829750879550505050505092915050565b60006040820190506110306000830185610bfb565b81810360208301526110428184610fa6565b90509392505050565b6000819050919050565b61105e8161104b565b82525050565b60006020820190506110796000830184611055565b92915050565b61108881610d0d565b811461109357600080fd5b50565b6000813590506110a58161107f565b92915050565b6000806000604084860312156110c4576110c3610c25565b5b60006110d286828701611096565b935050602084013567ffffffffffffffff8111156110f3576110f2610c2a565b5b6110ff86828701610eb6565b92509250509250925092565b60006060820190506111206000830186610bfb565b61112d6020830185611055565b818103604083015261113f8184610e1f565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117482611149565b9050919050565b61118481611169565b811461118f57600080fd5b50565b6000813590506111a18161117b565b92915050565b6000602082840312156111bd576111bc610c25565b5b60006111cb84828501611192565b91505092915050565b60008083601f8401126111ea576111e9610c2f565b5b8235905067ffffffffffffffff81111561120757611206610c34565b5b60208301915083602082028301111561122357611222610c39565b5b9250929050565b6000806020838503121561124157611240610c25565b5b600083013567ffffffffffffffff81111561125f5761125e610c2a565b5b61126b858286016111d4565b92509250509250929050565b61128081611169565b82525050565b600060208201905061129b6000830184611277565b92915050565b6112aa81610bf1565b81146112b557600080fd5b50565b6000813590506112c7816112a1565b92915050565b6000602082840312156112e3576112e2610c25565b5b60006112f1848285016112b8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160800383360303811261138357611382611358565b5b80830191505092915050565b600080833560016020038436030381126113ac576113ab611358565b5b80840192508235915067ffffffffffffffff8211156113ce576113cd61135d565b5b6020830192506001820236038313156113ea576113e9611362565b5b509250929050565b600081905092915050565b82818337600083830152505050565b600061141883856113f2565b93506114258385846113fd565b82840190509392505050565b600061143e82848661140c565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611491601a8361144a565b915061149c8261145b565b602082019050919050565b600060208201905081810360008301526114c081611484565b9050919050565b6000823560016040038336030381126114e3576114e2611358565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b600061152560178361144a565b9150611530826114ef565b602082019050919050565b6000602082019050818103600083015261155481611518565b9050919050565b60008235600160600383360303811261157757611576611358565b5b8083019150509291505056fea2646970667358221220c0117a85ea2e197e6b81078be68cf5dcdcaadd969c6d71baacda33ed9a285e4164736f6c634300080c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\xF3W`\x005`\xE0\x1C\x80cM#\x01\xCC\x11a\0\x8AW\x80c\xA8\xB0WN\x11a\0YW\x80c\xA8\xB0WN\x14a\x03%W\x80c\xBC\xE3\x8B\xD7\x14a\x03PW\x80c\xC3\x07\x7F\xA9\x14a\x03\x80W\x80c\xEE\x82\xAC^\x14a\x03\xB2Wa\0\xF3V[\x80cM#\x01\xCC\x14a\x02bW\x80crB]\x9D\x14a\x02\x9FW\x80c\x82\xADV\xCB\x14a\x02\xCAW\x80c\x86\xD5\x16\xE8\x14a\x02\xFAWa\0\xF3V[\x80c4\x08\xE4p\x11a\0\xC6W\x80c4\x08\xE4p\x14a\x01\xAFW\x80c9\x95B\xE9\x14a\x01\xDAW\x80c>d\xA6\x96\x14a\x02\x0CW\x80cB\xCB\xB1\\\x14a\x027Wa\0\xF3V[\x80c\x0F(\xC9}\x14a\0\xF8W\x80c\x17M\xEAq\x14a\x01#W\x80c%-\xBAB\x14a\x01SW\x80c'\xE8mn\x14a\x01\x84W[`\0\x80\xFD[4\x80\x15a\x01\x04W`\0\x80\xFD[Pa\x01\ra\x03\xEFV[`@Qa\x01\x1A\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x01=`\x04\x806\x03\x81\x01\x90a\x018\x91\x90a\x0C\x94V[a\x03\xF7V[`@Qa\x01J\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[a\x01m`\x04\x806\x03\x81\x01\x90a\x01h\x91\x90a\x0F\x0CV[a\x06\x15V[`@Qa\x01{\x92\x91\x90a\x10\x1BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x90W`\0\x80\xFD[Pa\x01\x99a\x07\xABV[`@Qa\x01\xA6\x91\x90a\x10dV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBBW`\0\x80\xFD[Pa\x01\xC4a\x07\xB7V[`@Qa\x01\xD1\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x01\xF4`\x04\x806\x03\x81\x01\x90a\x01\xEF\x91\x90a\x10\xABV[a\x07\xBFV[`@Qa\x02\x03\x93\x92\x91\x90a\x11\x0BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x18W`\0\x80\xFD[Pa\x02!a\x07\xE1V[`@Qa\x02.\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02CW`\0\x80\xFD[Pa\x02La\x07\xE9V[`@Qa\x02Y\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02nW`\0\x80\xFD[Pa\x02\x89`\x04\x806\x03\x81\x01\x90a\x02\x84\x91\x90a\x11\xA7V[a\x07\xF1V[`@Qa\x02\x96\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xABW`\0\x80\xFD[Pa\x02\xB4a\x08\x12V[`@Qa\x02\xC1\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[a\x02\xE4`\x04\x806\x03\x81\x01\x90a\x02\xDF\x91\x90a\x12*V[a\x08\x1AV[`@Qa\x02\xF1\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x06W`\0\x80\xFD[Pa\x03\x0Fa\t\xE4V[`@Qa\x03\x1C\x91\x90a\x0C\nV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x031W`\0\x80\xFD[Pa\x03:a\t\xECV[`@Qa\x03G\x91\x90a\x12\x86V[`@Q\x80\x91\x03\x90\xF3[a\x03j`\x04\x806\x03\x81\x01\x90a\x03e\x91\x90a\x10\xABV[a\t\xF4V[`@Qa\x03w\x91\x90a\x0E\x94V[`@Q\x80\x91\x03\x90\xF3[a\x03\x9A`\x04\x806\x03\x81\x01\x90a\x03\x95\x91\x90a\x0F\x0CV[a\x0B\xA6V[`@Qa\x03\xA9\x93\x92\x91\x90a\x11\x0BV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xBEW`\0\x80\xFD[Pa\x03\xD9`\x04\x806\x03\x81\x01\x90a\x03\xD4\x91\x90a\x12\xCDV[a\x0B\xCAV[`@Qa\x03\xE6\x91\x90a\x10dV[`@Q\x80\x91\x03\x90\xF3[`\0B\x90P\x90V[```\0\x80\x84\x84\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x1CWa\x04\x1Ba\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04UW\x81` \x01[a\x04Ba\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x04:W\x90P[P\x92P6`\0[\x82\x81\x10\x15a\x05\xC9W`\0\x85\x82\x81Q\x81\x10a\x04yWa\x04xa\x13)V[[` \x02` \x01\x01Q\x90P\x87\x87\x83\x81\x81\x10a\x04\x96Wa\x04\x95a\x13)V[[\x90P` \x02\x81\x01\x90a\x04\xA8\x91\x90a\x13gV[\x92P`\0\x83`@\x015\x90P\x80\x86\x01\x95P\x83`\0\x01` \x81\x01\x90a\x04\xCB\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81\x85\x80``\x01\x90a\x04\xF2\x91\x90a\x13\x8FV[`@Qa\x05\0\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x05=W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x05BV[``\x91P[P\x83`\0\x01\x84` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x81Q` \x85\x015\x17a\x05\xBCW\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R` `\x04R`\x17`$R\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`DR`\x84`\0\xFD[\x82`\x01\x01\x92PPPa\x04\\V[P\x824\x14a\x06\x0CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x03\x90a\x14\xA7V[`@Q\x80\x91\x03\x90\xFD[PPP\x92\x91PPV[`\0``C\x91P`\0\x84\x84\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06>Wa\x06=a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x06qW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x06\\W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\x07\xA1W`\0\x87\x87\x83\x81\x81\x10a\x06\x95Wa\x06\x94a\x13)V[[\x90P` \x02\x81\x01\x90a\x06\xA7\x91\x90a\x14\xC7V[\x92P\x82`\0\x01` \x81\x01\x90a\x06\xBC\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\x06\xE2\x91\x90a\x13\x8FV[`@Qa\x06\xF0\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x07-W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x072V[``\x91P[P\x86\x84\x81Q\x81\x10a\x07FWa\x07Ea\x13)V[[` \x02` \x01\x01\x81\x90R\x81\x92PPP\x80a\x07\x95W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x8C\x90a\x15;V[`@Q\x80\x91\x03\x90\xFD[\x81`\x01\x01\x91PPa\x06xV[PPP\x92P\x92\x90PV[`\0`\x01C\x03@\x90P\x90V[`\0F\x90P\x90V[`\0\x80``C\x92PC@\x91Pa\x07\xD6\x86\x86\x86a\t\xF4V[\x90P\x93P\x93P\x93\x90PV[`\0H\x90P\x90V[`\0C\x90P\x90V[`\0\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x161\x90P\x91\x90PV[`\0D\x90P\x90V[```\0\x83\x83\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08>Wa\x08=a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x08wW\x81` \x01[a\x08da\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x08\\W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\t\xDBW`\0\x84\x82\x81Q\x81\x10a\x08\x9BWa\x08\x9Aa\x13)V[[` \x02` \x01\x01Q\x90P\x86\x86\x83\x81\x81\x10a\x08\xB8Wa\x08\xB7a\x13)V[[\x90P` \x02\x81\x01\x90a\x08\xCA\x91\x90a\x15[V[\x92P\x82`\0\x01` \x81\x01\x90a\x08\xDF\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80`@\x01\x90a\t\x05\x91\x90a\x13\x8FV[`@Qa\t\x13\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\tPW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\tUV[``\x91P[P\x82`\0\x01\x83` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x80Q` \x84\x015\x17a\t\xCFW\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R` `\x04R`\x17`$R\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`DR`d`\0\xFD[\x81`\x01\x01\x91PPa\x08~V[PPP\x92\x91PPV[`\0E\x90P\x90V[`\0A\x90P\x90V[```\0\x83\x83\x90P\x90P\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x18Wa\n\x17a\x12\xFAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\nQW\x81` \x01[a\n>a\x0B\xD5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\n6W\x90P[P\x91P6`\0[\x82\x81\x10\x15a\x0B\x9CW`\0\x84\x82\x81Q\x81\x10a\nuWa\nta\x13)V[[` \x02` \x01\x01Q\x90P\x86\x86\x83\x81\x81\x10a\n\x92Wa\n\x91a\x13)V[[\x90P` \x02\x81\x01\x90a\n\xA4\x91\x90a\x14\xC7V[\x92P\x82`\0\x01` \x81\x01\x90a\n\xB9\x91\x90a\x11\xA7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x80` \x01\x90a\n\xDF\x91\x90a\x13\x8FV[`@Qa\n\xED\x92\x91\x90a\x141V[`\0`@Q\x80\x83\x03\x81`\0\x86Z\xF1\x91PP=\x80`\0\x81\x14a\x0B*W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x0B/V[``\x91P[P\x82`\0\x01\x83` \x01\x82\x90R\x82\x15\x15\x15\x15\x81RPPP\x87\x15a\x0B\x90W\x80`\0\x01Qa\x0B\x8FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x86\x90a\x15;V[`@Q\x80\x91\x03\x90\xFD[[\x81`\x01\x01\x91PPa\nXV[PPP\x93\x92PPPV[`\0\x80``a\x0B\xB7`\x01\x86\x86a\x07\xBFV[\x80\x93P\x81\x94P\x82\x95PPPP\x92P\x92P\x92V[`\0\x81@\x90P\x91\x90PV[`@Q\x80`@\x01`@R\x80`\0\x15\x15\x81R` \x01``\x81RP\x90V[`\0\x81\x90P\x91\x90PV[a\x0C\x04\x81a\x0B\xF1V[\x82RPPV[`\0` \x82\x01\x90Pa\x0C\x1F`\0\x83\x01\x84a\x0B\xFBV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x0CTWa\x0CSa\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CqWa\x0Cpa\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0C\x8DWa\x0C\x8Ca\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x0C\xABWa\x0C\xAAa\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xC9Wa\x0C\xC8a\x0C*V[[a\x0C\xD5\x85\x82\x86\x01a\x0C>V[\x92P\x92PP\x92P\x92\x90PV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0\x81\x15\x15\x90P\x91\x90PV[a\r\"\x81a\r\rV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\rbW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\rGV[\x83\x81\x11\x15a\rqW`\0\x84\x84\x01R[PPPPV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\r\x93\x82a\r(V[a\r\x9D\x81\x85a\r3V[\x93Pa\r\xAD\x81\x85` \x86\x01a\rDV[a\r\xB6\x81a\rwV[\x84\x01\x91PP\x92\x91PPV[`\0`@\x83\x01`\0\x83\x01Qa\r\xD9`\0\x86\x01\x82a\r\x19V[P` \x83\x01Q\x84\x82\x03` \x86\x01Ra\r\xF1\x82\x82a\r\x88V[\x91PP\x80\x91PP\x92\x91PPV[`\0a\x0E\n\x83\x83a\r\xC1V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0E*\x82a\x0C\xE1V[a\x0E4\x81\x85a\x0C\xECV[\x93P\x83` \x82\x02\x85\x01a\x0EF\x85a\x0C\xFDV[\x80`\0[\x85\x81\x10\x15a\x0E\x82W\x84\x84\x03\x89R\x81Qa\x0Ec\x85\x82a\r\xFEV[\x94Pa\x0En\x83a\x0E\x12V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x0EJV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\xAE\x81\x84a\x0E\x1FV[\x90P\x92\x91PPV[`\0\x80\x83`\x1F\x84\x01\x12a\x0E\xCCWa\x0E\xCBa\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xE9Wa\x0E\xE8a\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0F\x05Wa\x0F\x04a\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x0F#Wa\x0F\"a\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0FAWa\x0F@a\x0C*V[[a\x0FM\x85\x82\x86\x01a\x0E\xB6V[\x92P\x92PP\x92P\x92\x90PV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[`\0a\x0F\x91\x83\x83a\r\x88V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0F\xB1\x82a\x0FYV[a\x0F\xBB\x81\x85a\x0FdV[\x93P\x83` \x82\x02\x85\x01a\x0F\xCD\x85a\x0FuV[\x80`\0[\x85\x81\x10\x15a\x10\tW\x84\x84\x03\x89R\x81Qa\x0F\xEA\x85\x82a\x0F\x85V[\x94Pa\x0F\xF5\x83a\x0F\x99V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90Pa\x0F\xD1V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x100`\0\x83\x01\x85a\x0B\xFBV[\x81\x81\x03` \x83\x01Ra\x10B\x81\x84a\x0F\xA6V[\x90P\x93\x92PPPV[`\0\x81\x90P\x91\x90PV[a\x10^\x81a\x10KV[\x82RPPV[`\0` \x82\x01\x90Pa\x10y`\0\x83\x01\x84a\x10UV[\x92\x91PPV[a\x10\x88\x81a\r\rV[\x81\x14a\x10\x93W`\0\x80\xFD[PV[`\0\x815\x90Pa\x10\xA5\x81a\x10\x7FV[\x92\x91PPV[`\0\x80`\0`@\x84\x86\x03\x12\x15a\x10\xC4Wa\x10\xC3a\x0C%V[[`\0a\x10\xD2\x86\x82\x87\x01a\x10\x96V[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xF3Wa\x10\xF2a\x0C*V[[a\x10\xFF\x86\x82\x87\x01a\x0E\xB6V[\x92P\x92PP\x92P\x92P\x92V[`\0``\x82\x01\x90Pa\x11 `\0\x83\x01\x86a\x0B\xFBV[a\x11-` \x83\x01\x85a\x10UV[\x81\x81\x03`@\x83\x01Ra\x11?\x81\x84a\x0E\x1FV[\x90P\x94\x93PPPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x11t\x82a\x11IV[\x90P\x91\x90PV[a\x11\x84\x81a\x11iV[\x81\x14a\x11\x8FW`\0\x80\xFD[PV[`\0\x815\x90Pa\x11\xA1\x81a\x11{V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x11\xBDWa\x11\xBCa\x0C%V[[`\0a\x11\xCB\x84\x82\x85\x01a\x11\x92V[\x91PP\x92\x91PPV[`\0\x80\x83`\x1F\x84\x01\x12a\x11\xEAWa\x11\xE9a\x0C/V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x07Wa\x12\x06a\x0C4V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x12#Wa\x12\"a\x0C9V[[\x92P\x92\x90PV[`\0\x80` \x83\x85\x03\x12\x15a\x12AWa\x12@a\x0C%V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12_Wa\x12^a\x0C*V[[a\x12k\x85\x82\x86\x01a\x11\xD4V[\x92P\x92PP\x92P\x92\x90PV[a\x12\x80\x81a\x11iV[\x82RPPV[`\0` \x82\x01\x90Pa\x12\x9B`\0\x83\x01\x84a\x12wV[\x92\x91PPV[a\x12\xAA\x81a\x0B\xF1V[\x81\x14a\x12\xB5W`\0\x80\xFD[PV[`\0\x815\x90Pa\x12\xC7\x81a\x12\xA1V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x12\xE3Wa\x12\xE2a\x0C%V[[`\0a\x12\xF1\x84\x82\x85\x01a\x12\xB8V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x825`\x01`\x80\x03\x836\x03\x03\x81\x12a\x13\x83Wa\x13\x82a\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV[`\0\x80\x835`\x01` \x03\x846\x03\x03\x81\x12a\x13\xACWa\x13\xABa\x13XV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x13\xCEWa\x13\xCDa\x13]V[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15a\x13\xEAWa\x13\xE9a\x13bV[[P\x92P\x92\x90PV[`\0\x81\x90P\x92\x91PPV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\x14\x18\x83\x85a\x13\xF2V[\x93Pa\x14%\x83\x85\x84a\x13\xFDV[\x82\x84\x01\x90P\x93\x92PPPV[`\0a\x14>\x82\x84\x86a\x14\x0CV[\x91P\x81\x90P\x93\x92PPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FMulticall3: value mismatch\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x14\x91`\x1A\x83a\x14JV[\x91Pa\x14\x9C\x82a\x14[V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xC0\x81a\x14\x84V[\x90P\x91\x90PV[`\0\x825`\x01`@\x03\x836\x03\x03\x81\x12a\x14\xE3Wa\x14\xE2a\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV[\x7FMulticall3: call failed\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x15%`\x17\x83a\x14JV[\x91Pa\x150\x82a\x14\xEFV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15T\x81a\x15\x18V[\x90P\x91\x90PV[`\0\x825`\x01``\x03\x836\x03\x03\x81\x12a\x15wWa\x15va\x13XV[[\x80\x83\x01\x91PP\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xC0\x11z\x85\xEA.\x19~k\x81\x07\x8B\xE6\x8C\xF5\xDC\xDC\xAA\xDD\x96\x9Cmq\xBA\xAC\xDA3\xED\x9A(^AdsolcC\0\x08\x0C\x003",
    );
    /**```solidity
struct Call { address target; bytes callData; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call {
        pub target: alloy::sol_types::private::Address,
        pub callData: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call> for UnderlyingRustTuple<'_> {
            fn from(value: Call) -> Self {
                (value.target, value.callData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    callData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call {
            const NAME: &'static str = "Call";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call(address target,bytes callData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callData,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Call3 { address target; bool allowFailure; bytes callData; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call3 {
        pub target: alloy::sol_types::private::Address,
        pub allowFailure: bool,
        pub callData: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            bool,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call3> for UnderlyingRustTuple<'_> {
            fn from(value: Call3) -> Self {
                (value.target, value.allowFailure, value.callData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call3 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    allowFailure: tuple.1,
                    callData: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call3 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call3 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.allowFailure,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call3 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call3 {
            const NAME: &'static str = "Call3";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call3(address target,bool allowFailure,bytes callData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.allowFailure,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callData,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call3 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.allowFailure,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.allowFailure,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Call3Value { address target; bool allowFailure; uint256 value; bytes callData; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Call3Value {
        pub target: alloy::sol_types::private::Address,
        pub allowFailure: bool,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub callData: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            bool,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Call3Value> for UnderlyingRustTuple<'_> {
            fn from(value: Call3Value) -> Self {
                (value.target, value.allowFailure, value.value, value.callData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Call3Value {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    target: tuple.0,
                    allowFailure: tuple.1,
                    value: tuple.2,
                    callData: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Call3Value {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Call3Value {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.allowFailure,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callData,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Call3Value {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Call3Value {
            const NAME: &'static str = "Call3Value";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Call3Value(address target,bool allowFailure,uint256 value,bytes callData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.target,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.allowFailure,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.callData,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Call3Value {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.target,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.allowFailure,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.callData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.target,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.allowFailure,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.callData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Result { bool success; bytes returnData; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Result {
        pub success: bool,
        pub returnData: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (bool, alloy::sol_types::private::Bytes);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Result> for UnderlyingRustTuple<'_> {
            fn from(value: Result) -> Self {
                (value.success, value.returnData)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Result {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    success: tuple.0,
                    returnData: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Result {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Result {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.success,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.returnData,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Result {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Result {
            const NAME: &'static str = "Result";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Result(bool success,bytes returnData)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.success,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.returnData,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Result {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.success,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.returnData,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.success,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.returnData,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `aggregate((address,bytes)[])` and selector `0x252dba42`.
```solidity
function aggregate(Call[] memory calls) external payable returns (uint256 blockNumber, bytes[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregateCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`aggregate((address,bytes)[])`](aggregateCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregateReturn {
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        pub returnData: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregateCall> for UnderlyingRustTuple<'_> {
                fn from(value: aggregateCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for aggregateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: aggregateReturn) -> Self {
                    (value.blockNumber, value.returnData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for aggregateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        returnData: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for aggregateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = aggregateReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "aggregate((address,bytes)[])";
            const SELECTOR: [u8; 4] = [37u8, 45u8, 186u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `aggregate3((address,bool,bytes)[])` and selector `0x82ad56cb`.
```solidity
function aggregate3(Call3[] memory calls) external payable returns (Result[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregate3Call {
        pub calls: alloy::sol_types::private::Vec<
            <Call3 as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`aggregate3((address,bool,bytes)[])`](aggregate3Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregate3Return {
        pub returnData: alloy::sol_types::private::Vec<
            <Result as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call3>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call3 as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregate3Call> for UnderlyingRustTuple<'_> {
                fn from(value: aggregate3Call) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for aggregate3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Result as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregate3Return> for UnderlyingRustTuple<'_> {
                fn from(value: aggregate3Return) -> Self {
                    (value.returnData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for aggregate3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { returnData: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for aggregate3Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call3>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = aggregate3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "aggregate3((address,bool,bytes)[])";
            const SELECTOR: [u8; 4] = [130u8, 173u8, 86u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call3,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `aggregate3Value((address,bool,uint256,bytes)[])` and selector `0x174dea71`.
```solidity
function aggregate3Value(Call3Value[] memory calls) external payable returns (Result[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregate3ValueCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call3Value as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`aggregate3Value((address,bool,uint256,bytes)[])`](aggregate3ValueCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct aggregate3ValueReturn {
        pub returnData: alloy::sol_types::private::Vec<
            <Result as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<Call3Value>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call3Value as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregate3ValueCall> for UnderlyingRustTuple<'_> {
                fn from(value: aggregate3ValueCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for aggregate3ValueCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Result as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<aggregate3ValueReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: aggregate3ValueReturn) -> Self {
                    (value.returnData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for aggregate3ValueReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { returnData: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for aggregate3ValueCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call3Value>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = aggregate3ValueReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "aggregate3Value((address,bool,uint256,bytes)[])";
            const SELECTOR: [u8; 4] = [23u8, 77u8, 234u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call3Value,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `blockAndAggregate((address,bytes)[])` and selector `0xc3077fa9`.
```solidity
function blockAndAggregate(Call[] memory calls) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct blockAndAggregateCall {
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`blockAndAggregate((address,bytes)[])`](blockAndAggregateCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct blockAndAggregateReturn {
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        pub returnData: alloy::sol_types::private::Vec<
            <Result as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockAndAggregateCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockAndAggregateCall) -> Self {
                    (value.calls,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockAndAggregateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { calls: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<Result>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    <Result as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockAndAggregateReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockAndAggregateReturn) -> Self {
                    (value.blockNumber, value.blockHash, value.returnData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockAndAggregateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        blockHash: tuple.1,
                        returnData: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockAndAggregateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<Call>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blockAndAggregateReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<Result>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockAndAggregate((address,bytes)[])";
            const SELECTOR: [u8; 4] = [195u8, 7u8, 127u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBasefee()` and selector `0x3e64a696`.
```solidity
function getBasefee() external view returns (uint256 basefee);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBasefeeCall {}
    ///Container type for the return parameters of the [`getBasefee()`](getBasefeeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBasefeeReturn {
        pub basefee: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBasefeeCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBasefeeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBasefeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBasefeeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBasefeeReturn) -> Self {
                    (value.basefee,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBasefeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { basefee: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBasefeeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBasefeeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBasefee()";
            const SELECTOR: [u8; 4] = [62u8, 100u8, 166u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBlockHash(uint256)` and selector `0xee82ac5e`.
```solidity
function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBlockHashCall {
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getBlockHash(uint256)`](getBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBlockHashReturn {
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBlockHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBlockHashCall) -> Self {
                    (value.blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockNumber: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBlockHashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBlockHashReturn) -> Self {
                    (value.blockHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBlockHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBlockHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBlockHash(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 130u8, 172u8, 94u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBlockNumber()` and selector `0x42cbb15c`.
```solidity
function getBlockNumber() external view returns (uint256 blockNumber);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBlockNumberCall {}
    ///Container type for the return parameters of the [`getBlockNumber()`](getBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getBlockNumberReturn {
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBlockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBlockNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBlockNumberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBlockNumberReturn) -> Self {
                    (value.blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockNumber: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBlockNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBlockNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBlockNumber()";
            const SELECTOR: [u8; 4] = [66u8, 203u8, 177u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getChainId()` and selector `0x3408e470`.
```solidity
function getChainId() external view returns (uint256 chainid);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getChainIdCall {}
    ///Container type for the return parameters of the [`getChainId()`](getChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getChainIdReturn {
        pub chainid: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdReturn) -> Self {
                    (value.chainid,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainid: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getChainId()";
            const SELECTOR: [u8; 4] = [52u8, 8u8, 228u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentBlockCoinbase()` and selector `0xa8b0574e`.
```solidity
function getCurrentBlockCoinbase() external view returns (address coinbase);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockCoinbaseCall {}
    ///Container type for the return parameters of the [`getCurrentBlockCoinbase()`](getCurrentBlockCoinbaseCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockCoinbaseReturn {
        pub coinbase: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockCoinbaseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockCoinbaseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockCoinbaseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockCoinbaseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockCoinbaseReturn) -> Self {
                    (value.coinbase,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockCoinbaseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { coinbase: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentBlockCoinbaseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentBlockCoinbaseReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentBlockCoinbase()";
            const SELECTOR: [u8; 4] = [168u8, 176u8, 87u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentBlockDifficulty()` and selector `0x72425d9d`.
```solidity
function getCurrentBlockDifficulty() external view returns (uint256 difficulty);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockDifficultyCall {}
    ///Container type for the return parameters of the [`getCurrentBlockDifficulty()`](getCurrentBlockDifficultyCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockDifficultyReturn {
        pub difficulty: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockDifficultyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockDifficultyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockDifficultyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockDifficultyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockDifficultyReturn) -> Self {
                    (value.difficulty,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockDifficultyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { difficulty: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentBlockDifficultyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentBlockDifficultyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentBlockDifficulty()";
            const SELECTOR: [u8; 4] = [114u8, 66u8, 93u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentBlockGasLimit()` and selector `0x86d516e8`.
```solidity
function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockGasLimitCall {}
    ///Container type for the return parameters of the [`getCurrentBlockGasLimit()`](getCurrentBlockGasLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockGasLimitReturn {
        pub gaslimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockGasLimitCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockGasLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockGasLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockGasLimitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockGasLimitReturn) -> Self {
                    (value.gaslimit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockGasLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { gaslimit: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentBlockGasLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentBlockGasLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentBlockGasLimit()";
            const SELECTOR: [u8; 4] = [134u8, 213u8, 22u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentBlockTimestamp()` and selector `0x0f28c97d`.
```solidity
function getCurrentBlockTimestamp() external view returns (uint256 timestamp);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockTimestampCall {}
    ///Container type for the return parameters of the [`getCurrentBlockTimestamp()`](getCurrentBlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getCurrentBlockTimestampReturn {
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockTimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentBlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentBlockTimestampReturn) -> Self {
                    (value.timestamp,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentBlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { timestamp: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentBlockTimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentBlockTimestampReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentBlockTimestamp()";
            const SELECTOR: [u8; 4] = [15u8, 40u8, 201u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getEthBalance(address)` and selector `0x4d2301cc`.
```solidity
function getEthBalance(address addr) external view returns (uint256 balance);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getEthBalanceCall {
        pub addr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getEthBalance(address)`](getEthBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getEthBalanceReturn {
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEthBalanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: getEthBalanceCall) -> Self {
                    (value.addr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getEthBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { addr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEthBalanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getEthBalanceReturn) -> Self {
                    (value.balance,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getEthBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { balance: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEthBalanceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getEthBalanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEthBalance(address)";
            const SELECTOR: [u8; 4] = [77u8, 35u8, 1u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getLastBlockHash()` and selector `0x27e86d6e`.
```solidity
function getLastBlockHash() external view returns (bytes32 blockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getLastBlockHashCall {}
    ///Container type for the return parameters of the [`getLastBlockHash()`](getLastBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct getLastBlockHashReturn {
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastBlockHashReturn) -> Self {
                    (value.blockHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getLastBlockHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastBlockHash()";
            const SELECTOR: [u8; 4] = [39u8, 232u8, 109u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tryAggregate(bool,(address,bytes)[])` and selector `0xbce38bd7`.
```solidity
function tryAggregate(bool requireSuccess, Call[] memory calls) external payable returns (Result[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tryAggregateCall {
        pub requireSuccess: bool,
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`tryAggregate(bool,(address,bytes)[])`](tryAggregateCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tryAggregateReturn {
        pub returnData: alloy::sol_types::private::Vec<
            <Result as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<Call>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tryAggregateCall> for UnderlyingRustTuple<'_> {
                fn from(value: tryAggregateCall) -> Self {
                    (value.requireSuccess, value.calls)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tryAggregateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requireSuccess: tuple.0,
                        calls: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Result as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tryAggregateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tryAggregateReturn) -> Self {
                    (value.returnData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tryAggregateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { returnData: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tryAggregateCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<Call>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tryAggregateReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Result>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tryAggregate(bool,(address,bytes)[])";
            const SELECTOR: [u8; 4] = [188u8, 227u8, 139u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.requireSuccess,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tryBlockAndAggregate(bool,(address,bytes)[])` and selector `0x399542e9`.
```solidity
function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tryBlockAndAggregateCall {
        pub requireSuccess: bool,
        pub calls: alloy::sol_types::private::Vec<
            <Call as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`tryBlockAndAggregate(bool,(address,bytes)[])`](tryBlockAndAggregateCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct tryBlockAndAggregateReturn {
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        pub returnData: alloy::sol_types::private::Vec<
            <Result as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<Call>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::Vec<
                    <Call as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tryBlockAndAggregateCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: tryBlockAndAggregateCall) -> Self {
                    (value.requireSuccess, value.calls)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tryBlockAndAggregateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        requireSuccess: tuple.0,
                        calls: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<Result>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    <Result as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tryBlockAndAggregateReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: tryBlockAndAggregateReturn) -> Self {
                    (value.blockNumber, value.blockHash, value.returnData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tryBlockAndAggregateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockNumber: tuple.0,
                        blockHash: tuple.1,
                        returnData: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tryBlockAndAggregateCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Array<Call>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tryBlockAndAggregateReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<Result>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tryBlockAndAggregate(bool,(address,bytes)[])";
            const SELECTOR: [u8; 4] = [57u8, 149u8, 66u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.requireSuccess,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        Call,
                    > as alloy_sol_types::SolType>::tokenize(&self.calls),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Multicall3`](self) function calls.
    pub enum Multicall3Calls {
        aggregate(aggregateCall),
        aggregate3(aggregate3Call),
        aggregate3Value(aggregate3ValueCall),
        blockAndAggregate(blockAndAggregateCall),
        getBasefee(getBasefeeCall),
        getBlockHash(getBlockHashCall),
        getBlockNumber(getBlockNumberCall),
        getChainId(getChainIdCall),
        getCurrentBlockCoinbase(getCurrentBlockCoinbaseCall),
        getCurrentBlockDifficulty(getCurrentBlockDifficultyCall),
        getCurrentBlockGasLimit(getCurrentBlockGasLimitCall),
        getCurrentBlockTimestamp(getCurrentBlockTimestampCall),
        getEthBalance(getEthBalanceCall),
        getLastBlockHash(getLastBlockHashCall),
        tryAggregate(tryAggregateCall),
        tryBlockAndAggregate(tryBlockAndAggregateCall),
    }
    #[automatically_derived]
    impl Multicall3Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [15u8, 40u8, 201u8, 125u8],
            [23u8, 77u8, 234u8, 113u8],
            [37u8, 45u8, 186u8, 66u8],
            [39u8, 232u8, 109u8, 110u8],
            [52u8, 8u8, 228u8, 112u8],
            [57u8, 149u8, 66u8, 233u8],
            [62u8, 100u8, 166u8, 150u8],
            [66u8, 203u8, 177u8, 92u8],
            [77u8, 35u8, 1u8, 204u8],
            [114u8, 66u8, 93u8, 157u8],
            [130u8, 173u8, 86u8, 203u8],
            [134u8, 213u8, 22u8, 232u8],
            [168u8, 176u8, 87u8, 78u8],
            [188u8, 227u8, 139u8, 215u8],
            [195u8, 7u8, 127u8, 169u8],
            [238u8, 130u8, 172u8, 94u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Multicall3Calls {
        const NAME: &'static str = "Multicall3Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::aggregate(_) => {
                    <aggregateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::aggregate3(_) => {
                    <aggregate3Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::aggregate3Value(_) => {
                    <aggregate3ValueCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockAndAggregate(_) => {
                    <blockAndAggregateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBasefee(_) => {
                    <getBasefeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBlockHash(_) => {
                    <getBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBlockNumber(_) => {
                    <getBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getChainId(_) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentBlockCoinbase(_) => {
                    <getCurrentBlockCoinbaseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentBlockDifficulty(_) => {
                    <getCurrentBlockDifficultyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentBlockGasLimit(_) => {
                    <getCurrentBlockGasLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentBlockTimestamp(_) => {
                    <getCurrentBlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEthBalance(_) => {
                    <getEthBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getLastBlockHash(_) => {
                    <getLastBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tryAggregate(_) => {
                    <tryAggregateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tryBlockAndAggregate(_) => {
                    <tryBlockAndAggregateCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<Multicall3Calls>] = &[
                {
                    fn getCurrentBlockTimestamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getCurrentBlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getCurrentBlockTimestamp)
                    }
                    getCurrentBlockTimestamp
                },
                {
                    fn aggregate3Value(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <aggregate3ValueCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::aggregate3Value)
                    }
                    aggregate3Value
                },
                {
                    fn aggregate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <aggregateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::aggregate)
                    }
                    aggregate
                },
                {
                    fn getLastBlockHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getLastBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getLastBlockHash)
                    }
                    getLastBlockHash
                },
                {
                    fn getChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getChainId)
                    }
                    getChainId
                },
                {
                    fn tryBlockAndAggregate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <tryBlockAndAggregateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::tryBlockAndAggregate)
                    }
                    tryBlockAndAggregate
                },
                {
                    fn getBasefee(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getBasefeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getBasefee)
                    }
                    getBasefee
                },
                {
                    fn getBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getBlockNumber)
                    }
                    getBlockNumber
                },
                {
                    fn getEthBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getEthBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getEthBalance)
                    }
                    getEthBalance
                },
                {
                    fn getCurrentBlockDifficulty(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getCurrentBlockDifficultyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getCurrentBlockDifficulty)
                    }
                    getCurrentBlockDifficulty
                },
                {
                    fn aggregate3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <aggregate3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::aggregate3)
                    }
                    aggregate3
                },
                {
                    fn getCurrentBlockGasLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getCurrentBlockGasLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getCurrentBlockGasLimit)
                    }
                    getCurrentBlockGasLimit
                },
                {
                    fn getCurrentBlockCoinbase(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getCurrentBlockCoinbaseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getCurrentBlockCoinbase)
                    }
                    getCurrentBlockCoinbase
                },
                {
                    fn tryAggregate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <tryAggregateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::tryAggregate)
                    }
                    tryAggregate
                },
                {
                    fn blockAndAggregate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <blockAndAggregateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::blockAndAggregate)
                    }
                    blockAndAggregate
                },
                {
                    fn getBlockHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Multicall3Calls> {
                        <getBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(Multicall3Calls::getBlockHash)
                    }
                    getBlockHash
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::aggregate(inner) => {
                    <aggregateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::aggregate3(inner) => {
                    <aggregate3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::aggregate3Value(inner) => {
                    <aggregate3ValueCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockAndAggregate(inner) => {
                    <blockAndAggregateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBasefee(inner) => {
                    <getBasefeeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getBlockHash(inner) => {
                    <getBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBlockNumber(inner) => {
                    <getBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getCurrentBlockCoinbase(inner) => {
                    <getCurrentBlockCoinbaseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentBlockDifficulty(inner) => {
                    <getCurrentBlockDifficultyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentBlockGasLimit(inner) => {
                    <getCurrentBlockGasLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentBlockTimestamp(inner) => {
                    <getCurrentBlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEthBalance(inner) => {
                    <getEthBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getLastBlockHash(inner) => {
                    <getLastBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tryAggregate(inner) => {
                    <tryAggregateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tryBlockAndAggregate(inner) => {
                    <tryBlockAndAggregateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::aggregate(inner) => {
                    <aggregateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::aggregate3(inner) => {
                    <aggregate3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::aggregate3Value(inner) => {
                    <aggregate3ValueCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockAndAggregate(inner) => {
                    <blockAndAggregateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBasefee(inner) => {
                    <getBasefeeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBlockHash(inner) => {
                    <getBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBlockNumber(inner) => {
                    <getBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentBlockCoinbase(inner) => {
                    <getCurrentBlockCoinbaseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentBlockDifficulty(inner) => {
                    <getCurrentBlockDifficultyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentBlockGasLimit(inner) => {
                    <getCurrentBlockGasLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentBlockTimestamp(inner) => {
                    <getCurrentBlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEthBalance(inner) => {
                    <getEthBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getLastBlockHash(inner) => {
                    <getLastBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tryAggregate(inner) => {
                    <tryAggregateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tryBlockAndAggregate(inner) => {
                    <tryBlockAndAggregateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Multicall3`](self) contract instance.

See the [wrapper's documentation](`Multicall3Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> Multicall3Instance<T, P, N> {
        Multicall3Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<Multicall3Instance<T, P, N>>,
    > {
        Multicall3Instance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        Multicall3Instance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Multicall3`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Multicall3`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct Multicall3Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for Multicall3Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("Multicall3Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Multicall3Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Multicall3`](self) contract instance.

See the [wrapper's documentation](`Multicall3Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<Multicall3Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> Multicall3Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> Multicall3Instance<T, P, N> {
            Multicall3Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Multicall3Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`aggregate`] function.
        pub fn aggregate(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, aggregateCall, N> {
            self.call_builder(&aggregateCall { calls })
        }
        ///Creates a new call builder for the [`aggregate3`] function.
        pub fn aggregate3(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call3 as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, aggregate3Call, N> {
            self.call_builder(&aggregate3Call { calls })
        }
        ///Creates a new call builder for the [`aggregate3Value`] function.
        pub fn aggregate3Value(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call3Value as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, aggregate3ValueCall, N> {
            self.call_builder(&aggregate3ValueCall { calls })
        }
        ///Creates a new call builder for the [`blockAndAggregate`] function.
        pub fn blockAndAggregate(
            &self,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, blockAndAggregateCall, N> {
            self.call_builder(&blockAndAggregateCall { calls })
        }
        ///Creates a new call builder for the [`getBasefee`] function.
        pub fn getBasefee(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBasefeeCall, N> {
            self.call_builder(&getBasefeeCall {})
        }
        ///Creates a new call builder for the [`getBlockHash`] function.
        pub fn getBlockHash(
            &self,
            blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBlockHashCall, N> {
            self.call_builder(&getBlockHashCall { blockNumber })
        }
        ///Creates a new call builder for the [`getBlockNumber`] function.
        pub fn getBlockNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBlockNumberCall, N> {
            self.call_builder(&getBlockNumberCall {})
        }
        ///Creates a new call builder for the [`getChainId`] function.
        pub fn getChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getChainIdCall, N> {
            self.call_builder(&getChainIdCall {})
        }
        ///Creates a new call builder for the [`getCurrentBlockCoinbase`] function.
        pub fn getCurrentBlockCoinbase(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentBlockCoinbaseCall, N> {
            self.call_builder(&getCurrentBlockCoinbaseCall {})
        }
        ///Creates a new call builder for the [`getCurrentBlockDifficulty`] function.
        pub fn getCurrentBlockDifficulty(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentBlockDifficultyCall, N> {
            self.call_builder(&getCurrentBlockDifficultyCall {})
        }
        ///Creates a new call builder for the [`getCurrentBlockGasLimit`] function.
        pub fn getCurrentBlockGasLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentBlockGasLimitCall, N> {
            self.call_builder(&getCurrentBlockGasLimitCall {})
        }
        ///Creates a new call builder for the [`getCurrentBlockTimestamp`] function.
        pub fn getCurrentBlockTimestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentBlockTimestampCall, N> {
            self.call_builder(&getCurrentBlockTimestampCall {})
        }
        ///Creates a new call builder for the [`getEthBalance`] function.
        pub fn getEthBalance(
            &self,
            addr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getEthBalanceCall, N> {
            self.call_builder(&getEthBalanceCall { addr })
        }
        ///Creates a new call builder for the [`getLastBlockHash`] function.
        pub fn getLastBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getLastBlockHashCall, N> {
            self.call_builder(&getLastBlockHashCall {})
        }
        ///Creates a new call builder for the [`tryAggregate`] function.
        pub fn tryAggregate(
            &self,
            requireSuccess: bool,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, tryAggregateCall, N> {
            self.call_builder(
                &tryAggregateCall {
                    requireSuccess,
                    calls,
                },
            )
        }
        ///Creates a new call builder for the [`tryBlockAndAggregate`] function.
        pub fn tryBlockAndAggregate(
            &self,
            requireSuccess: bool,
            calls: alloy::sol_types::private::Vec<
                <Call as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, tryBlockAndAggregateCall, N> {
            self.call_builder(
                &tryBlockAndAggregateCall {
                    requireSuccess,
                    calls,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > Multicall3Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
