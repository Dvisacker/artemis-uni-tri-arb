/**

Generated by the following Solidity interface...
```solidity
interface WETH {
    event Approval(address indexed owner, address indexed spender, uint256 amount);
    event Deposit(address indexed from, uint256 amount);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Withdrawal(address indexed to, uint256 amount);

    receive() external payable;

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function allowance(address, address) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address) external view returns (uint256);
    function decimals() external view returns (uint8);
    function deposit() external payable;
    function name() external view returns (string memory);
    function nonces(address) external view returns (uint256);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function withdraw(uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "DOMAIN_SEPARATOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "deposit",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonces",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "withdraw",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Deposit",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Withdrawal",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod WETH {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60e060405234610042576100116101a1565b610019610047565b6116596106aa82396080518161058e015260a05181610c70015260c05181610ca3015261165990f35b61004d565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007990610051565b810190811060018060401b0382111761009157604052565b61005b565b906100a96100a2610047565b928361006f565b565b60018060401b0381116100c7576100c3602091610051565b0190565b61005b565b906100de6100d9836100ab565b610096565b918252565b5f7f5772617070656420457468657200000000000000000000000000000000000000910152565b610114600d6100cc565b90610121602083016100e3565b565b61012b61010a565b90565b5f7f5745544800000000000000000000000000000000000000000000000000000000910152565b61015f60046100cc565b9061016c6020830161012e565b565b610176610155565b90565b90565b60ff1690565b90565b61019961019461019e92610179565b610182565b61017c565b90565b6101c46101ac610123565b6101b461016e565b6101be6012610185565b9161041a565b565b5190565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156101fe575b60208310146101f957565b6101ca565b91607f16916101ee565b5f5260205f2090565b601f602091010490565b1b90565b9190600861023a9102916102345f198461021b565b9261021b565b9181191691161790565b90565b61025b61025661026092610244565b610182565b610244565b90565b90565b919061027c61027761028493610247565b610263565b90835461021f565b9055565b5f90565b61029e91610298610288565b91610266565b565b5b8181106102ac575050565b806102b95f60019361028c565b016102a1565b9190601f81116102cf575b505050565b6102db61030093610208565b9060206102e784610211565b83019310610308575b6102f990610211565b01906102a0565b5f80806102ca565b91506102f9819290506102f0565b1c90565b9061032a905f1990600802610316565b191690565b816103399161031a565b906002021790565b9061034b816101c6565b9060018060401b0382116104095761036d8261036785546101de565b856102bf565b602090601f83116001146103a157918091610390935f92610395575b505061032f565b90555b565b90915001515f80610389565b601f198316916103b085610208565b925f5b8181106103f1575091600293918560019694106103d7575b50505002019055610393565b6103e7910151601f84169061031a565b90555f80806103cb565b919360206001819287870151815501950192016103b3565b61005b565b9061041891610341565b565b9061042861042f925f61040e565b600161040e565b6080524660a05261043e6105ef565b60c052565b5f90565b90565b60209181520190565b5f5260205f2090565b905f929180549061047661046f836101de565b809461044a565b916001811690815f146104cd5750600114610491575b505050565b61049e9192939450610453565b915f925b8184106104b557505001905f808061048c565b600181602092959395548486015201910192906104a2565b92949550505060ff19168252151560200201905f808061048c565b906104f29161045c565b90565b9061051561050e92610505610047565b938480926104e8565b038361006f565b565b610520906104f5565b90565b60200190565b5190565b60018060a01b031690565b61054c6105476105519261052d565b610182565b61052d565b90565b61055d90610538565b90565b61056990610554565b90565b90565b6105789061056c565b9052565b61058590610244565b9052565b6105929061052d565b90565b61059e90610589565b9052565b909594926105ed946105dc6105e6926105d26080966105c860a088019c5f89019061056f565b602087019061056f565b604085019061056f565b606083019061057c565b0190610595565b565b6105f7610443565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61069361062d6106285f610447565b610517565b61063f61063982610529565b91610523565b20916106847fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc64661066f30610560565b91610678610047565b968795602087016105a2565b6020820181038252038261006f565b6106a561069f82610529565b91610523565b209056fe6080604052600436101561001d575b3661099b5761001b61121d565b005b6100275f35610106565b806306fdde0314610101578063095ea7b3146100fc57806318160ddd146100f757806323b872dd146100f25780632e1a7d4d146100ed578063313ce567146100e85780633644e515146100e357806370a08231146100de5780637ecebe00146100d957806395d89b41146100d4578063a9059cbb146100cf578063d0e30db0146100ca578063d505accf146100c55763dd62ed3e0361000e57610965565b6108c7565b6107e8565b6107b2565b61077d565b610739565b6106eb565b610632565b6105d8565b610559565b610500565b610491565b6103fd565b610314565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012457565b610116565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610170575b602083101461016b57565b61013c565b91607f1691610160565b60209181520190565b5f5260205f2090565b905f92918054906101a661019f83610150565b809461017a565b916001811690815f146101fd57506001146101c1575b505050565b6101ce9192939450610183565b915f925b8184106101e557505001905f80806101bc565b600181602092959395548486015201910192906101d2565b92949550505060ff19168252151560200201905f80806101bc565b906102229161018c565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061024d90610225565b810190811067ffffffffffffffff82111761026757604052565b61022f565b9061028c6102859261027c61010c565b93848092610218565b0383610243565b565b905f106102a15761029e9061026c565b90565b610129565b6102b05f8061028e565b90565b5190565b60209181520190565b90825f9392825e0152565b6102ea6102f36020936102f8936102e1816102b3565b938480936102b7565b958691016102c0565b610225565b0190565b6103119160208201915f8184039101526102cb565b90565b346103445761032436600461011a565b61034061032f6102a6565b61033761010c565b918291826102fc565b0390f35b610112565b60018060a01b031690565b61035d90610349565b90565b61036981610354565b0361037057565b5f80fd5b9050359061038182610360565b565b90565b61038f81610383565b0361039657565b5f80fd5b905035906103a782610386565b565b91906040838203126103d157806103c56103ce925f8601610374565b9360200161039a565b90565b610116565b151590565b6103e4906103d6565b9052565b91906103fb905f602085019401906103db565b565b3461042e5761042a6104196104133660046103a9565b906109fd565b61042161010c565b918291826103e8565b0390f35b610112565b1c90565b90565b61044a90600861044f9302610433565b610437565b90565b9061045d915461043a565b90565b61046c60025f90610452565b90565b61047890610383565b9052565b919061048f905f6020850194019061046f565b565b346104c1576104a136600461011a565b6104bd6104ac610460565b6104b461010c565b9182918261047c565b0390f35b610112565b90916060828403126104fb576104f86104e1845f8501610374565b936104ef8160208601610374565b9360400161039a565b90565b610116565b346105315761052d61051c6105163660046104c6565b91610ae7565b61052461010c565b918291826103e8565b0390f35b610112565b9060208282031261054f5761054c915f0161039a565b90565b610116565b5f0190565b346105875761057161056c366004610536565b610bfe565b61057961010c565b8061058381610554565b0390f35b610112565b7f000000000000000000000000000000000000000000000000000000000000000090565b60ff1690565b6105bf906105b0565b9052565b91906105d6905f602085019401906105b6565b565b34610608576105e836600461011a565b6106046105f361058c565b6105fb61010c565b918291826105c3565b0390f35b610112565b90565b6106199061060d565b9052565b9190610630905f60208501940190610610565b565b346106625761064236600461011a565b61065e61064d610c5e565b61065561010c565b9182918261061d565b0390f35b610112565b906020828203126106805761067d915f01610374565b90565b610116565b90565b61069c6106976106a192610349565b610685565b610349565b90565b6106ad90610688565b90565b6106b9906106a4565b90565b906106c6906106b0565b5f5260205260405f2090565b6106e8906106e36003915f926106bc565b610452565b90565b3461071b57610717610706610701366004610667565b6106d2565b61070e61010c565b9182918261047c565b0390f35b610112565b610736906107316005915f926106bc565b610452565b90565b346107695761076561075461074f366004610667565b610720565b61075c61010c565b9182918261047c565b0390f35b610112565b61077a60015f9061028e565b90565b346107ad5761078d36600461011a565b6107a961079861076e565b6107a061010c565b918291826102fc565b0390f35b610112565b346107e3576107df6107ce6107c83660046103a9565b90610cd3565b6107d661010c565b918291826103e8565b0390f35b610112565b6107f336600461011a565b6107fb610d81565b61080361010c565b8061080d81610554565b0390f35b61081a816105b0565b0361082157565b5f80fd5b9050359061083282610811565b565b61083d8161060d565b0361084457565b5f80fd5b9050359061085582610834565b565b60e0818303126108c25761086d825f8301610374565b9261087b8360208401610374565b92610889816040850161039a565b92610897826060830161039a565b926108bf6108a88460808501610825565b936108b68160a08601610848565b9360c001610848565b90565b610116565b346108fc576108e66108da366004610857565b9594909493919361103a565b6108ee61010c565b806108f881610554565b0390f35b610112565b9190604083820312610929578061091d610926925f8601610374565b93602001610374565b90565b610116565b90610938906106b0565b5f5260205260405f2090565b61095d610962926109586004935f9461092e565b6106bc565b610452565b90565b346109965761099261098161097b366004610901565b90610944565b61098961010c565b9182918261047c565b0390f35b610112565b5f80fd5b5f90565b5f1b90565b906109b45f19916109a3565b9181191691161790565b6109d26109cd6109d792610383565b610685565b610383565b90565b90565b906109f26109ed6109f9926109be565b6109da565b82546109a8565b9055565b90610a0661099f565b50610a2681610a21610a1a6004339061092e565b85906106bc565b6109dd565b33919091610a72610a60610a5a7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936106b0565b936106b0565b93610a6961010c565b9182918261047c565b0390a3600190565b5f1c90565b610a8b610a9091610a7a565b610437565b90565b610a9d9054610a7f565b90565b634e487b7160e01b5f52601160045260245ffd5b610ac3610ac991939293610383565b92610383565b8203918211610ad457565b610aa0565b90610ae49101610383565b90565b919091610af261099f565b50610b11610b0c610b056004849061092e565b33906106bc565b610a93565b80610b25610b1f5f19610383565b91610383565b03610bcf575b50610b5482610b4e610b3f600385906106bc565b91610b4983610a93565b610ab4565b906109dd565b610b7c82610b76610b67600387906106bc565b91610b7183610a93565b610ad9565b906109dd565b919091610bc7610bb5610baf7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b93610bbe61010c565b9182918261047c565b0390a3600190565b610bdd610bf8918490610ab4565b610bf3610bec6004859061092e565b33906106bc565b6109dd565b5f610b2b565b610c5890610c0d338290611235565b338190610c4f610c3d7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65926106b0565b92610c4661010c565b9182918261047c565b0390a233611355565b565b5f90565b610c66610c5a565b5046610c9a610c947f0000000000000000000000000000000000000000000000000000000000000000610383565b91610383565b145f14610cc6577f00000000000000000000000000000000000000000000000000000000000000005b90565b610cce6114a5565b610cc3565b90610cdc61099f565b50610d0581610cff610cf0600333906106bc565b91610cfa83610a93565b610ab4565b906109dd565b610d2d81610d27610d18600386906106bc565b91610d2283610a93565b610ad9565b906109dd565b33919091610d79610d67610d617fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b93610d7061010c565b9182918261047c565b0390a3600190565b610d8c333490611584565b333490610dce610dbc7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c926106b0565b92610dc561010c565b9182918261047c565b0390a2565b5f7f5045524d49545f444541444c494e455f45585049524544000000000000000000910152565b610e0760176020926102b7565b610e1081610dd3565b0190565b610e299060208101905f818303910152610dfa565b90565b15610e3357565b610e3b61010c565b62461bcd60e51b815280610e5160048201610e14565b0390fd5b6001610e619101610383565b90565b610e6d90610354565b9052565b9194610eb9610ec392989795610eaf60a096610ea5610eca9a610e9b60c08a019e5f8b0190610610565b6020890190610e64565b6040870190610e64565b606085019061046f565b608083019061046f565b019061046f565b565b60200190565b5190565b905090565b5f61190160f01b910152565b610ef360028092610ed6565b610efc81610edb565b0190565b90565b610f0f610f149161060d565b610f00565b9052565b6020809392610f33610f2c610f3b94610ee7565b8092610f03565b018092610f03565b0190565b610f74610f7b94610f6a606094989795610f60608086019a5f870190610610565b60208501906105b6565b6040830190610610565b0190610610565b565b610f8561010c565b3d5f823e3d90fd5b90565b610fa4610f9f610fa992610f8d565b610685565b610349565b90565b610fb590610f90565b90565b5f7f494e56414c49445f5349474e4552000000000000000000000000000000000000910152565b610fec600e6020926102b7565b610ff581610fb8565b0190565b61100e9060208101905f818303910152610fdf565b90565b1561101857565b61102061010c565b62461bcd60e51b81528061103660048201610ff9565b0390fd5b936111475f939692976020956110638161105c61105642610383565b91610383565b1015610e2c565b6111218a6110e98a6110db8d611077610c5e565b967f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9936110a88197939160056106bc565b6110c46110b482610a93565b916110be83610e55565b906109dd565b91926110ce61010c565b9760209689978801610e71565b8b8201810382520382610243565b6110fb6110f582610ed2565b91610ecc565b209161111361110861010c565b9384928b8401610f18565b898201810382520382610243565b61113361112d82610ed2565b91610ecc565b20929361113e61010c565b94859485610f3f565b838052039060015afa15611218576111a96111625f516109a3565b8061117d6111776111725f610fac565b610354565b91610354565b1415806111f9575b61118e90611011565b6111a461119d8592600461092e565b86906106bc565b6109dd565b9190916111f46111e26111dc7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936106b0565b936106b0565b936111eb61010c565b9182918261047c565b0390a3565b5061118e8161121061120a86610354565b91610354565b149050611185565b610f7d565b611225610d81565b565b906112329103610383565b90565b61125d82611257611248600385906106bc565b9161125283610a93565b610ab4565b906109dd565b61127a6112738361126e6002610a93565b611227565b60026109dd565b906112845f610fac565b90916112ce6112bc6112b67fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b936112c561010c565b9182918261047c565b0390a3565b5f7f4554485f5452414e534645525f4641494c454400000000000000000000000000910152565b61130760136020926102b7565b611310816112d3565b0190565b6113299060208101905f8183039101526112fa565b90565b1561133357565b61133b61010c565b62461bcd60e51b81528061135160048201611314565b0390fd5b5f808061136e94819461136661099f565b505af161132c565b565b90565b60209181520190565b5f5260205f2090565b905f929180549061139f61139883610150565b8094611373565b916001811690815f146113f657506001146113ba575b505050565b6113c7919293945061137c565b915f925b8184106113de57505001905f80806113b5565b600181602092959395548486015201910192906113cb565b92949550505060ff19168252151560200201905f80806113b5565b9061141b91611385565b90565b9061143e6114379261142e61010c565b93848092611411565b0383610243565b565b6114499061141e565b90565b611455906106a4565b90565b909594926114a39461149261149c9261148860809661147e60a088019c5f890190610610565b6020870190610610565b6040850190610610565b606083019061046f565b0190610e64565b565b6114ad610c5a565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115496114e36114de5f611370565b611440565b6114f56114ef82610ed2565b91610ecc565b209161153a7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6466115253061144c565b9161152e61010c565b96879560208701611458565b60208201810382520382610243565b61155b61155582610ed2565b91610ecc565b2090565b61156e61157491939293610383565b92610383565b820180921161157f57565b610aa0565b906115a261159b826115966002610a93565b61155f565b60026109dd565b6115ca816115c46115b5600386906106bc565b916115bf83610a93565b610ad9565b906109dd565b6115d35f610fac565b91909161161e61160c6116067fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b9361161561010c565b9182918261047c565b0390a356fea2646970667358221220c65b5f72f1324b8191829da0e63a285b854604e0e02a1585672efaf7fe1b66b164736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xE0`@R4a\0BWa\0\x11a\x01\xA1V[a\0\x19a\0GV[a\x16Ya\x06\xAA\x829`\x80Q\x81a\x05\x8E\x01R`\xA0Q\x81a\x0Cp\x01R`\xC0Q\x81a\x0C\xA3\x01Ra\x16Y\x90\xF3[a\0MV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0y\x90a\0QV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x91W`@RV[a\0[V[\x90a\0\xA9a\0\xA2a\0GV[\x92\x83a\0oV[V[`\x01\x80`@\x1B\x03\x81\x11a\0\xC7Wa\0\xC3` \x91a\0QV[\x01\x90V[a\0[V[\x90a\0\xDEa\0\xD9\x83a\0\xABV[a\0\x96V[\x91\x82RV[_\x7FWrapped Ether\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\x14`\ra\0\xCCV[\x90a\x01!` \x83\x01a\0\xE3V[V[a\x01+a\x01\nV[\x90V[_\x7FWETH\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01_`\x04a\0\xCCV[\x90a\x01l` \x83\x01a\x01.V[V[a\x01va\x01UV[\x90V[\x90V[`\xFF\x16\x90V[\x90V[a\x01\x99a\x01\x94a\x01\x9E\x92a\x01yV[a\x01\x82V[a\x01|V[\x90V[a\x01\xC4a\x01\xACa\x01#V[a\x01\xB4a\x01nV[a\x01\xBE`\x12a\x01\x85V[\x91a\x04\x1AV[V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01\xFEW[` \x83\x10\x14a\x01\xF9WV[a\x01\xCAV[\x91`\x7F\x16\x91a\x01\xEEV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x02:\x91\x02\x91a\x024_\x19\x84a\x02\x1BV[\x92a\x02\x1BV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x02[a\x02Va\x02`\x92a\x02DV[a\x01\x82V[a\x02DV[\x90V[\x90V[\x91\x90a\x02|a\x02wa\x02\x84\x93a\x02GV[a\x02cV[\x90\x83Ta\x02\x1FV[\x90UV[_\x90V[a\x02\x9E\x91a\x02\x98a\x02\x88V[\x91a\x02fV[V[[\x81\x81\x10a\x02\xACWPPV[\x80a\x02\xB9_`\x01\x93a\x02\x8CV[\x01a\x02\xA1V[\x91\x90`\x1F\x81\x11a\x02\xCFW[PPPV[a\x02\xDBa\x03\0\x93a\x02\x08V[\x90` a\x02\xE7\x84a\x02\x11V[\x83\x01\x93\x10a\x03\x08W[a\x02\xF9\x90a\x02\x11V[\x01\x90a\x02\xA0V[_\x80\x80a\x02\xCAV[\x91Pa\x02\xF9\x81\x92\x90Pa\x02\xF0V[\x1C\x90V[\x90a\x03*\x90_\x19\x90`\x08\x02a\x03\x16V[\x19\x16\x90V[\x81a\x039\x91a\x03\x1AV[\x90`\x02\x02\x17\x90V[\x90a\x03K\x81a\x01\xC6V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x04\tWa\x03m\x82a\x03g\x85Ta\x01\xDEV[\x85a\x02\xBFV[` \x90`\x1F\x83\x11`\x01\x14a\x03\xA1W\x91\x80\x91a\x03\x90\x93_\x92a\x03\x95W[PPa\x03/V[\x90U[V[\x90\x91P\x01Q_\x80a\x03\x89V[`\x1F\x19\x83\x16\x91a\x03\xB0\x85a\x02\x08V[\x92_[\x81\x81\x10a\x03\xF1WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x03\xD7W[PPP\x02\x01\x90Ua\x03\x93V[a\x03\xE7\x91\x01Q`\x1F\x84\x16\x90a\x03\x1AV[\x90U_\x80\x80a\x03\xCBV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x03\xB3V[a\0[V[\x90a\x04\x18\x91a\x03AV[V[\x90a\x04(a\x04/\x92_a\x04\x0EV[`\x01a\x04\x0EV[`\x80RF`\xA0Ra\x04>a\x05\xEFV[`\xC0RV[_\x90V[\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04va\x04o\x83a\x01\xDEV[\x80\x94a\x04JV[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xCDWP`\x01\x14a\x04\x91W[PPPV[a\x04\x9E\x91\x92\x93\x94Pa\x04SV[\x91_\x92[\x81\x84\x10a\x04\xB5WPP\x01\x90_\x80\x80a\x04\x8CV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04\xA2V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04\x8CV[\x90a\x04\xF2\x91a\x04\\V[\x90V[\x90a\x05\x15a\x05\x0E\x92a\x05\x05a\0GV[\x93\x84\x80\x92a\x04\xE8V[\x03\x83a\0oV[V[a\x05 \x90a\x04\xF5V[\x90V[` \x01\x90V[Q\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05La\x05Ga\x05Q\x92a\x05-V[a\x01\x82V[a\x05-V[\x90V[a\x05]\x90a\x058V[\x90V[a\x05i\x90a\x05TV[\x90V[\x90V[a\x05x\x90a\x05lV[\x90RV[a\x05\x85\x90a\x02DV[\x90RV[a\x05\x92\x90a\x05-V[\x90V[a\x05\x9E\x90a\x05\x89V[\x90RV[\x90\x95\x94\x92a\x05\xED\x94a\x05\xDCa\x05\xE6\x92a\x05\xD2`\x80\x96a\x05\xC8`\xA0\x88\x01\x9C_\x89\x01\x90a\x05oV[` \x87\x01\x90a\x05oV[`@\x85\x01\x90a\x05oV[``\x83\x01\x90a\x05|V[\x01\x90a\x05\x95V[V[a\x05\xF7a\x04CV[P\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0Fa\x06\x93a\x06-a\x06(_a\x04GV[a\x05\x17V[a\x06?a\x069\x82a\x05)V[\x91a\x05#V[ \x91a\x06\x84\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6Fa\x06o0a\x05`V[\x91a\x06xa\0GV[\x96\x87\x95` \x87\x01a\x05\xA2V[` \x82\x01\x81\x03\x82R\x03\x82a\0oV[a\x06\xA5a\x06\x9F\x82a\x05)V[\x91a\x05#V[ \x90V\xFE`\x80`@R`\x046\x10\x15a\0\x1DW[6a\t\x9BWa\0\x1Ba\x12\x1DV[\0[a\0'_5a\x01\x06V[\x80c\x06\xFD\xDE\x03\x14a\x01\x01W\x80c\t^\xA7\xB3\x14a\0\xFCW\x80c\x18\x16\r\xDD\x14a\0\xF7W\x80c#\xB8r\xDD\x14a\0\xF2W\x80c.\x1A}M\x14a\0\xEDW\x80c1<\xE5g\x14a\0\xE8W\x80c6D\xE5\x15\x14a\0\xE3W\x80cp\xA0\x821\x14a\0\xDEW\x80c~\xCE\xBE\0\x14a\0\xD9W\x80c\x95\xD8\x9BA\x14a\0\xD4W\x80c\xA9\x05\x9C\xBB\x14a\0\xCFW\x80c\xD0\xE3\r\xB0\x14a\0\xCAW\x80c\xD5\x05\xAC\xCF\x14a\0\xC5Wc\xDDb\xED>\x03a\0\x0EWa\teV[a\x08\xC7V[a\x07\xE8V[a\x07\xB2V[a\x07}V[a\x079V[a\x06\xEBV[a\x062V[a\x05\xD8V[a\x05YV[a\x05\0V[a\x04\x91V[a\x03\xFDV[a\x03\x14V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01$WV[a\x01\x16V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01pW[` \x83\x10\x14a\x01kWV[a\x01<V[\x91`\x7F\x16\x91a\x01`V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xA6a\x01\x9F\x83a\x01PV[\x80\x94a\x01zV[\x91`\x01\x81\x16\x90\x81_\x14a\x01\xFDWP`\x01\x14a\x01\xC1W[PPPV[a\x01\xCE\x91\x92\x93\x94Pa\x01\x83V[\x91_\x92[\x81\x84\x10a\x01\xE5WPP\x01\x90_\x80\x80a\x01\xBCV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x01\xD2V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xBCV[\x90a\x02\"\x91a\x01\x8CV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02M\x90a\x02%V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02gW`@RV[a\x02/V[\x90a\x02\x8Ca\x02\x85\x92a\x02|a\x01\x0CV[\x93\x84\x80\x92a\x02\x18V[\x03\x83a\x02CV[V[\x90_\x10a\x02\xA1Wa\x02\x9E\x90a\x02lV[\x90V[a\x01)V[a\x02\xB0_\x80a\x02\x8EV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x02\xEAa\x02\xF3` \x93a\x02\xF8\x93a\x02\xE1\x81a\x02\xB3V[\x93\x84\x80\x93a\x02\xB7V[\x95\x86\x91\x01a\x02\xC0V[a\x02%V[\x01\x90V[a\x03\x11\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xCBV[\x90V[4a\x03DWa\x03$6`\x04a\x01\x1AV[a\x03@a\x03/a\x02\xA6V[a\x037a\x01\x0CV[\x91\x82\x91\x82a\x02\xFCV[\x03\x90\xF3[a\x01\x12V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03]\x90a\x03IV[\x90V[a\x03i\x81a\x03TV[\x03a\x03pWV[_\x80\xFD[\x90P5\x90a\x03\x81\x82a\x03`V[V[\x90V[a\x03\x8F\x81a\x03\x83V[\x03a\x03\x96WV[_\x80\xFD[\x90P5\x90a\x03\xA7\x82a\x03\x86V[V[\x91\x90`@\x83\x82\x03\x12a\x03\xD1W\x80a\x03\xC5a\x03\xCE\x92_\x86\x01a\x03tV[\x93` \x01a\x03\x9AV[\x90V[a\x01\x16V[\x15\x15\x90V[a\x03\xE4\x90a\x03\xD6V[\x90RV[\x91\x90a\x03\xFB\x90_` \x85\x01\x94\x01\x90a\x03\xDBV[V[4a\x04.Wa\x04*a\x04\x19a\x04\x136`\x04a\x03\xA9V[\x90a\t\xFDV[a\x04!a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[\x1C\x90V[\x90V[a\x04J\x90`\x08a\x04O\x93\x02a\x043V[a\x047V[\x90V[\x90a\x04]\x91Ta\x04:V[\x90V[a\x04l`\x02_\x90a\x04RV[\x90V[a\x04x\x90a\x03\x83V[\x90RV[\x91\x90a\x04\x8F\x90_` \x85\x01\x94\x01\x90a\x04oV[V[4a\x04\xC1Wa\x04\xA16`\x04a\x01\x1AV[a\x04\xBDa\x04\xACa\x04`V[a\x04\xB4a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[\x90\x91``\x82\x84\x03\x12a\x04\xFBWa\x04\xF8a\x04\xE1\x84_\x85\x01a\x03tV[\x93a\x04\xEF\x81` \x86\x01a\x03tV[\x93`@\x01a\x03\x9AV[\x90V[a\x01\x16V[4a\x051Wa\x05-a\x05\x1Ca\x05\x166`\x04a\x04\xC6V[\x91a\n\xE7V[a\x05$a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[\x90` \x82\x82\x03\x12a\x05OWa\x05L\x91_\x01a\x03\x9AV[\x90V[a\x01\x16V[_\x01\x90V[4a\x05\x87Wa\x05qa\x05l6`\x04a\x056V[a\x0B\xFEV[a\x05ya\x01\x0CV[\x80a\x05\x83\x81a\x05TV[\x03\x90\xF3[a\x01\x12V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\xFF\x16\x90V[a\x05\xBF\x90a\x05\xB0V[\x90RV[\x91\x90a\x05\xD6\x90_` \x85\x01\x94\x01\x90a\x05\xB6V[V[4a\x06\x08Wa\x05\xE86`\x04a\x01\x1AV[a\x06\x04a\x05\xF3a\x05\x8CV[a\x05\xFBa\x01\x0CV[\x91\x82\x91\x82a\x05\xC3V[\x03\x90\xF3[a\x01\x12V[\x90V[a\x06\x19\x90a\x06\rV[\x90RV[\x91\x90a\x060\x90_` \x85\x01\x94\x01\x90a\x06\x10V[V[4a\x06bWa\x06B6`\x04a\x01\x1AV[a\x06^a\x06Ma\x0C^V[a\x06Ua\x01\x0CV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01\x12V[\x90` \x82\x82\x03\x12a\x06\x80Wa\x06}\x91_\x01a\x03tV[\x90V[a\x01\x16V[\x90V[a\x06\x9Ca\x06\x97a\x06\xA1\x92a\x03IV[a\x06\x85V[a\x03IV[\x90V[a\x06\xAD\x90a\x06\x88V[\x90V[a\x06\xB9\x90a\x06\xA4V[\x90V[\x90a\x06\xC6\x90a\x06\xB0V[_R` R`@_ \x90V[a\x06\xE8\x90a\x06\xE3`\x03\x91_\x92a\x06\xBCV[a\x04RV[\x90V[4a\x07\x1BWa\x07\x17a\x07\x06a\x07\x016`\x04a\x06gV[a\x06\xD2V[a\x07\x0Ea\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[a\x076\x90a\x071`\x05\x91_\x92a\x06\xBCV[a\x04RV[\x90V[4a\x07iWa\x07ea\x07Ta\x07O6`\x04a\x06gV[a\x07 V[a\x07\\a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[a\x07z`\x01_\x90a\x02\x8EV[\x90V[4a\x07\xADWa\x07\x8D6`\x04a\x01\x1AV[a\x07\xA9a\x07\x98a\x07nV[a\x07\xA0a\x01\x0CV[\x91\x82\x91\x82a\x02\xFCV[\x03\x90\xF3[a\x01\x12V[4a\x07\xE3Wa\x07\xDFa\x07\xCEa\x07\xC86`\x04a\x03\xA9V[\x90a\x0C\xD3V[a\x07\xD6a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[a\x07\xF36`\x04a\x01\x1AV[a\x07\xFBa\r\x81V[a\x08\x03a\x01\x0CV[\x80a\x08\r\x81a\x05TV[\x03\x90\xF3[a\x08\x1A\x81a\x05\xB0V[\x03a\x08!WV[_\x80\xFD[\x90P5\x90a\x082\x82a\x08\x11V[V[a\x08=\x81a\x06\rV[\x03a\x08DWV[_\x80\xFD[\x90P5\x90a\x08U\x82a\x084V[V[`\xE0\x81\x83\x03\x12a\x08\xC2Wa\x08m\x82_\x83\x01a\x03tV[\x92a\x08{\x83` \x84\x01a\x03tV[\x92a\x08\x89\x81`@\x85\x01a\x03\x9AV[\x92a\x08\x97\x82``\x83\x01a\x03\x9AV[\x92a\x08\xBFa\x08\xA8\x84`\x80\x85\x01a\x08%V[\x93a\x08\xB6\x81`\xA0\x86\x01a\x08HV[\x93`\xC0\x01a\x08HV[\x90V[a\x01\x16V[4a\x08\xFCWa\x08\xE6a\x08\xDA6`\x04a\x08WV[\x95\x94\x90\x94\x93\x91\x93a\x10:V[a\x08\xEEa\x01\x0CV[\x80a\x08\xF8\x81a\x05TV[\x03\x90\xF3[a\x01\x12V[\x91\x90`@\x83\x82\x03\x12a\t)W\x80a\t\x1Da\t&\x92_\x86\x01a\x03tV[\x93` \x01a\x03tV[\x90V[a\x01\x16V[\x90a\t8\x90a\x06\xB0V[_R` R`@_ \x90V[a\t]a\tb\x92a\tX`\x04\x93_\x94a\t.V[a\x06\xBCV[a\x04RV[\x90V[4a\t\x96Wa\t\x92a\t\x81a\t{6`\x04a\t\x01V[\x90a\tDV[a\t\x89a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[_\x80\xFD[_\x90V[_\x1B\x90V[\x90a\t\xB4_\x19\x91a\t\xA3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t\xD2a\t\xCDa\t\xD7\x92a\x03\x83V[a\x06\x85V[a\x03\x83V[\x90V[\x90V[\x90a\t\xF2a\t\xEDa\t\xF9\x92a\t\xBEV[a\t\xDAV[\x82Ta\t\xA8V[\x90UV[\x90a\n\x06a\t\x9FV[Pa\n&\x81a\n!a\n\x1A`\x043\x90a\t.V[\x85\x90a\x06\xBCV[a\t\xDDV[3\x91\x90\x91a\nra\n`a\nZ\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\nia\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[_\x1C\x90V[a\n\x8Ba\n\x90\x91a\nzV[a\x047V[\x90V[a\n\x9D\x90Ta\n\x7FV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\xC3a\n\xC9\x91\x93\x92\x93a\x03\x83V[\x92a\x03\x83V[\x82\x03\x91\x82\x11a\n\xD4WV[a\n\xA0V[\x90a\n\xE4\x91\x01a\x03\x83V[\x90V[\x91\x90\x91a\n\xF2a\t\x9FV[Pa\x0B\x11a\x0B\x0Ca\x0B\x05`\x04\x84\x90a\t.V[3\x90a\x06\xBCV[a\n\x93V[\x80a\x0B%a\x0B\x1F_\x19a\x03\x83V[\x91a\x03\x83V[\x03a\x0B\xCFW[Pa\x0BT\x82a\x0BNa\x0B?`\x03\x85\x90a\x06\xBCV[\x91a\x0BI\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\x0B|\x82a\x0Bva\x0Bg`\x03\x87\x90a\x06\xBCV[\x91a\x0Bq\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[\x91\x90\x91a\x0B\xC7a\x0B\xB5a\x0B\xAF\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x0B\xBEa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[a\x0B\xDDa\x0B\xF8\x91\x84\x90a\n\xB4V[a\x0B\xF3a\x0B\xEC`\x04\x85\x90a\t.V[3\x90a\x06\xBCV[a\t\xDDV[_a\x0B+V[a\x0CX\x90a\x0C\r3\x82\x90a\x125V[3\x81\x90a\x0COa\x0C=\x7F\x7F\xCFS,\x15\xF0\xA6\xDB\x0B\xD6\xD0\xE08\xBE\xA7\x1D0\xD8\x08\xC7\xD9\x8C\xB3\xBFrh\xA9[\xF5\x08\x1Be\x92a\x06\xB0V[\x92a\x0CFa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA23a\x13UV[V[_\x90V[a\x0Cfa\x0CZV[PFa\x0C\x9Aa\x0C\x94\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03\x83V[\x91a\x03\x83V[\x14_\x14a\x0C\xC6W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0[\x90V[a\x0C\xCEa\x14\xA5V[a\x0C\xC3V[\x90a\x0C\xDCa\t\x9FV[Pa\r\x05\x81a\x0C\xFFa\x0C\xF0`\x033\x90a\x06\xBCV[\x91a\x0C\xFA\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\r-\x81a\r'a\r\x18`\x03\x86\x90a\x06\xBCV[\x91a\r\"\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[3\x91\x90\x91a\rya\rga\ra\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\rpa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[a\r\x8C34\x90a\x15\x84V[34\x90a\r\xCEa\r\xBC\x7F\xE1\xFF\xFC\xC4\x92=\x04\xB5Y\xF4\xD2\x9A\x8B\xFCl\xDA\x04\xEB[\r<F\x07Q\xC2@,\\\\\xC9\x10\x9C\x92a\x06\xB0V[\x92a\r\xC5a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA2V[_\x7FPERMIT_DEADLINE_EXPIRED\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\x07`\x17` \x92a\x02\xB7V[a\x0E\x10\x81a\r\xD3V[\x01\x90V[a\x0E)\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xFAV[\x90V[\x15a\x0E3WV[a\x0E;a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0EQ`\x04\x82\x01a\x0E\x14V[\x03\x90\xFD[`\x01a\x0Ea\x91\x01a\x03\x83V[\x90V[a\x0Em\x90a\x03TV[\x90RV[\x91\x94a\x0E\xB9a\x0E\xC3\x92\x98\x97\x95a\x0E\xAF`\xA0\x96a\x0E\xA5a\x0E\xCA\x9Aa\x0E\x9B`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x06\x10V[` \x89\x01\x90a\x0EdV[`@\x87\x01\x90a\x0EdV[``\x85\x01\x90a\x04oV[`\x80\x83\x01\x90a\x04oV[\x01\x90a\x04oV[V[` \x01\x90V[Q\x90V[\x90P\x90V[_a\x19\x01`\xF0\x1B\x91\x01RV[a\x0E\xF3`\x02\x80\x92a\x0E\xD6V[a\x0E\xFC\x81a\x0E\xDBV[\x01\x90V[\x90V[a\x0F\x0Fa\x0F\x14\x91a\x06\rV[a\x0F\0V[\x90RV[` \x80\x93\x92a\x0F3a\x0F,a\x0F;\x94a\x0E\xE7V[\x80\x92a\x0F\x03V[\x01\x80\x92a\x0F\x03V[\x01\x90V[a\x0Fta\x0F{\x94a\x0Fj``\x94\x98\x97\x95a\x0F``\x80\x86\x01\x9A_\x87\x01\x90a\x06\x10V[` \x85\x01\x90a\x05\xB6V[`@\x83\x01\x90a\x06\x10V[\x01\x90a\x06\x10V[V[a\x0F\x85a\x01\x0CV[=_\x82>=\x90\xFD[\x90V[a\x0F\xA4a\x0F\x9Fa\x0F\xA9\x92a\x0F\x8DV[a\x06\x85V[a\x03IV[\x90V[a\x0F\xB5\x90a\x0F\x90V[\x90V[_\x7FINVALID_SIGNER\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\xEC`\x0E` \x92a\x02\xB7V[a\x0F\xF5\x81a\x0F\xB8V[\x01\x90V[a\x10\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\xDFV[\x90V[\x15a\x10\x18WV[a\x10 a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x106`\x04\x82\x01a\x0F\xF9V[\x03\x90\xFD[\x93a\x11G_\x93\x96\x92\x97` \x95a\x10c\x81a\x10\\a\x10VBa\x03\x83V[\x91a\x03\x83V[\x10\x15a\x0E,V[a\x11!\x8Aa\x10\xE9\x8Aa\x10\xDB\x8Da\x10wa\x0C^V[\x96\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x93a\x10\xA8\x81\x97\x93\x91`\x05a\x06\xBCV[a\x10\xC4a\x10\xB4\x82a\n\x93V[\x91a\x10\xBE\x83a\x0EUV[\x90a\t\xDDV[\x91\x92a\x10\xCEa\x01\x0CV[\x97` \x96\x89\x97\x88\x01a\x0EqV[\x8B\x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x10\xFBa\x10\xF5\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x91a\x11\x13a\x11\x08a\x01\x0CV[\x93\x84\x92\x8B\x84\x01a\x0F\x18V[\x89\x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x113a\x11-\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x92\x93a\x11>a\x01\x0CV[\x94\x85\x94\x85a\x0F?V[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x12\x18Wa\x11\xA9a\x11b_Qa\t\xA3V[\x80a\x11}a\x11wa\x11r_a\x0F\xACV[a\x03TV[\x91a\x03TV[\x14\x15\x80a\x11\xF9W[a\x11\x8E\x90a\x10\x11V[a\x11\xA4a\x11\x9D\x85\x92`\x04a\t.V[\x86\x90a\x06\xBCV[a\t\xDDV[\x91\x90\x91a\x11\xF4a\x11\xE2a\x11\xDC\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x11\xEBa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V[Pa\x11\x8E\x81a\x12\x10a\x12\n\x86a\x03TV[\x91a\x03TV[\x14\x90Pa\x11\x85V[a\x0F}V[a\x12%a\r\x81V[V[\x90a\x122\x91\x03a\x03\x83V[\x90V[a\x12]\x82a\x12Wa\x12H`\x03\x85\x90a\x06\xBCV[\x91a\x12R\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\x12za\x12s\x83a\x12n`\x02a\n\x93V[a\x12'V[`\x02a\t\xDDV[\x90a\x12\x84_a\x0F\xACV[\x90\x91a\x12\xCEa\x12\xBCa\x12\xB6\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x12\xC5a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V[_\x7FETH_TRANSFER_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\x07`\x13` \x92a\x02\xB7V[a\x13\x10\x81a\x12\xD3V[\x01\x90V[a\x13)\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xFAV[\x90V[\x15a\x133WV[a\x13;a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13Q`\x04\x82\x01a\x13\x14V[\x03\x90\xFD[_\x80\x80a\x13n\x94\x81\x94a\x13fa\t\x9FV[PZ\xF1a\x13,V[V[\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x13\x9Fa\x13\x98\x83a\x01PV[\x80\x94a\x13sV[\x91`\x01\x81\x16\x90\x81_\x14a\x13\xF6WP`\x01\x14a\x13\xBAW[PPPV[a\x13\xC7\x91\x92\x93\x94Pa\x13|V[\x91_\x92[\x81\x84\x10a\x13\xDEWPP\x01\x90_\x80\x80a\x13\xB5V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x13\xCBV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x13\xB5V[\x90a\x14\x1B\x91a\x13\x85V[\x90V[\x90a\x14>a\x147\x92a\x14.a\x01\x0CV[\x93\x84\x80\x92a\x14\x11V[\x03\x83a\x02CV[V[a\x14I\x90a\x14\x1EV[\x90V[a\x14U\x90a\x06\xA4V[\x90V[\x90\x95\x94\x92a\x14\xA3\x94a\x14\x92a\x14\x9C\x92a\x14\x88`\x80\x96a\x14~`\xA0\x88\x01\x9C_\x89\x01\x90a\x06\x10V[` \x87\x01\x90a\x06\x10V[`@\x85\x01\x90a\x06\x10V[``\x83\x01\x90a\x04oV[\x01\x90a\x0EdV[V[a\x14\xADa\x0CZV[P\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0Fa\x15Ia\x14\xE3a\x14\xDE_a\x13pV[a\x14@V[a\x14\xF5a\x14\xEF\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x91a\x15:\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6Fa\x15%0a\x14LV[\x91a\x15.a\x01\x0CV[\x96\x87\x95` \x87\x01a\x14XV[` \x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x15[a\x15U\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x90V[a\x15na\x15t\x91\x93\x92\x93a\x03\x83V[\x92a\x03\x83V[\x82\x01\x80\x92\x11a\x15\x7FWV[a\n\xA0V[\x90a\x15\xA2a\x15\x9B\x82a\x15\x96`\x02a\n\x93V[a\x15_V[`\x02a\t\xDDV[a\x15\xCA\x81a\x15\xC4a\x15\xB5`\x03\x86\x90a\x06\xBCV[\x91a\x15\xBF\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[a\x15\xD3_a\x0F\xACV[\x91\x90\x91a\x16\x1Ea\x16\x0Ca\x16\x06\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x16\x15a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xC6[_r\xF12K\x81\x91\x82\x9D\xA0\xE6:([\x85F\x04\xE0\xE0*\x15\x85g.\xFA\xF7\xFE\x1Bf\xB1dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436101561001d575b3661099b5761001b61121d565b005b6100275f35610106565b806306fdde0314610101578063095ea7b3146100fc57806318160ddd146100f757806323b872dd146100f25780632e1a7d4d146100ed578063313ce567146100e85780633644e515146100e357806370a08231146100de5780637ecebe00146100d957806395d89b41146100d4578063a9059cbb146100cf578063d0e30db0146100ca578063d505accf146100c55763dd62ed3e0361000e57610965565b6108c7565b6107e8565b6107b2565b61077d565b610739565b6106eb565b610632565b6105d8565b610559565b610500565b610491565b6103fd565b610314565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261012457565b610116565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610170575b602083101461016b57565b61013c565b91607f1691610160565b60209181520190565b5f5260205f2090565b905f92918054906101a661019f83610150565b809461017a565b916001811690815f146101fd57506001146101c1575b505050565b6101ce9192939450610183565b915f925b8184106101e557505001905f80806101bc565b600181602092959395548486015201910192906101d2565b92949550505060ff19168252151560200201905f80806101bc565b906102229161018c565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061024d90610225565b810190811067ffffffffffffffff82111761026757604052565b61022f565b9061028c6102859261027c61010c565b93848092610218565b0383610243565b565b905f106102a15761029e9061026c565b90565b610129565b6102b05f8061028e565b90565b5190565b60209181520190565b90825f9392825e0152565b6102ea6102f36020936102f8936102e1816102b3565b938480936102b7565b958691016102c0565b610225565b0190565b6103119160208201915f8184039101526102cb565b90565b346103445761032436600461011a565b61034061032f6102a6565b61033761010c565b918291826102fc565b0390f35b610112565b60018060a01b031690565b61035d90610349565b90565b61036981610354565b0361037057565b5f80fd5b9050359061038182610360565b565b90565b61038f81610383565b0361039657565b5f80fd5b905035906103a782610386565b565b91906040838203126103d157806103c56103ce925f8601610374565b9360200161039a565b90565b610116565b151590565b6103e4906103d6565b9052565b91906103fb905f602085019401906103db565b565b3461042e5761042a6104196104133660046103a9565b906109fd565b61042161010c565b918291826103e8565b0390f35b610112565b1c90565b90565b61044a90600861044f9302610433565b610437565b90565b9061045d915461043a565b90565b61046c60025f90610452565b90565b61047890610383565b9052565b919061048f905f6020850194019061046f565b565b346104c1576104a136600461011a565b6104bd6104ac610460565b6104b461010c565b9182918261047c565b0390f35b610112565b90916060828403126104fb576104f86104e1845f8501610374565b936104ef8160208601610374565b9360400161039a565b90565b610116565b346105315761052d61051c6105163660046104c6565b91610ae7565b61052461010c565b918291826103e8565b0390f35b610112565b9060208282031261054f5761054c915f0161039a565b90565b610116565b5f0190565b346105875761057161056c366004610536565b610bfe565b61057961010c565b8061058381610554565b0390f35b610112565b7f000000000000000000000000000000000000000000000000000000000000000090565b60ff1690565b6105bf906105b0565b9052565b91906105d6905f602085019401906105b6565b565b34610608576105e836600461011a565b6106046105f361058c565b6105fb61010c565b918291826105c3565b0390f35b610112565b90565b6106199061060d565b9052565b9190610630905f60208501940190610610565b565b346106625761064236600461011a565b61065e61064d610c5e565b61065561010c565b9182918261061d565b0390f35b610112565b906020828203126106805761067d915f01610374565b90565b610116565b90565b61069c6106976106a192610349565b610685565b610349565b90565b6106ad90610688565b90565b6106b9906106a4565b90565b906106c6906106b0565b5f5260205260405f2090565b6106e8906106e36003915f926106bc565b610452565b90565b3461071b57610717610706610701366004610667565b6106d2565b61070e61010c565b9182918261047c565b0390f35b610112565b610736906107316005915f926106bc565b610452565b90565b346107695761076561075461074f366004610667565b610720565b61075c61010c565b9182918261047c565b0390f35b610112565b61077a60015f9061028e565b90565b346107ad5761078d36600461011a565b6107a961079861076e565b6107a061010c565b918291826102fc565b0390f35b610112565b346107e3576107df6107ce6107c83660046103a9565b90610cd3565b6107d661010c565b918291826103e8565b0390f35b610112565b6107f336600461011a565b6107fb610d81565b61080361010c565b8061080d81610554565b0390f35b61081a816105b0565b0361082157565b5f80fd5b9050359061083282610811565b565b61083d8161060d565b0361084457565b5f80fd5b9050359061085582610834565b565b60e0818303126108c25761086d825f8301610374565b9261087b8360208401610374565b92610889816040850161039a565b92610897826060830161039a565b926108bf6108a88460808501610825565b936108b68160a08601610848565b9360c001610848565b90565b610116565b346108fc576108e66108da366004610857565b9594909493919361103a565b6108ee61010c565b806108f881610554565b0390f35b610112565b9190604083820312610929578061091d610926925f8601610374565b93602001610374565b90565b610116565b90610938906106b0565b5f5260205260405f2090565b61095d610962926109586004935f9461092e565b6106bc565b610452565b90565b346109965761099261098161097b366004610901565b90610944565b61098961010c565b9182918261047c565b0390f35b610112565b5f80fd5b5f90565b5f1b90565b906109b45f19916109a3565b9181191691161790565b6109d26109cd6109d792610383565b610685565b610383565b90565b90565b906109f26109ed6109f9926109be565b6109da565b82546109a8565b9055565b90610a0661099f565b50610a2681610a21610a1a6004339061092e565b85906106bc565b6109dd565b33919091610a72610a60610a5a7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936106b0565b936106b0565b93610a6961010c565b9182918261047c565b0390a3600190565b5f1c90565b610a8b610a9091610a7a565b610437565b90565b610a9d9054610a7f565b90565b634e487b7160e01b5f52601160045260245ffd5b610ac3610ac991939293610383565b92610383565b8203918211610ad457565b610aa0565b90610ae49101610383565b90565b919091610af261099f565b50610b11610b0c610b056004849061092e565b33906106bc565b610a93565b80610b25610b1f5f19610383565b91610383565b03610bcf575b50610b5482610b4e610b3f600385906106bc565b91610b4983610a93565b610ab4565b906109dd565b610b7c82610b76610b67600387906106bc565b91610b7183610a93565b610ad9565b906109dd565b919091610bc7610bb5610baf7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b93610bbe61010c565b9182918261047c565b0390a3600190565b610bdd610bf8918490610ab4565b610bf3610bec6004859061092e565b33906106bc565b6109dd565b5f610b2b565b610c5890610c0d338290611235565b338190610c4f610c3d7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65926106b0565b92610c4661010c565b9182918261047c565b0390a233611355565b565b5f90565b610c66610c5a565b5046610c9a610c947f0000000000000000000000000000000000000000000000000000000000000000610383565b91610383565b145f14610cc6577f00000000000000000000000000000000000000000000000000000000000000005b90565b610cce6114a5565b610cc3565b90610cdc61099f565b50610d0581610cff610cf0600333906106bc565b91610cfa83610a93565b610ab4565b906109dd565b610d2d81610d27610d18600386906106bc565b91610d2283610a93565b610ad9565b906109dd565b33919091610d79610d67610d617fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b93610d7061010c565b9182918261047c565b0390a3600190565b610d8c333490611584565b333490610dce610dbc7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c926106b0565b92610dc561010c565b9182918261047c565b0390a2565b5f7f5045524d49545f444541444c494e455f45585049524544000000000000000000910152565b610e0760176020926102b7565b610e1081610dd3565b0190565b610e299060208101905f818303910152610dfa565b90565b15610e3357565b610e3b61010c565b62461bcd60e51b815280610e5160048201610e14565b0390fd5b6001610e619101610383565b90565b610e6d90610354565b9052565b9194610eb9610ec392989795610eaf60a096610ea5610eca9a610e9b60c08a019e5f8b0190610610565b6020890190610e64565b6040870190610e64565b606085019061046f565b608083019061046f565b019061046f565b565b60200190565b5190565b905090565b5f61190160f01b910152565b610ef360028092610ed6565b610efc81610edb565b0190565b90565b610f0f610f149161060d565b610f00565b9052565b6020809392610f33610f2c610f3b94610ee7565b8092610f03565b018092610f03565b0190565b610f74610f7b94610f6a606094989795610f60608086019a5f870190610610565b60208501906105b6565b6040830190610610565b0190610610565b565b610f8561010c565b3d5f823e3d90fd5b90565b610fa4610f9f610fa992610f8d565b610685565b610349565b90565b610fb590610f90565b90565b5f7f494e56414c49445f5349474e4552000000000000000000000000000000000000910152565b610fec600e6020926102b7565b610ff581610fb8565b0190565b61100e9060208101905f818303910152610fdf565b90565b1561101857565b61102061010c565b62461bcd60e51b81528061103660048201610ff9565b0390fd5b936111475f939692976020956110638161105c61105642610383565b91610383565b1015610e2c565b6111218a6110e98a6110db8d611077610c5e565b967f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9936110a88197939160056106bc565b6110c46110b482610a93565b916110be83610e55565b906109dd565b91926110ce61010c565b9760209689978801610e71565b8b8201810382520382610243565b6110fb6110f582610ed2565b91610ecc565b209161111361110861010c565b9384928b8401610f18565b898201810382520382610243565b61113361112d82610ed2565b91610ecc565b20929361113e61010c565b94859485610f3f565b838052039060015afa15611218576111a96111625f516109a3565b8061117d6111776111725f610fac565b610354565b91610354565b1415806111f9575b61118e90611011565b6111a461119d8592600461092e565b86906106bc565b6109dd565b9190916111f46111e26111dc7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936106b0565b936106b0565b936111eb61010c565b9182918261047c565b0390a3565b5061118e8161121061120a86610354565b91610354565b149050611185565b610f7d565b611225610d81565b565b906112329103610383565b90565b61125d82611257611248600385906106bc565b9161125283610a93565b610ab4565b906109dd565b61127a6112738361126e6002610a93565b611227565b60026109dd565b906112845f610fac565b90916112ce6112bc6112b67fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b936112c561010c565b9182918261047c565b0390a3565b5f7f4554485f5452414e534645525f4641494c454400000000000000000000000000910152565b61130760136020926102b7565b611310816112d3565b0190565b6113299060208101905f8183039101526112fa565b90565b1561133357565b61133b61010c565b62461bcd60e51b81528061135160048201611314565b0390fd5b5f808061136e94819461136661099f565b505af161132c565b565b90565b60209181520190565b5f5260205f2090565b905f929180549061139f61139883610150565b8094611373565b916001811690815f146113f657506001146113ba575b505050565b6113c7919293945061137c565b915f925b8184106113de57505001905f80806113b5565b600181602092959395548486015201910192906113cb565b92949550505060ff19168252151560200201905f80806113b5565b9061141b91611385565b90565b9061143e6114379261142e61010c565b93848092611411565b0383610243565b565b6114499061141e565b90565b611455906106a4565b90565b909594926114a39461149261149c9261148860809661147e60a088019c5f890190610610565b6020870190610610565b6040850190610610565b606083019061046f565b0190610e64565b565b6114ad610c5a565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6115496114e36114de5f611370565b611440565b6114f56114ef82610ed2565b91610ecc565b209161153a7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6466115253061144c565b9161152e61010c565b96879560208701611458565b60208201810382520382610243565b61155b61155582610ed2565b91610ecc565b2090565b61156e61157491939293610383565b92610383565b820180921161157f57565b610aa0565b906115a261159b826115966002610a93565b61155f565b60026109dd565b6115ca816115c46115b5600386906106bc565b916115bf83610a93565b610ad9565b906109dd565b6115d35f610fac565b91909161161e61160c6116067fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936106b0565b936106b0565b9361161561010c565b9182918261047c565b0390a356fea2646970667358221220c65b5f72f1324b8191829da0e63a285b854604e0e02a1585672efaf7fe1b66b164736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x1DW[6a\t\x9BWa\0\x1Ba\x12\x1DV[\0[a\0'_5a\x01\x06V[\x80c\x06\xFD\xDE\x03\x14a\x01\x01W\x80c\t^\xA7\xB3\x14a\0\xFCW\x80c\x18\x16\r\xDD\x14a\0\xF7W\x80c#\xB8r\xDD\x14a\0\xF2W\x80c.\x1A}M\x14a\0\xEDW\x80c1<\xE5g\x14a\0\xE8W\x80c6D\xE5\x15\x14a\0\xE3W\x80cp\xA0\x821\x14a\0\xDEW\x80c~\xCE\xBE\0\x14a\0\xD9W\x80c\x95\xD8\x9BA\x14a\0\xD4W\x80c\xA9\x05\x9C\xBB\x14a\0\xCFW\x80c\xD0\xE3\r\xB0\x14a\0\xCAW\x80c\xD5\x05\xAC\xCF\x14a\0\xC5Wc\xDDb\xED>\x03a\0\x0EWa\teV[a\x08\xC7V[a\x07\xE8V[a\x07\xB2V[a\x07}V[a\x079V[a\x06\xEBV[a\x062V[a\x05\xD8V[a\x05YV[a\x05\0V[a\x04\x91V[a\x03\xFDV[a\x03\x14V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01$WV[a\x01\x16V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x01pW[` \x83\x10\x14a\x01kWV[a\x01<V[\x91`\x7F\x16\x91a\x01`V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x01\xA6a\x01\x9F\x83a\x01PV[\x80\x94a\x01zV[\x91`\x01\x81\x16\x90\x81_\x14a\x01\xFDWP`\x01\x14a\x01\xC1W[PPPV[a\x01\xCE\x91\x92\x93\x94Pa\x01\x83V[\x91_\x92[\x81\x84\x10a\x01\xE5WPP\x01\x90_\x80\x80a\x01\xBCV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x01\xD2V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x01\xBCV[\x90a\x02\"\x91a\x01\x8CV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02M\x90a\x02%V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02gW`@RV[a\x02/V[\x90a\x02\x8Ca\x02\x85\x92a\x02|a\x01\x0CV[\x93\x84\x80\x92a\x02\x18V[\x03\x83a\x02CV[V[\x90_\x10a\x02\xA1Wa\x02\x9E\x90a\x02lV[\x90V[a\x01)V[a\x02\xB0_\x80a\x02\x8EV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x02\xEAa\x02\xF3` \x93a\x02\xF8\x93a\x02\xE1\x81a\x02\xB3V[\x93\x84\x80\x93a\x02\xB7V[\x95\x86\x91\x01a\x02\xC0V[a\x02%V[\x01\x90V[a\x03\x11\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xCBV[\x90V[4a\x03DWa\x03$6`\x04a\x01\x1AV[a\x03@a\x03/a\x02\xA6V[a\x037a\x01\x0CV[\x91\x82\x91\x82a\x02\xFCV[\x03\x90\xF3[a\x01\x12V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03]\x90a\x03IV[\x90V[a\x03i\x81a\x03TV[\x03a\x03pWV[_\x80\xFD[\x90P5\x90a\x03\x81\x82a\x03`V[V[\x90V[a\x03\x8F\x81a\x03\x83V[\x03a\x03\x96WV[_\x80\xFD[\x90P5\x90a\x03\xA7\x82a\x03\x86V[V[\x91\x90`@\x83\x82\x03\x12a\x03\xD1W\x80a\x03\xC5a\x03\xCE\x92_\x86\x01a\x03tV[\x93` \x01a\x03\x9AV[\x90V[a\x01\x16V[\x15\x15\x90V[a\x03\xE4\x90a\x03\xD6V[\x90RV[\x91\x90a\x03\xFB\x90_` \x85\x01\x94\x01\x90a\x03\xDBV[V[4a\x04.Wa\x04*a\x04\x19a\x04\x136`\x04a\x03\xA9V[\x90a\t\xFDV[a\x04!a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[\x1C\x90V[\x90V[a\x04J\x90`\x08a\x04O\x93\x02a\x043V[a\x047V[\x90V[\x90a\x04]\x91Ta\x04:V[\x90V[a\x04l`\x02_\x90a\x04RV[\x90V[a\x04x\x90a\x03\x83V[\x90RV[\x91\x90a\x04\x8F\x90_` \x85\x01\x94\x01\x90a\x04oV[V[4a\x04\xC1Wa\x04\xA16`\x04a\x01\x1AV[a\x04\xBDa\x04\xACa\x04`V[a\x04\xB4a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[\x90\x91``\x82\x84\x03\x12a\x04\xFBWa\x04\xF8a\x04\xE1\x84_\x85\x01a\x03tV[\x93a\x04\xEF\x81` \x86\x01a\x03tV[\x93`@\x01a\x03\x9AV[\x90V[a\x01\x16V[4a\x051Wa\x05-a\x05\x1Ca\x05\x166`\x04a\x04\xC6V[\x91a\n\xE7V[a\x05$a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[\x90` \x82\x82\x03\x12a\x05OWa\x05L\x91_\x01a\x03\x9AV[\x90V[a\x01\x16V[_\x01\x90V[4a\x05\x87Wa\x05qa\x05l6`\x04a\x056V[a\x0B\xFEV[a\x05ya\x01\x0CV[\x80a\x05\x83\x81a\x05TV[\x03\x90\xF3[a\x01\x12V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\xFF\x16\x90V[a\x05\xBF\x90a\x05\xB0V[\x90RV[\x91\x90a\x05\xD6\x90_` \x85\x01\x94\x01\x90a\x05\xB6V[V[4a\x06\x08Wa\x05\xE86`\x04a\x01\x1AV[a\x06\x04a\x05\xF3a\x05\x8CV[a\x05\xFBa\x01\x0CV[\x91\x82\x91\x82a\x05\xC3V[\x03\x90\xF3[a\x01\x12V[\x90V[a\x06\x19\x90a\x06\rV[\x90RV[\x91\x90a\x060\x90_` \x85\x01\x94\x01\x90a\x06\x10V[V[4a\x06bWa\x06B6`\x04a\x01\x1AV[a\x06^a\x06Ma\x0C^V[a\x06Ua\x01\x0CV[\x91\x82\x91\x82a\x06\x1DV[\x03\x90\xF3[a\x01\x12V[\x90` \x82\x82\x03\x12a\x06\x80Wa\x06}\x91_\x01a\x03tV[\x90V[a\x01\x16V[\x90V[a\x06\x9Ca\x06\x97a\x06\xA1\x92a\x03IV[a\x06\x85V[a\x03IV[\x90V[a\x06\xAD\x90a\x06\x88V[\x90V[a\x06\xB9\x90a\x06\xA4V[\x90V[\x90a\x06\xC6\x90a\x06\xB0V[_R` R`@_ \x90V[a\x06\xE8\x90a\x06\xE3`\x03\x91_\x92a\x06\xBCV[a\x04RV[\x90V[4a\x07\x1BWa\x07\x17a\x07\x06a\x07\x016`\x04a\x06gV[a\x06\xD2V[a\x07\x0Ea\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[a\x076\x90a\x071`\x05\x91_\x92a\x06\xBCV[a\x04RV[\x90V[4a\x07iWa\x07ea\x07Ta\x07O6`\x04a\x06gV[a\x07 V[a\x07\\a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[a\x07z`\x01_\x90a\x02\x8EV[\x90V[4a\x07\xADWa\x07\x8D6`\x04a\x01\x1AV[a\x07\xA9a\x07\x98a\x07nV[a\x07\xA0a\x01\x0CV[\x91\x82\x91\x82a\x02\xFCV[\x03\x90\xF3[a\x01\x12V[4a\x07\xE3Wa\x07\xDFa\x07\xCEa\x07\xC86`\x04a\x03\xA9V[\x90a\x0C\xD3V[a\x07\xD6a\x01\x0CV[\x91\x82\x91\x82a\x03\xE8V[\x03\x90\xF3[a\x01\x12V[a\x07\xF36`\x04a\x01\x1AV[a\x07\xFBa\r\x81V[a\x08\x03a\x01\x0CV[\x80a\x08\r\x81a\x05TV[\x03\x90\xF3[a\x08\x1A\x81a\x05\xB0V[\x03a\x08!WV[_\x80\xFD[\x90P5\x90a\x082\x82a\x08\x11V[V[a\x08=\x81a\x06\rV[\x03a\x08DWV[_\x80\xFD[\x90P5\x90a\x08U\x82a\x084V[V[`\xE0\x81\x83\x03\x12a\x08\xC2Wa\x08m\x82_\x83\x01a\x03tV[\x92a\x08{\x83` \x84\x01a\x03tV[\x92a\x08\x89\x81`@\x85\x01a\x03\x9AV[\x92a\x08\x97\x82``\x83\x01a\x03\x9AV[\x92a\x08\xBFa\x08\xA8\x84`\x80\x85\x01a\x08%V[\x93a\x08\xB6\x81`\xA0\x86\x01a\x08HV[\x93`\xC0\x01a\x08HV[\x90V[a\x01\x16V[4a\x08\xFCWa\x08\xE6a\x08\xDA6`\x04a\x08WV[\x95\x94\x90\x94\x93\x91\x93a\x10:V[a\x08\xEEa\x01\x0CV[\x80a\x08\xF8\x81a\x05TV[\x03\x90\xF3[a\x01\x12V[\x91\x90`@\x83\x82\x03\x12a\t)W\x80a\t\x1Da\t&\x92_\x86\x01a\x03tV[\x93` \x01a\x03tV[\x90V[a\x01\x16V[\x90a\t8\x90a\x06\xB0V[_R` R`@_ \x90V[a\t]a\tb\x92a\tX`\x04\x93_\x94a\t.V[a\x06\xBCV[a\x04RV[\x90V[4a\t\x96Wa\t\x92a\t\x81a\t{6`\x04a\t\x01V[\x90a\tDV[a\t\x89a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xF3[a\x01\x12V[_\x80\xFD[_\x90V[_\x1B\x90V[\x90a\t\xB4_\x19\x91a\t\xA3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t\xD2a\t\xCDa\t\xD7\x92a\x03\x83V[a\x06\x85V[a\x03\x83V[\x90V[\x90V[\x90a\t\xF2a\t\xEDa\t\xF9\x92a\t\xBEV[a\t\xDAV[\x82Ta\t\xA8V[\x90UV[\x90a\n\x06a\t\x9FV[Pa\n&\x81a\n!a\n\x1A`\x043\x90a\t.V[\x85\x90a\x06\xBCV[a\t\xDDV[3\x91\x90\x91a\nra\n`a\nZ\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\nia\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[_\x1C\x90V[a\n\x8Ba\n\x90\x91a\nzV[a\x047V[\x90V[a\n\x9D\x90Ta\n\x7FV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\n\xC3a\n\xC9\x91\x93\x92\x93a\x03\x83V[\x92a\x03\x83V[\x82\x03\x91\x82\x11a\n\xD4WV[a\n\xA0V[\x90a\n\xE4\x91\x01a\x03\x83V[\x90V[\x91\x90\x91a\n\xF2a\t\x9FV[Pa\x0B\x11a\x0B\x0Ca\x0B\x05`\x04\x84\x90a\t.V[3\x90a\x06\xBCV[a\n\x93V[\x80a\x0B%a\x0B\x1F_\x19a\x03\x83V[\x91a\x03\x83V[\x03a\x0B\xCFW[Pa\x0BT\x82a\x0BNa\x0B?`\x03\x85\x90a\x06\xBCV[\x91a\x0BI\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\x0B|\x82a\x0Bva\x0Bg`\x03\x87\x90a\x06\xBCV[\x91a\x0Bq\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[\x91\x90\x91a\x0B\xC7a\x0B\xB5a\x0B\xAF\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x0B\xBEa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[a\x0B\xDDa\x0B\xF8\x91\x84\x90a\n\xB4V[a\x0B\xF3a\x0B\xEC`\x04\x85\x90a\t.V[3\x90a\x06\xBCV[a\t\xDDV[_a\x0B+V[a\x0CX\x90a\x0C\r3\x82\x90a\x125V[3\x81\x90a\x0COa\x0C=\x7F\x7F\xCFS,\x15\xF0\xA6\xDB\x0B\xD6\xD0\xE08\xBE\xA7\x1D0\xD8\x08\xC7\xD9\x8C\xB3\xBFrh\xA9[\xF5\x08\x1Be\x92a\x06\xB0V[\x92a\x0CFa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA23a\x13UV[V[_\x90V[a\x0Cfa\x0CZV[PFa\x0C\x9Aa\x0C\x94\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03\x83V[\x91a\x03\x83V[\x14_\x14a\x0C\xC6W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0[\x90V[a\x0C\xCEa\x14\xA5V[a\x0C\xC3V[\x90a\x0C\xDCa\t\x9FV[Pa\r\x05\x81a\x0C\xFFa\x0C\xF0`\x033\x90a\x06\xBCV[\x91a\x0C\xFA\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\r-\x81a\r'a\r\x18`\x03\x86\x90a\x06\xBCV[\x91a\r\"\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[3\x91\x90\x91a\rya\rga\ra\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\rpa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3`\x01\x90V[a\r\x8C34\x90a\x15\x84V[34\x90a\r\xCEa\r\xBC\x7F\xE1\xFF\xFC\xC4\x92=\x04\xB5Y\xF4\xD2\x9A\x8B\xFCl\xDA\x04\xEB[\r<F\x07Q\xC2@,\\\\\xC9\x10\x9C\x92a\x06\xB0V[\x92a\r\xC5a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA2V[_\x7FPERMIT_DEADLINE_EXPIRED\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\x07`\x17` \x92a\x02\xB7V[a\x0E\x10\x81a\r\xD3V[\x01\x90V[a\x0E)\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xFAV[\x90V[\x15a\x0E3WV[a\x0E;a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0EQ`\x04\x82\x01a\x0E\x14V[\x03\x90\xFD[`\x01a\x0Ea\x91\x01a\x03\x83V[\x90V[a\x0Em\x90a\x03TV[\x90RV[\x91\x94a\x0E\xB9a\x0E\xC3\x92\x98\x97\x95a\x0E\xAF`\xA0\x96a\x0E\xA5a\x0E\xCA\x9Aa\x0E\x9B`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x06\x10V[` \x89\x01\x90a\x0EdV[`@\x87\x01\x90a\x0EdV[``\x85\x01\x90a\x04oV[`\x80\x83\x01\x90a\x04oV[\x01\x90a\x04oV[V[` \x01\x90V[Q\x90V[\x90P\x90V[_a\x19\x01`\xF0\x1B\x91\x01RV[a\x0E\xF3`\x02\x80\x92a\x0E\xD6V[a\x0E\xFC\x81a\x0E\xDBV[\x01\x90V[\x90V[a\x0F\x0Fa\x0F\x14\x91a\x06\rV[a\x0F\0V[\x90RV[` \x80\x93\x92a\x0F3a\x0F,a\x0F;\x94a\x0E\xE7V[\x80\x92a\x0F\x03V[\x01\x80\x92a\x0F\x03V[\x01\x90V[a\x0Fta\x0F{\x94a\x0Fj``\x94\x98\x97\x95a\x0F``\x80\x86\x01\x9A_\x87\x01\x90a\x06\x10V[` \x85\x01\x90a\x05\xB6V[`@\x83\x01\x90a\x06\x10V[\x01\x90a\x06\x10V[V[a\x0F\x85a\x01\x0CV[=_\x82>=\x90\xFD[\x90V[a\x0F\xA4a\x0F\x9Fa\x0F\xA9\x92a\x0F\x8DV[a\x06\x85V[a\x03IV[\x90V[a\x0F\xB5\x90a\x0F\x90V[\x90V[_\x7FINVALID_SIGNER\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\xEC`\x0E` \x92a\x02\xB7V[a\x0F\xF5\x81a\x0F\xB8V[\x01\x90V[a\x10\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\xDFV[\x90V[\x15a\x10\x18WV[a\x10 a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x106`\x04\x82\x01a\x0F\xF9V[\x03\x90\xFD[\x93a\x11G_\x93\x96\x92\x97` \x95a\x10c\x81a\x10\\a\x10VBa\x03\x83V[\x91a\x03\x83V[\x10\x15a\x0E,V[a\x11!\x8Aa\x10\xE9\x8Aa\x10\xDB\x8Da\x10wa\x0C^V[\x96\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x93a\x10\xA8\x81\x97\x93\x91`\x05a\x06\xBCV[a\x10\xC4a\x10\xB4\x82a\n\x93V[\x91a\x10\xBE\x83a\x0EUV[\x90a\t\xDDV[\x91\x92a\x10\xCEa\x01\x0CV[\x97` \x96\x89\x97\x88\x01a\x0EqV[\x8B\x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x10\xFBa\x10\xF5\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x91a\x11\x13a\x11\x08a\x01\x0CV[\x93\x84\x92\x8B\x84\x01a\x0F\x18V[\x89\x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x113a\x11-\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x92\x93a\x11>a\x01\x0CV[\x94\x85\x94\x85a\x0F?V[\x83\x80R\x03\x90`\x01Z\xFA\x15a\x12\x18Wa\x11\xA9a\x11b_Qa\t\xA3V[\x80a\x11}a\x11wa\x11r_a\x0F\xACV[a\x03TV[\x91a\x03TV[\x14\x15\x80a\x11\xF9W[a\x11\x8E\x90a\x10\x11V[a\x11\xA4a\x11\x9D\x85\x92`\x04a\t.V[\x86\x90a\x06\xBCV[a\t\xDDV[\x91\x90\x91a\x11\xF4a\x11\xE2a\x11\xDC\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x11\xEBa\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V[Pa\x11\x8E\x81a\x12\x10a\x12\n\x86a\x03TV[\x91a\x03TV[\x14\x90Pa\x11\x85V[a\x0F}V[a\x12%a\r\x81V[V[\x90a\x122\x91\x03a\x03\x83V[\x90V[a\x12]\x82a\x12Wa\x12H`\x03\x85\x90a\x06\xBCV[\x91a\x12R\x83a\n\x93V[a\n\xB4V[\x90a\t\xDDV[a\x12za\x12s\x83a\x12n`\x02a\n\x93V[a\x12'V[`\x02a\t\xDDV[\x90a\x12\x84_a\x0F\xACV[\x90\x91a\x12\xCEa\x12\xBCa\x12\xB6\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x12\xC5a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V[_\x7FETH_TRANSFER_FAILED\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x13\x07`\x13` \x92a\x02\xB7V[a\x13\x10\x81a\x12\xD3V[\x01\x90V[a\x13)\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xFAV[\x90V[\x15a\x133WV[a\x13;a\x01\x0CV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13Q`\x04\x82\x01a\x13\x14V[\x03\x90\xFD[_\x80\x80a\x13n\x94\x81\x94a\x13fa\t\x9FV[PZ\xF1a\x13,V[V[\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x13\x9Fa\x13\x98\x83a\x01PV[\x80\x94a\x13sV[\x91`\x01\x81\x16\x90\x81_\x14a\x13\xF6WP`\x01\x14a\x13\xBAW[PPPV[a\x13\xC7\x91\x92\x93\x94Pa\x13|V[\x91_\x92[\x81\x84\x10a\x13\xDEWPP\x01\x90_\x80\x80a\x13\xB5V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x13\xCBV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x13\xB5V[\x90a\x14\x1B\x91a\x13\x85V[\x90V[\x90a\x14>a\x147\x92a\x14.a\x01\x0CV[\x93\x84\x80\x92a\x14\x11V[\x03\x83a\x02CV[V[a\x14I\x90a\x14\x1EV[\x90V[a\x14U\x90a\x06\xA4V[\x90V[\x90\x95\x94\x92a\x14\xA3\x94a\x14\x92a\x14\x9C\x92a\x14\x88`\x80\x96a\x14~`\xA0\x88\x01\x9C_\x89\x01\x90a\x06\x10V[` \x87\x01\x90a\x06\x10V[`@\x85\x01\x90a\x06\x10V[``\x83\x01\x90a\x04oV[\x01\x90a\x0EdV[V[a\x14\xADa\x0CZV[P\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0Fa\x15Ia\x14\xE3a\x14\xDE_a\x13pV[a\x14@V[a\x14\xF5a\x14\xEF\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x91a\x15:\x7F\xC8\x9E\xFD\xAAT\xC0\xF2\x0Cz\xDFa(\x82\xDF\tP\xF5\xA9Qc~\x03\x07\xCD\xCBLg/)\x8B\x8B\xC6Fa\x15%0a\x14LV[\x91a\x15.a\x01\x0CV[\x96\x87\x95` \x87\x01a\x14XV[` \x82\x01\x81\x03\x82R\x03\x82a\x02CV[a\x15[a\x15U\x82a\x0E\xD2V[\x91a\x0E\xCCV[ \x90V[a\x15na\x15t\x91\x93\x92\x93a\x03\x83V[\x92a\x03\x83V[\x82\x01\x80\x92\x11a\x15\x7FWV[a\n\xA0V[\x90a\x15\xA2a\x15\x9B\x82a\x15\x96`\x02a\n\x93V[a\x15_V[`\x02a\t\xDDV[a\x15\xCA\x81a\x15\xC4a\x15\xB5`\x03\x86\x90a\x06\xBCV[\x91a\x15\xBF\x83a\n\x93V[a\n\xD9V[\x90a\t\xDDV[a\x15\xD3_a\x0F\xACV[\x91\x90\x91a\x16\x1Ea\x16\x0Ca\x16\x06\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x06\xB0V[\x93a\x06\xB0V[\x93a\x16\x15a\x01\x0CV[\x91\x82\x91\x82a\x04|V[\x03\x90\xA3V\xFE\xA2dipfsX\"\x12 \xC6[_r\xF12K\x81\x91\x82\x9D\xA0\xE6:([\x85F\x04\xE0\xE0*\x15\x85g.\xFA\xF7\xFE\x1Bf\xB1dsolcC\0\x08\x1A\x003",
    );
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Deposit(address,uint256)` and selector `0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c`.
```solidity
event Deposit(address indexed from, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Deposit {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Deposit {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Deposit(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                225u8,
                255u8,
                252u8,
                196u8,
                146u8,
                61u8,
                4u8,
                181u8,
                89u8,
                244u8,
                210u8,
                154u8,
                139u8,
                252u8,
                108u8,
                218u8,
                4u8,
                235u8,
                91u8,
                13u8,
                60u8,
                70u8,
                7u8,
                81u8,
                194u8,
                64u8,
                44u8,
                92u8,
                92u8,
                201u8,
                16u8,
                156u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Deposit {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Deposit> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Deposit) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Withdrawal(address,uint256)` and selector `0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65`.
```solidity
event Withdrawal(address indexed to, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Withdrawal {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Withdrawal {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Withdrawal(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                127u8,
                207u8,
                83u8,
                44u8,
                21u8,
                240u8,
                166u8,
                219u8,
                11u8,
                214u8,
                208u8,
                224u8,
                56u8,
                190u8,
                167u8,
                29u8,
                48u8,
                216u8,
                8u8,
                199u8,
                217u8,
                140u8,
                179u8,
                191u8,
                114u8,
                104u8,
                169u8,
                91u8,
                245u8,
                8u8,
                27u8,
                101u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Withdrawal {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Withdrawal> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Withdrawal) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`.
```solidity
function DOMAIN_SEPARATOR() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORCall {}
    ///Container type for the return parameters of the [`DOMAIN_SEPARATOR()`](DOMAIN_SEPARATORCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DOMAIN_SEPARATORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DOMAIN_SEPARATORReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DOMAIN_SEPARATOR()";
            const SELECTOR: [u8; 4] = [54u8, 68u8, 229u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address, address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveCall {
        pub spender: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct approveReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsCall {}
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        pub _0: u8,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `deposit()` and selector `0xd0e30db0`.
```solidity
function deposit() external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct depositCall {}
    ///Container type for the return parameters of the [`deposit()`](depositCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct depositReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositCall> for UnderlyingRustTuple<'_> {
                fn from(value: depositCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositReturn> for UnderlyingRustTuple<'_> {
                fn from(value: depositReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for depositCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = depositReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deposit()";
            const SELECTOR: [u8; 4] = [208u8, 227u8, 13u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct nameReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nonces(address)` and selector `0x7ecebe00`.
```solidity
function nonces(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct noncesCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`nonces(address)`](noncesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct noncesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesCall> for UnderlyingRustTuple<'_> {
                fn from(value: noncesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noncesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noncesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = noncesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonces(address)";
            const SELECTOR: [u8; 4] = [126u8, 206u8, 190u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permit(address,address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xd505accf`.
```solidity
function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permitCall {
        pub owner: alloy::sol_types::private::Address,
        pub spender: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        pub v: u8,
        pub r: alloy::sol_types::private::FixedBytes<32>,
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`permit(address,address,uint256,uint256,uint8,bytes32,bytes32)`](permitCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permitReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitCall> for UnderlyingRustTuple<'_> {
                fn from(value: permitCall) -> Self {
                    (
                        value.owner,
                        value.spender,
                        value.value,
                        value.deadline,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        value: tuple.2,
                        deadline: tuple.3,
                        v: tuple.4,
                        r: tuple.5,
                        s: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: permitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [213u8, 5u8, 172u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct symbolReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferCall {
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 amount) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdraw(uint256)` and selector `0x2e1a7d4d`.
```solidity
function withdraw(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct withdrawCall {
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdraw(uint256)`](withdrawCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct withdrawReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdraw(uint256)";
            const SELECTOR: [u8; 4] = [46u8, 26u8, 125u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WETH`](self) function calls.
    pub enum WETHCalls {
        DOMAIN_SEPARATOR(DOMAIN_SEPARATORCall),
        allowance(allowanceCall),
        approve(approveCall),
        balanceOf(balanceOfCall),
        decimals(decimalsCall),
        deposit(depositCall),
        name(nameCall),
        nonces(noncesCall),
        permit(permitCall),
        symbol(symbolCall),
        totalSupply(totalSupplyCall),
        transfer(transferCall),
        transferFrom(transferFromCall),
        withdraw(withdrawCall),
    }
    #[automatically_derived]
    impl WETHCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [24u8, 22u8, 13u8, 221u8],
            [35u8, 184u8, 114u8, 221u8],
            [46u8, 26u8, 125u8, 77u8],
            [49u8, 60u8, 229u8, 103u8],
            [54u8, 68u8, 229u8, 21u8],
            [112u8, 160u8, 130u8, 49u8],
            [126u8, 206u8, 190u8, 0u8],
            [149u8, 216u8, 155u8, 65u8],
            [169u8, 5u8, 156u8, 187u8],
            [208u8, 227u8, 13u8, 176u8],
            [213u8, 5u8, 172u8, 207u8],
            [221u8, 98u8, 237u8, 62u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WETHCalls {
        const NAME: &'static str = "WETHCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 14usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DOMAIN_SEPARATOR(_) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::deposit(_) => <depositCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::nonces(_) => <noncesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permit(_) => <permitCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdraw(_) => <withdrawCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WETHCalls>] = &[
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn withdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <withdrawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::withdraw)
                    }
                    withdraw
                },
                {
                    fn decimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn nonces(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::nonces)
                    }
                    nonces
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::symbol)
                    }
                    symbol
                },
                {
                    fn transfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::transfer)
                    }
                    transfer
                },
                {
                    fn deposit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <depositCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::deposit)
                    }
                    deposit
                },
                {
                    fn permit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::permit)
                    }
                    permit
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WETHCalls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WETHCalls::allowance)
                    }
                    allowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::deposit(inner) => {
                    <depositCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::deposit(inner) => {
                    <depositCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WETH`](self) events.
    pub enum WETHEvents {
        Approval(Approval),
        Deposit(Deposit),
        Transfer(Transfer),
        Withdrawal(Withdrawal),
    }
    #[automatically_derived]
    impl WETHEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                127u8,
                207u8,
                83u8,
                44u8,
                21u8,
                240u8,
                166u8,
                219u8,
                11u8,
                214u8,
                208u8,
                224u8,
                56u8,
                190u8,
                167u8,
                29u8,
                48u8,
                216u8,
                8u8,
                199u8,
                217u8,
                140u8,
                179u8,
                191u8,
                114u8,
                104u8,
                169u8,
                91u8,
                245u8,
                8u8,
                27u8,
                101u8,
            ],
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
            [
                225u8,
                255u8,
                252u8,
                196u8,
                146u8,
                61u8,
                4u8,
                181u8,
                89u8,
                244u8,
                210u8,
                154u8,
                139u8,
                252u8,
                108u8,
                218u8,
                4u8,
                235u8,
                91u8,
                13u8,
                60u8,
                70u8,
                7u8,
                81u8,
                194u8,
                64u8,
                44u8,
                92u8,
                92u8,
                201u8,
                16u8,
                156u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WETHEvents {
        const NAME: &'static str = "WETHEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<Deposit as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Deposit as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Deposit)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                Some(<Withdrawal as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Withdrawal as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Withdrawal)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WETHEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Deposit(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Withdrawal(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Deposit(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Withdrawal(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WETH`](self) contract instance.

See the [wrapper's documentation](`WETHInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> WETHInstance<T, P, N> {
        WETHInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WETHInstance<T, P, N>>,
    > {
        WETHInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        WETHInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`WETH`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WETH`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WETHInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WETHInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WETHInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WETHInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WETH`](self) contract instance.

See the [wrapper's documentation](`WETHInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<WETHInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WETHInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WETHInstance<T, P, N> {
            WETHInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WETHInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DOMAIN_SEPARATOR`] function.
        pub fn DOMAIN_SEPARATOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DOMAIN_SEPARATORCall, N> {
            self.call_builder(&DOMAIN_SEPARATORCall {})
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { _0, _1 })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, amount })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { _0 })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, decimalsCall, N> {
            self.call_builder(&decimalsCall {})
        }
        ///Creates a new call builder for the [`deposit`] function.
        pub fn deposit(&self) -> alloy_contract::SolCallBuilder<T, &P, depositCall, N> {
            self.call_builder(&depositCall {})
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`nonces`] function.
        pub fn nonces(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, noncesCall, N> {
            self.call_builder(&noncesCall { _0 })
        }
        ///Creates a new call builder for the [`permit`] function.
        pub fn permit(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, permitCall, N> {
            self.call_builder(
                &permitCall {
                    owner,
                    spender,
                    value,
                    deadline,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall { to, amount })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`withdraw`] function.
        pub fn withdraw(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawCall, N> {
            self.call_builder(&withdrawCall { amount })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WETHInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`Deposit`] event.
        pub fn Deposit_filter(&self) -> alloy_contract::Event<T, &P, Deposit, N> {
            self.event_filter::<Deposit>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
        ///Creates a new event filter for the [`Withdrawal`] event.
        pub fn Withdrawal_filter(&self) -> alloy_contract::Event<T, &P, Withdrawal, N> {
            self.event_filter::<Withdrawal>()
        }
    }
}
